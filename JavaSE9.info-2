This is JavaSE9.info, produced by makeinfo version 6.5 from
JavaSE9.texi.


File: JavaSE9.info,  Node: Class Constructor,  Up: java.lang.Class

25.2.1.1 'Class' getConstructor
...............................

 -- Constructor on Class:
          Constructor<T>
          getConstructor (parameterType)
     Returns a 'Constructor' object that reflects the specified public
     constructor of the class represented by this 'Class' object.

'Class' getConstructors
.......................

 -- Constructor on Class:
          Constructor<?>[]
          getConstructors ()
     Returns an array containing 'Constructor' objects reflecting all
     the public constructors of the class represented by this 'Class'
     object.


File: JavaSE9.info,  Node: Retrieving Class Objects,  Next: Examining Class Modifiers,  Prev: java.lang.Class,  Up: Classes and Reflection

25.2.2 Retrieving Class Objects
-------------------------------

The entry point for all reflection operations is 'java.lang.Class'.
None of the classes in 'java.lang.reflect' have public constructors.
(1) To get to these classes, it is necessary to invoke appropriate
methods on 'Class'.  There are several ways to get a 'Class' depending
on whether the code has access to an object, the name of the class, a
type, or an existing 'Class'.

* Menu:

* Object.getClass::
* .class Syntax::
* Class.forName() and Class.getName() Methods::
* TYPE Field for Primitive Wrappers::
* Methods that Return Classes::

   ---------- Footnotes ----------

   (1) with the exception of 'java.lang.reflect.ReflectPermission'.


File: JavaSE9.info,  Node: Object.getClass,  Next: .class Syntax,  Up: Retrieving Class Objects

25.2.2.1 'Object.getClass()'
............................

If an instance of an object is available, then the simplest way to get
its 'Class' is to invoke 'Object.getClass()'.

String.getClass()
.................

     Class c = "foo".getClass();

returns the 'Class' for 'String';

System.console.getClass()
.........................

     Class c = System.console().getClass();

returns the 'Class' corresponding to 'java.io.Console'.  (1)

Enum.getClass()
...............

     enum E { A, B }
     Class c  = A.getClass();

'A' is an instance of the 'enum' 'E'; thus, 'getClass()' returns the
'Class' corresponding to the enumeration type 'E'.

Array.getClass()
................

Since arrays are 'Object's, it is possible to invoke 'getClass()' on
an instance of an array.  The returned 'Class' corresponds to an array
with component type 'byte'.

     import java.util.HashSet;
     import java.util.Set;

     Set<String> s = new HashSet<String>();
     Class c = s.getClass();

   'java.util.Set' is an interface to an object of type
'java.util.HashSet'.  The value returned by 'getClass()' is the class
corresponding to 'java.util.HashSet'.

   ---------- Footnotes ----------

   (1) There is a unique console associated with the virtual machine
which is returned by the 'static' method 'System.console()'.


File: JavaSE9.info,  Node: .class Syntax,  Next: Class.forName() and Class.getName() Methods,  Prev: Object.getClass,  Up: Retrieving Class Objects

25.2.2.2 The '.class' Syntax
............................

If the type is available, but there is no instance, then it is
possible to obtain a 'Class' by appending '.class' to the name of the
type.  This is also the easiest way to obtain the 'Class' for a
primitive type.

Primitive.class
...............

     boolean b;
     Class c = b.getClass();	 // compile-time error
     Class c = boolean.class; // correct

The statement 'boolean.getClass()' would produce a compile-time error
because a 'boolean' is a primitive type and cannot be dereferenced.
The '.class' syntax returns the 'Class' corresponding to the type
'boolean'.

Type.class
..........

     Class c = java.io.PrintStream.class;

The variable 'c' will be the 'Class' corresponding to the type
'java.io.PrintStream'.

Multi-dimensional Array
.......................

     Class c = int[][].class;

The '.class' syntax may be used to retrieve a 'Class' corresonding to
a multi-dimensional array of a given type.


File: JavaSE9.info,  Node: Class.forName() and Class.getName() Methods,  Next: TYPE Field for Primitive Wrappers,  Prev: .class Syntax,  Up: Retrieving Class Objects

25.2.2.3 'Class.forName()' and 'Class.getName()' Methods
........................................................

If the fully-qualified name of a class is available, it is possible to
get the corresponding 'Class' using the 'static' method
'Class.forName()'.  This cannot be used for primitive types.

   The syntax for names of array classes is described by
'Class.getName()'.  This syntax is applicable to references and
primitive types.

'forName()'
...........

     Class c = Class.forName("com.duke.MyLocalServiceProvider");

This statement will create a class from the given fully-qualified
name.

'getName()'
...........

*FIXME*: should these be 'getName()' instead of 'forName()'?

     Class cDoubleArray = Class.forName("[D");
     Class cStringArray = Class.forName("[[Ljava.lang.String;");

The variable 'cDoubleArray' will contain the 'Class' corresponding to
an array of primitive type 'double' (i.e., the same as
'double[].class'.  The 'cStringArray' variable will contain the
'Class' corresponding to a two-dimensional array of 'String' (i.e.,
identical to String[][].class).


File: JavaSE9.info,  Node: TYPE Field for Primitive Wrappers,  Next: Methods that Return Classes,  Prev: Class.forName() and Class.getName() Methods,  Up: Retrieving Class Objects

25.2.2.4 TYPE Field for Primitive Type Wrappers
...............................................

The '.class' syntax is a more convenient and the preferred way to
obtain the 'Class' for a primitive type; however, there is another way
to acquire the 'Class'.  Each of the primitive types and 'void' has a
wrapper class in 'java.lang' that is used for boxing of primitive
types to reference types.  Each wrapper class contains a field name
'TYPE' which is equal to the 'Class' for the primitive type being
wrapped.

Wrapper TYPE for Primitive
..........................

     Class c = Double.TYPE;

There is a class 'java.lang.Double' which is used to wrap the
primitive type 'double' whenever an 'Object' is required.  The value
of 'Double.TYPE' is identical to that of 'double.class'.

Wrapper TYPE for void
.....................

     Class c = Void.TYPE;

   'Void.TYPE' is identical to 'void.class'.


File: JavaSE9.info,  Node: Methods that Return Classes,  Prev: TYPE Field for Primitive Wrappers,  Up: Retrieving Class Objects

25.2.2.5 Methods that Return Classes
....................................

There are several 'Reflection' APIs which return classes, but these
may only be accessed if a 'Class' has already been obtained, either
directly or indirectly.

'Class.getSuperClass()'
.......................

Returns the super class for the given class.

     Class c = javax.swing.JButton.class.getSuperclass();

'Class.getClasses()'
....................

Returns all the public classes, interfaces, and enums that are members
of the class including inherited members.

     Class<?>[] c = Character.class.getClasses();

'Class.getDeclaredClasses()'
............................

Returns all of the classes interfaces, and enums that are explicitly
declared in this class.

     Class<?>[] c = Character.class.getDeclaredClasses();

'Class.getDeclaringClass()'
...........................

     java.lang.reflect.Field.getDeclaringClass()
     java.lang.reflect.Method.getDeclaringClass()
     java.lang.reflect.Constructor.getDeclaringClass()

Returns the 'Class' in which these members were declared.  'Anonymous
Class Declarations' will not have a declaring class but will have an
enclosing class.

     import java.lang.reflect.Field;

     Field f = System.class.getField("out");
     Class c = f.getDeclaringClass();

The field out is declared in 'System'.

     public class MyClass {
         static Object o = new Object() {
             public void m() {}
         };
         static Class<c> = o.getClass().getEnclosingClass();
     }

   The declaring class of the anonymous class defined by 'o' is 'null'

'Class.getEnclosingClass()'
...........................

Returns the immediately enclosing class of the class.

     Class c = Thread.State.class().getEnclosingClass();

The enclosing class of the enum 'Thread.State' is 'Thread'.

     public class MyClass {
         static Object o = new Object() {
             public void m() {}
         };
         static Class<c> = o.getClass().getEnclosingClass();
     }

   The anonymous class defined by 'o' is enclosed by 'MyClass'.


File: JavaSE9.info,  Node: Examining Class Modifiers,  Next: Discovering Class Members,  Prev: Retrieving Class Objects,  Up: Classes and Reflection

25.2.3 Examing Class Modifiers and Types
----------------------------------------

A class may be declared with one or more modifiers which affect its
runtime behavior:

   * Access modifiers: public, protected, and private
   * Modifier requiring override: abstract
   * Modifier restricting to one instance: static
   * Modifier prohibiting value modification: final
   * Modifier forcing strict floating point behavior: strictfp
   * Annotations

   Not all modifiers are allowed on all classes, for example an
interface cannot be 'final' and an 'enum' cannot be 'abstract'.
'java.lang.reflect.Modifier' contains declarations for all possible
modifiers.  It also contains methods which may be used to decode the
set of modifiers returned by 'Class.getModifiers()'.


File: JavaSE9.info,  Node: Discovering Class Members,  Prev: Examining Class Modifiers,  Up: Classes and Reflection

25.2.4 Discovering Class Members
--------------------------------

There are two categories of methods provided in 'Class' for accessing
fields, methods, and constructors:

  1. methods which enumerate these members; and
  2. methods which search for particular members.

Also there are distinct methods for

   * accessing members declared directly on the class; versus
   * methods which search the superinterfaces and superclasses for
     inherited members.

   The following tables provide a summary of all the member-locating
methods and their characteristics.

                  Class Methods for Locating Fields
'Class' API         List of          Inherited          Private
                    members?         members?           members?
-------------------------------------------------------------------------
getDeclarareField() no               no                 yes
getField()          no               yes                no
getDeclaredFields() yes              no                 yes
getFields()         yes              yes                no



                 Class Methods for Locating Methods
'Class' API         List of          Inherited          Private
                    members?         members?           members?
-------------------------------------------------------------------------
getDeclarareMethod()no               no                 yes
getMethod()         no               yes                no
getDeclaredMethods()yes              no                 yes
getMethods()        yes              yes                no



               Class Methods for Locating Constructors
'Class' API         List of          Inherited          Private
                    members?         members?           members?
-------------------------------------------------------------------------
getDeclarareConstructor()no          N/A(1)             yes
getConstructor()    no               N/A                no
getDeclaredConstructors()yes         N/A                yes
getConstructors()   yes              N/A                no

Table 25.3: Class Methods for Locating Fields, Methods, and
Constructors

   ---------- Footnotes ----------

   (1) Constructors are not inherited


File: JavaSE9.info,  Node: Members and Reflection,  Next: Arays and Enumerated Types and Reflection,  Prev: Classes and Reflection,  Up: Reflection

25.3 Members and Reflection
===========================

Reflection defines an interface 'java.lang.reflect.Member' which is
implemented by

   * 'java.lang.reflect.Field',
   * 'java.lang.reflect.Method', and
   * 'java.lang.reflect.Constructor'.

   For each member, the lesson will describe the associated APIs to
retrieve declaration and type information, any operations unique to
the member (for example, setting the value of a field or invoking a
method), and commonly encountered errors.  Each concept will be
illustrated with code samples and related output which approximate
some expected reflection uses.

Note about Members and the Specification
----------------------------------------

According to The Java Language Specification, Java SE 7 Edition, the
"members of a class" are the inherited components of the class body
including fields, methods, nested classes, interfaces, and enumerated
types.  Since constructors are not inherited, they are not members.
This differs from the implementing classes of
'java.lang.reflect.Member'.

* Menu:

* reflect Fields::
* reflect Methods::
* reflect Constructors::


File: JavaSE9.info,  Node: reflect Fields,  Next: reflect Methods,  Up: Members and Reflection

25.3.1 'reflect.Fields'
-----------------------

Fields have a type and a value.  The 'java.lang.reflect.Field' class
provides methods for accessing type information and setting and
getting values of a field on a given object.


File: JavaSE9.info,  Node: reflect Methods,  Next: reflect Constructors,  Prev: reflect Fields,  Up: Members and Reflection

25.3.2 'reflect.Method'
-----------------------

Methods have return values, parameters, and may throw exceptions.  The
'java.lang.reflect.Method' class provides methods for obtaining the
type information for the parameters and return value.  It may also be
used to invoke methods on a given object.


File: JavaSE9.info,  Node: reflect Constructors,  Prev: reflect Methods,  Up: Members and Reflection

25.3.3 'reflect.Constructors'
-----------------------------

The Reflection APIs for constructors are defined in
'java.lang.reflect.Constructor' and are similar to those for methods,
with two major exceptions: first, constructors have no return values;
second, the invocation of a constructor creates a new instance of an
object for a given class.

   Similar to methods, reflection provides APIs to

   * discover and retrieve the constructors of a class and
   * obtain declaration information such as the modifiers, parameters,
     annotations, and thrown exceptions.
   * New instances of classes may also be created using a specified
     constructor.

   The key classes used when working with constructors are 'Class' and
'java.lang.reflect.Constructor'.  Common operations involving
constructors are covered in the following sections.

* Menu:

* Finding Constructors::
* Constructor Modifiers::
* Creating New Class Instances::


File: JavaSE9.info,  Node: Finding Constructors,  Next: Constructor Modifiers,  Up: reflect Constructors

25.3.3.1 Finding Constructors
.............................

This section illustrates how to retrieve constructors with specific
parameters.

   A constructor declaration includes the name, modifiers, parameters,
and list of throwable exceptions.  The 'java.lang.reflect.Constructor'
class provides a way to obtain this information.


File: JavaSE9.info,  Node: Constructor Modifiers,  Next: Creating New Class Instances,  Prev: Finding Constructors,  Up: reflect Constructors

25.3.3.2 Retrieving and Parsing Constructor Modifiers
.....................................................

This section shows how to obtain the modifiers of a constructor
declaration and other information about the constructor.

   Because of the role of constructors in the language, fewer
modifiers are meaningful than for methods:

   * Access modifiers:
        * 'public',
        * 'protected', and
        * 'private'
   * Annotations


File: JavaSE9.info,  Node: Creating New Class Instances,  Prev: Constructor Modifiers,  Up: reflect Constructors

25.3.3.3 Creating New Class Instances
.....................................

This section shows how to instantiate an instance of an object by
invoking its constructor.

   There are two reflective methods for creating instances of classes:

  1. 'java.lang.reflect.Constructor.newInstance()' and
  2. 'Class.newInstance()'.

   The former is preferred and is thus used in these examples because:

   * 'Class.newInstance()' can only invoke the zero-argument
     constructor, while 'Constructor.newInstance()' may invoke any
     constructor, regardless of the number of parameters.
   * 'Class.newInstance()' throws any exception thrown by the
     constructor, regardless of whether it is checked or unchecked.
     'Constructor.newInstance()' always wraps the thrown exception
     with an 'InvocationTargetException'.
   * 'Class.newInstance()' requires that the constructor be visible;
     'Constructor.newInstance()' may invoke private constructors under
     certain circumstances.


File: JavaSE9.info,  Node: Arays and Enumerated Types and Reflection,  Prev: Members and Reflection,  Up: Reflection

25.4 Arrays and Enumerate Types and Reflection
==============================================

From the Java virtual machine's perspective, arrays and enumerated
types (or 'enums') are just classes.  Many of the methods in 'Class'
may be used on them.  Reflection provides a few specific APIs for
arrays and enums.  This lesson uses a series of code samples to
describe how to distinguish each of these objects from other classes
and operate on them.  Various errors are also be examined.

* Menu:

* Arrays and Reflection::
* Enumerate Types and Reflection::


File: JavaSE9.info,  Node: Arrays and Reflection,  Next: Enumerate Types and Reflection,  Up: Arays and Enumerated Types and Reflection

25.4.1 Arrays and Reflection
----------------------------

Arrays have a component type and a length (which is not part of the
type).  Arrays may be maniuplated either in their entirety or
component by component.  Reflection provides the
'java.lang.reflect.Array' class for the latter purpose.

* Menu:

* Identifying Array Types::
* Creating New Arrays::
* Getting and Setting Arrays::


File: JavaSE9.info,  Node: Identifying Array Types,  Next: Creating New Arrays,  Up: Arrays and Reflection

25.4.1.1 Identifying Array Types
................................

Array types may be identified by invoking 'Class.isArray()'.  To
obtain a 'Class' use one of the methods described in *note Retrieving
Class Objects:: section.


File: JavaSE9.info,  Node: Creating New Arrays,  Next: Getting and Setting Arrays,  Prev: Identifying Array Types,  Up: Arrays and Reflection

25.4.1.2 Creating New Arrays
............................

Just as in non-reflective code, reflection supports the ability to
dynamically create arrays of arbitrary type and dimensions via
'java.lang.reflect.Array.newInstance()'.  Consider ArrayCreator, a
basic interpreter capable of dynamically creating arrays.  The syntax
that will be parsed is as follows:

     fully_qualified_class_name variable_name[] =
     	{ val1, val2, val3, ... }


File: JavaSE9.info,  Node: Getting and Setting Arrays,  Prev: Creating New Arrays,  Up: Arrays and Reflection

25.4.1.3 Getting and Setting Arrays and Their Components
........................................................

Just as in non-reflective code, an array field may be set or retrieved
in its entirety or component by component.  To set the entire array at
once, use 'java.lang.reflect.Field.set(Object obj, Object value)'.  To
retrieve the entire array, use 'Field.get(Object)'.  Individual
components can be set or retrieved using methods in
'java.lang.reflect.Array'.

   'Array' provides methods of the form 'setFoo()' and 'getFoo()' for
setting and getting components of any primitive type.  For example,
the component of an int array may be set with 'Array.setInt(Object
array, int index, int value)' and may be retrieved with
'Array.getInt(Object array, int index)'.

Setting a Field of Type Array
.............................

Accessing Elements of a Multidimensional Array
..............................................


File: JavaSE9.info,  Node: Enumerate Types and Reflection,  Prev: Arrays and Reflection,  Up: Arays and Enumerated Types and Reflection

25.4.2 Enumerated Types and Reflection
--------------------------------------

Enums are treated very much like ordinary classes in reflection code.
'Class.isEnum()' tells whether a 'Class' represents an enum.
'Class.getEnumConstants()' retrieves the enum constants defined in an
enum.  'java.lang.reflect.Field.isEnumConstant()' indicates whether a
field is an enumerated type.

* Menu:

* Enumerated Types Reflection::


File: JavaSE9.info,  Node: Enumerated Types Reflection,  Up: Enumerate Types and Reflection

25.4.2.1 Enumerated Types in Reflection
.......................................

An "enum" is a language construct that is used to define type-safe
enumerations which can be used when a fixed set of named values is
desired.  All 'enums' implicitly extend 'java.lang.Enum'.  'Enums' may
contain one or more 'enum' constants, which define unique instances of
the 'enum' type.  An 'enum' declaration defines an 'enum' type which
is very similar to a class in that it may have members such as fields,
methods, and constructors (with some restrictions).

   Since 'enums' are classes, reflection has no need to define an
explicit java.lang.reflect.Enum class.  The only Reflection APIs that
are specific to 'enums' are 'Class.isEnum()',
'Class.getEnumConstants()', and
'java.lang.reflect.Field.isEnumConstant()'.  Most reflective
operations involving 'enums' are the same as any other class or
member.  For example, 'enum' constants are implemented as 'public
static final' fields on the 'enum'.  The following sections show how
to use 'Class' and 'java.lang.reflect.Field' with 'enums'.

Examining Enums
...............

Illustrates how to retrieve an enum's constants and any other fields,
constructors, and methods

   Reflection provides three enum-specific APIs:

'Class.isEnum()'
     Indicates whether this class represents an enum type
'Class.getEnumConstants()'
     Retrieves the list of enum constants defined by the enum in the
     order they're declared
'java.lang.reflect.Field.isEnumConstant()'
     Indicates whether this field represents an element of an
     enumerated type

   Sometimes it is necessary to dynamically retrieve the list of enum
constants; in non-reflective code this is accomplished by invoking the
implicitly declared static method 'values()' on the enum.  If an
instance of an 'enum' type is not available the only way to get a list
of the possible values is to invoke 'Class.getEnumConstants()' since
it is impossible to instantiate an 'enum' type.

Getting and Setting Fields with Enum Types
..........................................

Shows how to set and get fields with an enum constant value

   Fields which store 'enums' are set and retrieved as any other
reference type, using 'Field.set()' and 'Field.get()'.  For more
information on accessing fields, see the Fields section.  *Note
reflect Fields::


File: JavaSE9.info,  Node: Swing,  Next: The Makefile,  Prev: Reflection,  Up: Top

26 Introducinvg Swing
*********************


File: JavaSE9.info,  Node: The Makefile,  Next: Code Chunk Summaries,  Prev: Swing,  Up: Top

Appendix A The Makefile
***********************

{'Makefile'} ==
     <Makefile CONSTANTS>
     <Makefile DEFAULTS>
     <Makefile TANGLE WEAVE>
     <Makefile PDF>
     <Makefile HTML>
     <Makefile CLEAN Targets>
     <Makefile MAKEFILE Target>

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<Makefile CLEAN           See *note Makefile-CLEAN-Targets::.
Targets>
<Makefile CONSTANTS>      See *note Makefile-CONSTANTS::.
<Makefile DEFAULTS>       See *note Makefile-DEFAULTS::.
<Makefile HTML>           See *note Makefile-HTML::.
<Makefile MAKEFILE        See *note Makefile-MAKEFILE-Target::.
Target>
<Makefile PDF>            See *note Makefile-PDF::.
<Makefile TANGLE WEAVE>   See *note Makefile-TANGLE-WEAVE::.

* Menu:

* Makefile Constants::
* Makefile Defaults::
* Make the Makefile::
* Makefile Tangle Weave::
* Makefile PDF::
* Makefile HTML::
* Makefile Clean Targets::


File: JavaSE9.info,  Node: Makefile Constants,  Next: Makefile Defaults,  Up: The Makefile

A.1 Makefile Constants
======================

*FIXME*: Relativize ROOT

<Makefile CONSTANTS> ==
     ROOT := /usr/local/dev/programming/Java/JavaSE9
     FILENAME := JavaSE9
     AUX := {aux,cps,fns,log,toc}

This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.


File: JavaSE9.info,  Node: Makefile Defaults,  Next: Make the Makefile,  Prev: Makefile Constants,  Up: The Makefile

A.2 Makefile Default Targets
============================

<Makefile DEFAULTS> ==
     .PHONY: all
     all: tangle weave


This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.


File: JavaSE9.info,  Node: Make the Makefile,  Next: Makefile Tangle Weave,  Prev: Makefile Defaults,  Up: The Makefile

A.3 Make the Makefile
=====================

<Makefile MAKEFILE Target> ==
     .PHONY : makefile
     makefile : jrtangle worldclean


This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.


File: JavaSE9.info,  Node: Makefile Tangle Weave,  Next: Makefile PDF,  Prev: Make the Makefile,  Up: The Makefile

A.4 Makefile Tangle Weave Targets
=================================

<Makefile TANGLE WEAVE> ==
     .PHONY: tangle weave jrtangle jrweave texi

     tangle: jrtangle
     weave: jrweave

     jrtangle: $(FILENAME).twjr
         jrtangle $(FILENAME).twjr

     jrweave: texi

     texi: $(FILENAME).texi

     $(FILENAME).texi: $(FILENAME).twjr
         jrweave $(FILENAME).twjr > $(FILENAME).texi

This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.


File: JavaSE9.info,  Node: Makefile PDF,  Next: Makefile HTML,  Prev: Makefile Tangle Weave,  Up: The Makefile

A.5 Makefile PDF
================

<Makefile PDF> ==
     <Makefile MAKEPDF>
     <Makefile OPENPDF>


This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<Makefile MAKEPDF>        See *note Makefile-MAKEPDF::.
<Makefile OPENPDF>        See *note Makefile-OPENPDF::.

* Menu:

* Makefile MAKEPDF::


File: JavaSE9.info,  Node: Makefile MAKEPDF,  Up: Makefile PDF

A.5.1 Makefile MAKEPDF
----------------------

<Makefile MAKEPDF> ==
     .PHONY : makepdf
     makepdf : ${FILENAME}.pdf

     ${FILENAME}.pdf : ${FILENAME}.texi
         pdftexi2dvi ${FILENAME}.texi


This chunk is called by <Makefile PDF>; see its first definition at
*note Makefile-PDF::.

* Menu:

* Makefile OPENPDF::


File: JavaSE9.info,  Node: Makefile OPENPDF,  Up: Makefile MAKEPDF

A.5.1.1 Makefile OPENPDF
........................

<Makefile OPENPDF> ==
     .PHONY : pdf
     pdf : makepdf
         open ${FILENAME}.pdf


This chunk is called by <Makefile PDF>; see its first definition at
*note Makefile-PDF::.


File: JavaSE9.info,  Node: Makefile HTML,  Next: Makefile Clean Targets,  Prev: Makefile PDF,  Up: The Makefile

A.6 Makefile HTML
=================

<Makefile HTML> ==
     .PHONY: html
     html : ${FILENAME}.texi
         makeinfo --html ${FILENAME}.texi


This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.


File: JavaSE9.info,  Node: Makefile Clean Targets,  Prev: Makefile HTML,  Up: The Makefile

A.7 Makefile Clean Targets
==========================

<Makefile CLEAN Targets> ==
     <Makefile CLEAN>
     <Makefile DISTCLEAN>
     <Makefile WORLDCLEAN>


This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<Makefile CLEAN>          See *note Makefile-CLEAN::.
<Makefile DISTCLEAN>      See *note Makefile-DISTCLEAN::.
<Makefile WORLDCLEAN>     See *note Makefile-WORLDCLEAN::.

* Menu:

* Makefile Clean ::
* Makefile DistClean::
* Makefile WorldClean::


File: JavaSE9.info,  Node: Makefile Clean,  Next: Makefile DistClean,  Up: Makefile Clean Targets

A.7.1 Makefile Clean
--------------------

<Makefile CLEAN> ==
     .PHONY: clean
     clean:
         rm -f *~
         rm -f $(FILENAME).??


This chunk is called by <Makefile CLEAN Targets>; see its first
definition at *note Makefile-CLEAN-Targets::.


File: JavaSE9.info,  Node: Makefile DistClean,  Next: Makefile WorldClean,  Prev: Makefile Clean,  Up: Makefile Clean Targets

A.7.2 Makefile DistClean
------------------------

<Makefile DISTCLEAN> ==
     .PHONY : distclean
     distclean : clean
         rm -fv ${FILENAME}.${AUX}


This chunk is called by <Makefile CLEAN Targets>; see its first
definition at *note Makefile-CLEAN-Targets::.


File: JavaSE9.info,  Node: Makefile WorldClean,  Prev: Makefile DistClean,  Up: Makefile Clean Targets

A.7.3 Makefile WorldClean
-------------------------

<Makefile WORLDCLEAN> ==
     .PHONY: worldclean
     worldclean :
         for file in ${ROOT}/*; do \
           [ \
             $${file} != "${ROOT}/${FILENAME}.twjr" -a \
             $$file != "${ROOT}/Makefile" -a \
             $$file != ".git" \
           ] \
           && rm -rfv "$${file}" || :; \
         done


This chunk is called by <Makefile CLEAN Targets>; see its first
definition at *note Makefile-CLEAN-Targets::.


File: JavaSE9.info,  Node: Code Chunk Summaries,  Next: List of Tables,  Prev: The Makefile,  Up: Top

Appendix B Code Chunk Summaries
*******************************

This major node presents alphabetical lists of all the file
definitions, the code chunk definitions, and the code chunk
references.

* Menu:

* File Definitions::            Source files by definition.
* Code Chunk Definitions::      Code chunks by definition.
* Code Chunk References::       Code chunks by reference.


File: JavaSE9.info,  Node: File Definitions,  Next: Code Chunk Definitions,  Up: Code Chunk Summaries

B.1 Source File Definitions
===========================

{'AbstractAreas.java '}
     This chunk is defined in *note AbstractAreas-java-::.
{'BRRead.java'}
     This chunk is defined in *note BRRead-java::.
{'BRReadLines.java'}
     This chunk is defined in *note BRReadLines-java::.
{'BufferedInputStreamDemo.java'}
     This chunk is defined in *note BufferedInputStreamDemo-java::.
{'BufferedReaderDemo.java'}
     This chunk is defined in *note BufferedReaderDemo-java::.
{'CopyFile.java'}
     This chunk is defined in *note CopyFile-java::.
{'CopyFileMultTryWR.java'}
     This chunk is defined in *note CopyFileMultTryWR-java::.
{'DirList.java'}
     This chunk is defined in *note DirList-java::.
{'DirListOnly'}
     This chunk is defined in *note DirListOnly::.
{'FileReaderDemo.java'}
     This chunk is defined in *note FileReaderDemo-java::.
{'FindAreas.java '}
     This chunk is defined in *note FindAreas-java-::.
{'GenMethDemo.java'}
     This chunk is defined in *note GenMethDemo-java::.
{'Makefile'}
     This chunk is defined in *note Makefile::.
{'OnlyExt.java'}
     This chunk is defined in *note OnlyExt-java::.
{'PrinterWriterDemo.java'}
     This chunk is defined in *note PrinterWriterDemo-java::.
{'ReflectionDemo1.java'}
     This chunk is defined in *note ReflectionDemo1-java::.
{'ShowFile.java'}
     This chunk is defined in *note ShowFile-java::.
{'ShowFileAlt.java'}
     This chunk is defined in *note ShowFileAlt-java::.
{'ShowFileSingleTry'}
     This chunk is defined in *note ShowFileSingleTry::.
{'ShowFileTryWR.java'}
     This chunk is defined in *note ShowFileTryWR-java::.
{'SimpleGenerics.java'}
     This chunk is defined in *note SimpleGenerics-java::.
{'Stack.java'}
     This chunk is defined in *note Stack-java::.
{'StackImproved.java'}
     This chunk is defined in *note StackImproved-java::.
{'TestStack.java'}
     This chunk is defined in *note TestStack-java::.
{'TwoTypeParameters.java'}
     This chunk is defined in *note TwoTypeParameters-java::.


File: JavaSE9.info,  Node: Code Chunk Definitions,  Next: Code Chunk References,  Prev: File Definitions,  Up: Code Chunk Summaries

B.2 Code Chunk Definitions
==========================

<AbstractAreas Abstract Area Method Declaration >
     This chunk is defined in *note
     AbstractAreas-Abstract-Area-Method-Declaration-::.
<AbstractAreas Abstract Class Figure >
     This chunk is defined in *note
     AbstractAreas-Abstract-Class-Figure-::.
<AbstractAreas Main Class >
     This chunk is defined in *note AbstractAreas-Main-Class-::.
<AbstractAreas Main Method Declaration >
     This chunk is defined in *note
     AbstractAreas-Main-Method-Declaration-::.
<BRRead BufferedReader Constructor>
     This chunk is defined in *note
     BRRead-BufferedReader-Constructor::.
<BRRead Enter Characters>
     This chunk is defined in *note BRRead-Enter-Characters::.
<BRReadLines BufferedReader Constructor>
     This chunk is defined in *note
     BRReadLines-BufferedReader-Constructor::.
<BRReadLines Enter Lines>
     This chunk is defined in *note BRReadLines-Enter-Lines::.
<BufferedInputStreamDemo Buffer>
     This chunk is defined in *note BufferedInputStreamDemo-Buffer::.
<BufferedInputStreamDemo ByteArrayInputStream>
     This chunk is defined in *note
     BufferedInputStreamDemo-ByteArrayInputStream::.
<BufferedInputStreamDemo Instance Variables>
     This chunk is defined in *note
     BufferedInputStreamDemo-Instance-Variables::.
<BufferedInputStreamDemo String>
     This chunk is defined in *note BufferedInputStreamDemo-String::.
<BufferedInputStreamDemo Switch on Character>
     This chunk is defined in *note
     BufferedInputStreamDemo-Switch-on-Character::.
<BufferedInputStreamDemo TryWithResources BufferedInputStream>
     This chunk is defined in *note
     BufferedInputStreamDemo-TryWithResources-BufferedInputStream::.
<BufferedInputStreamDemo Utility Variables>
     This chunk is defined in *note
     BufferedInputStreamDemo-Utility-Variables::.
<BufferedInputStreamDemo While Loop>
     This chunk is defined in *note
     BufferedInputStreamDemo-While-Loop::.
<BufferedReaderDemo Buffer>
     This chunk is defined in *note BufferedReaderDemo-Buffer::.
<BufferedReaderDemo Instance Variables>
     This chunk is defined in *note
     BufferedReaderDemo-Instance-Variables::.
<BufferedReaderDemo TryWithResources BufferedReader>
     This chunk is defined in *note
     BufferedReaderDemo-TryWithResources-BufferedReader::.
<Call Overridden Methods One By One >
     This chunk is defined in *note
     Call-Overridden-Methods-One-By-One-::.
<Call Overridden Methods One By One Except Figure >
     This chunk is defined in *note
     Call-Overridden-Methods-One-By-One-Except-Figure-::.
<Catch Exception>
     This chunk is defined in *note Catch-Exception::.
<Catch IOException>
     This chunk is defined in *note Catch-IOException::.
<Class Declaration>
     This chunk is defined in *note Class-Declaration::.
<Class Gen>
     This chunk is defined in *note Class-Gen::.
<Class GenDemo>
     This chunk is defined in *note Class-GenDemo::.
<Class SimpGen>
     This chunk is defined in *note Class-SimpGen::.
<Class TwoGen>
     This chunk is defined in *note Class-TwoGen::.
<Constructor of Two Parameters>
     This chunk is defined in *note Constructor-of-Two-Parameters::.
<Constructor taking parameter of Type T>
     This chunk is defined in *note
     Constructor-taking-parameter-of-Type-T::.
<CopyFile Check For 2 Files>
     This chunk is defined in *note CopyFile-Check-For-2-Files::.
<CopyFile Copy a File>
     This chunk is defined in *note CopyFile-Copy-a-File::.
<CopyFile Initial Comments>
     This chunk is defined in *note CopyFile-Initial-Comments::.
<CopyFile Instance Variable Declarations>
     This chunk is defined in *note
     CopyFile-Instance-Variable-Declarations::.
<CopyFileMultTryWR Initial Comments>
     This chunk is defined in *note
     CopyFileMultTryWR-Initial-Comments::.
<CopyFileMultTryWR Manage Two Files>
     This chunk is defined in *note
     CopyFileMultTryWR-Manage-Two-Files::.
<Create Basic Figure Objects >
     This chunk is defined in *note Create-Basic-Figure-Objects-::.
<Create Basic Figure Objects Except Figure >
     This chunk is defined in *note
     Create-Basic-Figure-Objects-Except-Figure-::.
<Create Basic Figure Reference Variable >
     This chunk is defined in *note
     Create-Basic-Figure-Reference-Variable-::.
<Create a Gen object for Integers>
     This chunk is defined in *note
     Create-a-Gen-object-for-Integers::.
<Create a Gen object for Strings>
     This chunk is defined in *note Create-a-Gen-object-for-Strings::.
<DirList Examine Directory Contents>
     This chunk is defined in *note
     DirList-Examine-Directory-Contents::.
<DirList Examine Directory Contents For-Loop>
     This chunk is defined in *note
     DirList-Examine-Directory-Contents-For-Loop::.
<DirList Instance Variable Declarations>
     This chunk is defined in *note
     DirList-Instance-Variable-Declarations::.
<DirList Obtain Directory From Command-Line Args>
     This chunk is defined in *note
     DirList-Obtain-Directory-From-Command-Line-Args::.
<DirListOnly FilenameFilter Object>
     This chunk is defined in *note
     DirListOnly-FilenameFilter-Object::.
<DirListOnly FilenameFilter Object List>
     This chunk is defined in *note
     DirListOnly-FilenameFilter-Object-List::.
<DirListOnly Print List>
     This chunk is defined in *note DirListOnly-Print-List::.
<Figure Area Method Declaration >
     This chunk is defined in *note Figure-Area-Method-Declaration-::.
<Figure Constructor >
     This chunk is defined in *note Figure-Constructor-::.
<Figure Instance Variable Declarations >
     This chunk is defined in *note
     Figure-Instance-Variable-Declarations-::.
<FileReaderDemo TryWithResources FileReader>
     This chunk is defined in *note
     FileReaderDemo-TryWithResources-FileReader::.
<FindAreas Main Class >
     This chunk is defined in *note FindAreas-Main-Class-::.
<FindAreas Main Method Declaration >
     This chunk is defined in *note
     FindAreas-Main-Method-Declaration-::.
<FindAreas SubClass Rectangle >
     This chunk is defined in *note FindAreas-SubClass-Rectangle-::.
<FindAreas SubClass Triangle >
     This chunk is defined in *note FindAreas-SubClass-Triangle-::.
<FindAreas SuperClass Figure >
     This chunk is defined in *note FindAreas-SuperClass-Figure-::.
<GenMethDemo Main>
     This chunk is defined in *note GenMethDemo-Main::.
<Get Value>
     This chunk is defined in *note Get-Value::.
<Import java.io>
     This chunk is defined in *note Import-java-io::.
<Import java.io.File>
     This chunk is defined in *note Import-java-io-File::.
<Import java.lang.reflect>
     This chunk is defined in *note Import-java-lang-reflect::.
<Instance Methods Show and Get>
     This chunk is defined in *note Instance-Methods-Show-and-Get::.
<Instance Variable ob of Type T>
     This chunk is defined in *note Instance-Variable-ob-of-Type-T::.
<Integer Type Parameter>
     This chunk is defined in *note Integer-Type-Parameter::.
<Makefile CLEAN>
     This chunk is defined in *note Makefile-CLEAN::.
<Makefile CLEAN Targets>
     This chunk is defined in *note Makefile-CLEAN-Targets::.
<Makefile CONSTANTS>
     This chunk is defined in *note Makefile-CONSTANTS::.
<Makefile DEFAULTS>
     This chunk is defined in *note Makefile-DEFAULTS::.
<Makefile DISTCLEAN>
     This chunk is defined in *note Makefile-DISTCLEAN::.
<Makefile HTML>
     This chunk is defined in *note Makefile-HTML::.
<Makefile MAKEFILE Target>
     This chunk is defined in *note Makefile-MAKEFILE-Target::.
<Makefile MAKEPDF>
     This chunk is defined in *note Makefile-MAKEPDF::.
<Makefile OPENPDF>
     This chunk is defined in *note Makefile-OPENPDF::.
<Makefile PDF>
     This chunk is defined in *note Makefile-PDF::.
<Makefile TANGLE WEAVE>
     This chunk is defined in *note Makefile-TANGLE-WEAVE::.
<Makefile WORLDCLEAN>
     This chunk is defined in *note Makefile-WORLDCLEAN::.
<Method returning object of type T>
     This chunk is defined in *note
     Method-returning-object-of-type-T::.
<Method showing type of T>
     This chunk is defined in *note Method-showing-type-of-T::.
<Number 1>
     This chunk is defined in *note Number-1::.
<Number 2>
     This chunk is defined in *note Number-2::.
<OnlyExt Accept Method Implementation>
     This chunk is defined in *note
     OnlyExt-Accept-Method-Implementation::.
<OnlyExt Constructor>
     This chunk is defined in *note OnlyExt-Constructor::.
<OnlyExt Instance Variable Declarations>
     This chunk is defined in *note
     OnlyExt-Instance-Variable-Declarations::.
<PrintWriterDemo PrintWriter Constructor>
     This chunk is defined in *note
     PrintWriterDemo-PrintWriter-Constructor::.
<PrintWriterDemo Printing To Console>
     This chunk is defined in *note
     PrintWriterDemo-Printing-To-Console::.
<Rectangle Area Method Declaration >
     This chunk is defined in *note
     Rectangle-Area-Method-Declaration-::.
<Rectangle Constructor >
     This chunk is defined in *note Rectangle-Constructor-::.
<Reference to Integer Instance>
     This chunk is defined in *note Reference-to-Integer-Instance::.
<ReflectionDemo1 Class forName Call>
     This chunk is defined in *note
     ReflectionDemo1-Class-forName-Call::.
<ReflectionDemo1 getConstructors Call>
     This chunk is defined in *note
     ReflectionDemo1-getConstructors-Call::.
<ReflectionDemo1 getFields Call>
     This chunk is defined in *note ReflectionDemo1-getFields-Call::.
<ReflectionDemo1 getMethods Call>
     This chunk is defined in *note ReflectionDemo1-getMethods-Call::.
<Show Type>
     This chunk is defined in *note Show-Type::.
<ShowFile Close a File>
     This chunk is defined in *note ShowFile-Close-a-File::.
<ShowFile Initial Comments>
     This chunk is defined in *note ShowFile-Initial-Comments::.
<ShowFile Instance Variable Declarations>
     This chunk is defined in *note
     ShowFile-Instance-Variable-Declarations::.
<ShowFile Open a File>
     This chunk is defined in *note ShowFile-Open-a-File::.
<ShowFile Read a File>
     This chunk is defined in *note ShowFile-Read-a-File::.
<ShowFileAlt Read a File>
     This chunk is defined in *note ShowFileAlt-Read-a-File::.
<ShowFileSingleTry Additional Initial Comment>
     This chunk is defined in *note
     ShowFileSingleTry-Additional-Initial-Comment::.
<ShowFileSingleTry Read a File>
     This chunk is defined in *note ShowFileSingleTry-Read-a-File::.
<ShowFileTryWR Check CL Args>
     This chunk is defined in *note ShowFileTryWR-Check-CL-Args::.
<ShowFileTryWR Check CL Args End>
     This chunk is defined in *note ShowFileTryWR-Check-CL-Args-End::.
<ShowFileTryWR Initial Comments>
     This chunk is defined in *note ShowFileTryWR-Initial-Comments::.
<ShowFileTryWR Instance Variable Declaration>
     This chunk is defined in *note
     ShowFileTryWR-Instance-Variable-Declaration::.
<ShowFileTryWR Open a File TryWR>
     This chunk is defined in *note ShowFileTryWR-Open-a-File-TryWR::.
<Stack Constructor>
     This chunk is defined in *note Stack-Constructor::.
<Stack Instance Methods>
     This chunk is defined in *note Stack-Instance-Methods::.
<Stack Instance Variables>
     This chunk is defined in *note Stack-Instance-Variables::.
<Stack Pop>
     This chunk is defined in *note Stack-Pop::.
<Stack Private Instance Variables>
     This chunk is defined in *note
     Stack-Private-Instance-Variables::.
<Stack Push>
     This chunk is defined in *note Stack-Push::.
<Static Method isIn>
     This chunk is defined in *note Static-Method-isIn::.
<TestStack Main Method>
     This chunk is defined in *note TestStack-Main-Method::.
<Triangle Area Method Declaration >
     This chunk is defined in *note
     Triangle-Area-Method-Declaration-::.
<Triangle Constructor >
     This chunk is defined in *note Triangle-Constructor-::.
<Two Instance Variables Declarations>
     This chunk is defined in *note
     Two-Instance-Variables-Declarations::.


File: JavaSE9.info,  Node: Code Chunk References,  Prev: Code Chunk Definitions,  Up: Code Chunk Summaries

B.3 Code Chunk References
=========================

<AbstractAreas Abstract Area Method Declaration >

     This chunk is called by <AbstractAreas Abstract Class Figure >;
     see its first definition at *note
     AbstractAreas-Abstract-Class-Figure-::.
<AbstractAreas Abstract Class Figure >

     This chunk is called by {'AbstractAreas.java '}; see its first
     definition at *note AbstractAreas-java-::.
<AbstractAreas Main Class >

     This chunk is called by {'AbstractAreas.java '}; see its first
     definition at *note AbstractAreas-java-::.
<AbstractAreas Main Method Declaration >

     This chunk is called by <AbstractAreas Main Class >; see its
     first definition at *note AbstractAreas-Main-Class-::.
<BRRead BufferedReader Constructor>

     This chunk is called by {'BRRead.java'}; see its first definition
     at *note BRRead-java::.
<BRRead Enter Characters>

     This chunk is called by {'BRRead.java'}; see its first definition
     at *note BRRead-java::.
<BRReadLines BufferedReader Constructor>

     This chunk is called by {'BRReadLines.java'}; see its first
     definition at *note BRReadLines-java::.
<BRReadLines Enter Lines>

     This chunk is called by {'BRReadLines.java'}; see its first
     definition at *note BRReadLines-java::.
<BufferedInputStreamDemo Buffer>

     This chunk is called by <BufferedInputStreamDemo Instance
     Variables>; see its first definition at *note
     BufferedInputStreamDemo-Instance-Variables::.
<BufferedInputStreamDemo ByteArrayInputStream>

     This chunk is called by <BufferedInputStreamDemo Instance
     Variables>; see its first definition at *note
     BufferedInputStreamDemo-Instance-Variables::.
<BufferedInputStreamDemo Instance Variables>

     This chunk is called by {'BufferedInputStreamDemo.java'}; see its
     first definition at *note BufferedInputStreamDemo-java::.
<BufferedInputStreamDemo String>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     <BufferedInputStreamDemo  See
     Instance Variables>       *note BufferedInputStreamDemo-Instance-Variables::.
     <BufferedReaderDemo       See
     Instance Variables>       *note BufferedReaderDemo-Instance-Variables::.
<BufferedInputStreamDemo Switch on Character>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     <BufferedInputStreamDemo  See
     While Loop>               *note BufferedInputStreamDemo-While-Loop::.
     <BufferedReaderDemo       See
     TryWithResources          *note BufferedReaderDemo-TryWithResources-BufferedReader::.
     BufferedReader>
<BufferedInputStreamDemo TryWithResources BufferedInputStream>

     This chunk is called by {'BufferedInputStreamDemo.java'}; see its
     first definition at *note BufferedInputStreamDemo-java::.
<BufferedInputStreamDemo Utility Variables>

     This chunk is called by <BufferedInputStreamDemo Instance
     Variables>; see its first definition at *note
     BufferedInputStreamDemo-Instance-Variables::.
<BufferedInputStreamDemo While Loop>

     This chunk is called by <BufferedInputStreamDemo TryWithResources
     BufferedInputStream>; see its first definition at *note
     BufferedInputStreamDemo-TryWithResources-BufferedInputStream::.
<BufferedReaderDemo Buffer>

     This chunk is called by <BufferedReaderDemo Instance Variables>;
     see its first definition at *note
     BufferedReaderDemo-Instance-Variables::.
<BufferedReaderDemo Instance Variables>

     This chunk is called by {'BufferedReaderDemo.java'}; see its
     first definition at *note BufferedReaderDemo-java::.
<BufferedReaderDemo TryWithResources BufferedReader>

     This chunk is called by {'BufferedReaderDemo.java'}; see its
     first definition at *note BufferedReaderDemo-java::.
<Call Overridden Methods One By One >

     This chunk is called by <FindAreas Main Method Declaration >; see
     its first definition at *note
     FindAreas-Main-Method-Declaration-::.
<Call Overridden Methods One By One Except Figure >

     This chunk is called by <AbstractAreas Main Method Declaration >;
     see its first definition at *note
     AbstractAreas-Main-Method-Declaration-::.
<Catch Exception>

     This chunk is called by {'ReflectionDemo1.java'}; see its first
     definition at *note ReflectionDemo1-java::.
<Catch IOException>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'BufferedInputStreamDemo.java'}See *note BufferedInputStreamDemo-java::.
     {'BufferedReaderDemo.java'}See *note BufferedReaderDemo-java::.
     {'FileReaderDemo.java'}   See *note FileReaderDemo-java::.
<Class Declaration>

     This chunk is called by <Class TwoGen>; see its first definition
     at *note Class-TwoGen::.
<Class Gen>

     This chunk is called by {'SimpleGenerics.java'}; see its first
     definition at *note SimpleGenerics-java::.
<Class GenDemo>

     This chunk is called by {'SimpleGenerics.java'}; see its first
     definition at *note SimpleGenerics-java::.
<Class SimpGen>

     This chunk is called by {'TwoTypeParameters.java'}; see its first
     definition at *note TwoTypeParameters-java::.
<Class TwoGen>

     This chunk is called by {'TwoTypeParameters.java'}; see its first
     definition at *note TwoTypeParameters-java::.
<Constructor of Two Parameters>

     This chunk is called by <Class TwoGen>; see its first definition
     at *note Class-TwoGen::.
<Constructor taking parameter of Type T>

     This chunk is called by <Class Gen>; see its first definition at
     *note Class-Gen::.
<CopyFile Check For 2 Files>

     This chunk is called by {'CopyFile.java'}; see its first
     definition at *note CopyFile-java::.
<CopyFile Copy a File>

     This chunk is called by {'CopyFile.java'}; see its first
     definition at *note CopyFile-java::.
<CopyFile Initial Comments>

     This chunk is called by {'CopyFile.java'}; see its first
     definition at *note CopyFile-java::.
<CopyFile Instance Variable Declarations>

     This chunk is called by {'CopyFile.java'}; see its first
     definition at *note CopyFile-java::.
<CopyFileMultTryWR Initial Comments>

     This chunk is called by {'CopyFileMultTryWR.java'}; see its first
     definition at *note CopyFileMultTryWR-java::.
<CopyFileMultTryWR Manage Two Files>

     This chunk is called by {'CopyFileMultTryWR.java'}; see its first
     definition at *note CopyFileMultTryWR-java::.
<Create Basic Figure Objects >

     This chunk is called by <FindAreas Main Method Declaration >; see
     its first definition at *note
     FindAreas-Main-Method-Declaration-::.
<Create Basic Figure Objects Except Figure >

     This chunk is called by <AbstractAreas Main Method Declaration >;
     see its first definition at *note
     AbstractAreas-Main-Method-Declaration-::.
<Create Basic Figure Reference Variable >

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     <AbstractAreas Main       See
     Method Declaration >      *note AbstractAreas-Main-Method-Declaration-::.
     <FindAreas Main Method    See
     Declaration >             *note FindAreas-Main-Method-Declaration-::.
<Create a Gen object for Integers>

     This chunk is called by <Class GenDemo>; see its first definition
     at *note Class-GenDemo::.
<Create a Gen object for Strings>

     This chunk is called by <Class GenDemo>; see its first definition
     at *note Class-GenDemo::.
<DirList Examine Directory Contents>

     This chunk is called by {'DirList.java'}; see its first
     definition at *note DirList-java::.
<DirList Examine Directory Contents For-Loop>

     This chunk is called by <DirList Examine Directory Contents>; see
     its first definition at *note
     DirList-Examine-Directory-Contents::.
<DirList Instance Variable Declarations>

     This chunk is called by {'DirList.java'}; see its first
     definition at *note DirList-java::.
<DirList Obtain Directory From Command-Line Args>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     <DirList Instance         See
     Variable Declarations>    *note DirList-Instance-Variable-Declarations::.
     {'DirListOnly'}           See *note DirListOnly::.
<DirListOnly FilenameFilter Object>

     This chunk is called by {'DirListOnly'}; see its first definition
     at *note DirListOnly::.
<DirListOnly FilenameFilter Object List>

     This chunk is called by {'DirListOnly'}; see its first definition
     at *note DirListOnly::.
<DirListOnly Print List>

     This chunk is called by {'DirListOnly'}; see its first definition
     at *note DirListOnly::.
<Figure Area Method Declaration >

     This chunk is called by <FindAreas SuperClass Figure >; see its
     first definition at *note FindAreas-SuperClass-Figure-::.
<Figure Constructor >

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     <AbstractAreas Abstract   See
     Class Figure >            *note AbstractAreas-Abstract-Class-Figure-::.
     <FindAreas SuperClass     See *note FindAreas-SuperClass-Figure-::.
     Figure >
<Figure Instance Variable Declarations >

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     <AbstractAreas Abstract   See
     Class Figure >            *note AbstractAreas-Abstract-Class-Figure-::.
     <FindAreas SuperClass     See *note FindAreas-SuperClass-Figure-::.
     Figure >
<FileReaderDemo TryWithResources FileReader>

     This chunk is called by {'FileReaderDemo.java'}; see its first
     definition at *note FileReaderDemo-java::.
<FindAreas Main Class >

     This chunk is called by {'FindAreas.java '}; see its first
     definition at *note FindAreas-java-::.
<FindAreas Main Method Declaration >

     This chunk is called by <FindAreas Main Class >; see its first
     definition at *note FindAreas-Main-Class-::.
<FindAreas SubClass Rectangle >

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'AbstractAreas.java '}   See *note AbstractAreas-java-::.
     {'FindAreas.java '}       See *note FindAreas-java-::.
<FindAreas SubClass Triangle >

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'AbstractAreas.java '}   See *note AbstractAreas-java-::.
     {'FindAreas.java '}       See *note FindAreas-java-::.
<FindAreas SuperClass Figure >

     This chunk is called by {'FindAreas.java '}; see its first
     definition at *note FindAreas-java-::.
<GenMethDemo Main>

     This chunk is called by {'GenMethDemo.java'}; see its first
     definition at *note GenMethDemo-java::.
<Get Value>

     This chunk is called by <Create a Gen object for Integers>; see
     its first definition at *note Create-a-Gen-object-for-Integers::.
<Import java.io>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'BRRead.java'}           See *note BRRead-java::.
     {'BRReadLines.java'}      See *note BRReadLines-java::.
     {'BufferedInputStreamDemo.java'}See *note BufferedInputStreamDemo-java::.
     {'BufferedReaderDemo.java'}See *note BufferedReaderDemo-java::.
     {'CopyFile.java'}         See *note CopyFile-java::.
     {'CopyFileMultTryWR.java'}See *note CopyFileMultTryWR-java::.
     {'DirListOnly'}           See *note DirListOnly::.
     {'FileReaderDemo.java'}   See *note FileReaderDemo-java::.
     {'OnlyExt.java'}          See *note OnlyExt-java::.
     {'PrinterWriterDemo.java'}See *note PrinterWriterDemo-java::.
     {'ShowFile.java'}         See *note ShowFile-java::.
     {'ShowFileAlt.java'}      See *note ShowFileAlt-java::.
     {'ShowFileSingleTry'}     See *note ShowFileSingleTry::.
     {'ShowFileTryWR.java'}    See *note ShowFileTryWR-java::.
<Import java.io.File>

     This chunk is called by {'DirList.java'}; see its first
     definition at *note DirList-java::.
<Import java.lang.reflect>

     This chunk is called by {'ReflectionDemo1.java'}; see its first
     definition at *note ReflectionDemo1-java::.
<Instance Methods Show and Get>

     This chunk is called by <Class TwoGen>; see its first definition
     at *note Class-TwoGen::.
<Instance Variable ob of Type T>

     This chunk is called by <Class Gen>; see its first definition at
     *note Class-Gen::.
<Integer Type Parameter>

     This chunk is called by <Create a Gen object for Integers>; see
     its first definition at *note Create-a-Gen-object-for-Integers::.
<Makefile CLEAN>

     This chunk is called by <Makefile CLEAN Targets>; see its first
     definition at *note Makefile-CLEAN-Targets::.
<Makefile CLEAN Targets>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile CONSTANTS>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile DEFAULTS>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile DISTCLEAN>

     This chunk is called by <Makefile CLEAN Targets>; see its first
     definition at *note Makefile-CLEAN-Targets::.
<Makefile HTML>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile MAKEFILE Target>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile MAKEPDF>

     This chunk is called by <Makefile PDF>; see its first definition
     at *note Makefile-PDF::.
<Makefile OPENPDF>

     This chunk is called by <Makefile PDF>; see its first definition
     at *note Makefile-PDF::.
<Makefile PDF>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile TANGLE WEAVE>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile WORLDCLEAN>

     This chunk is called by <Makefile CLEAN Targets>; see its first
     definition at *note Makefile-CLEAN-Targets::.
<Method returning object of type T>

     This chunk is called by <Class Gen>; see its first definition at
     *note Class-Gen::.
<Method showing type of T>

     This chunk is called by <Class Gen>; see its first definition at
     *note Class-Gen::.
<Number 1>

     This chunk is called by {'ShowFileTryWR.java'}; see its first
     definition at *note ShowFileTryWR-java::.
<Number 2>

     This chunk is called by {'CopyFileMultTryWR.java'}; see its first
     definition at *note CopyFileMultTryWR-java::.
<OnlyExt Accept Method Implementation>

     This chunk is called by {'OnlyExt.java'}; see its first
     definition at *note OnlyExt-java::.
<OnlyExt Constructor>

     This chunk is called by {'OnlyExt.java'}; see its first
     definition at *note OnlyExt-java::.
<OnlyExt Instance Variable Declarations>

     This chunk is called by {'OnlyExt.java'}; see its first
     definition at *note OnlyExt-java::.
<PrintWriterDemo PrintWriter Constructor>

     This chunk is called by {'PrinterWriterDemo.java'}; see its first
     definition at *note PrinterWriterDemo-java::.
<PrintWriterDemo Printing To Console>

     This chunk is called by {'PrinterWriterDemo.java'}; see its first
     definition at *note PrinterWriterDemo-java::.
<Rectangle Area Method Declaration >

     This chunk is called by <FindAreas SubClass Rectangle >; see its
     first definition at *note FindAreas-SubClass-Rectangle-::.
<Rectangle Constructor >

     This chunk is called by <FindAreas SubClass Rectangle >; see its
     first definition at *note FindAreas-SubClass-Rectangle-::.
<Reference to Integer Instance>

     This chunk is called by <Create a Gen object for Integers>; see
     its first definition at *note Create-a-Gen-object-for-Integers::.
<ReflectionDemo1 Class forName Call>

     This chunk is called by {'ReflectionDemo1.java'}; see its first
     definition at *note ReflectionDemo1-java::.
<ReflectionDemo1 getConstructors Call>

     This chunk is called by {'ReflectionDemo1.java'}; see its first
     definition at *note ReflectionDemo1-java::.
<ReflectionDemo1 getFields Call>

     This chunk is called by {'ReflectionDemo1.java'}; see its first
     definition at *note ReflectionDemo1-java::.
<ReflectionDemo1 getMethods Call>

     This chunk is called by {'ReflectionDemo1.java'}; see its first
     definition at *note ReflectionDemo1-java::.
<Show Type>

     This chunk is called by <Create a Gen object for Integers>; see
     its first definition at *note Create-a-Gen-object-for-Integers::.
<ShowFile Close a File>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'ShowFile.java'}         See *note ShowFile-java::.
     {'ShowFileAlt.java'}      See *note ShowFileAlt-java::.
<ShowFile Initial Comments>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'ShowFile.java'}         See *note ShowFile-java::.
     {'ShowFileAlt.java'}      See *note ShowFileAlt-java::.
     {'ShowFileSingleTry'}     See *note ShowFileSingleTry::.
<ShowFile Instance Variable Declarations>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'ShowFile.java'}         See *note ShowFile-java::.
     {'ShowFileAlt.java'}      See *note ShowFileAlt-java::.
     {'ShowFileSingleTry'}     See *note ShowFileSingleTry::.
<ShowFile Open a File>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'ShowFile.java'}         See *note ShowFile-java::.
     {'ShowFileAlt.java'}      See *note ShowFileAlt-java::.
     {'ShowFileSingleTry'}     See *note ShowFileSingleTry::.
<ShowFile Read a File>

     This chunk is called by {'ShowFile.java'}; see its first
     definition at *note ShowFile-java::.
<ShowFileAlt Read a File>

     This chunk is called by {'ShowFileAlt.java'}; see its first
     definition at *note ShowFileAlt-java::.
<ShowFileSingleTry Additional Initial Comment>

     This chunk is called by {'ShowFileSingleTry'}; see its first
     definition at *note ShowFileSingleTry::.
<ShowFileSingleTry Read a File>

     This chunk is called by {'ShowFileSingleTry'}; see its first
     definition at *note ShowFileSingleTry::.
<ShowFileTryWR Check CL Args>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'CopyFileMultTryWR.java'}See *note CopyFileMultTryWR-java::.
     {'ShowFileTryWR.java'}    See *note ShowFileTryWR-java::.
<ShowFileTryWR Check CL Args End>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'CopyFileMultTryWR.java'}See *note CopyFileMultTryWR-java::.
     {'ShowFileTryWR.java'}    See *note ShowFileTryWR-java::.
<ShowFileTryWR Initial Comments>

     This chunk is called by {'ShowFileTryWR.java'}; see its first
     definition at *note ShowFileTryWR-java::.
<ShowFileTryWR Instance Variable Declaration>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'CopyFileMultTryWR.java'}See *note CopyFileMultTryWR-java::.
     {'ShowFileTryWR.java'}    See *note ShowFileTryWR-java::.
<ShowFileTryWR Open a File TryWR>

     This chunk is called by {'ShowFileTryWR.java'}; see its first
     definition at *note ShowFileTryWR-java::.
<Stack Constructor>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'Stack.java'}            See *note Stack-java::.
     {'StackImproved.java'}    See *note StackImproved-java::.
<Stack Instance Methods>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'Stack.java'}            See *note Stack-java::.
     {'StackImproved.java'}    See *note StackImproved-java::.
<Stack Instance Variables>

     This chunk is called by {'Stack.java'}; see its first definition
     at *note Stack-java::.
<Stack Pop>

     This chunk is called by <Stack Instance Methods>; see its first
     definition at *note Stack-Instance-Methods::.
<Stack Private Instance Variables>

     This chunk is called by {'StackImproved.java'}; see its first
     definition at *note StackImproved-java::.
<Stack Push>

     This chunk is called by <Stack Instance Methods>; see its first
     definition at *note Stack-Instance-Methods::.
<Static Method isIn>

     This chunk is called by {'GenMethDemo.java'}; see its first
     definition at *note GenMethDemo-java::.
<TestStack Main Method>

     This chunk is called by {'TestStack.java'}; see its first
     definition at *note TestStack-java::.
<Triangle Area Method Declaration >

     This chunk is called by <FindAreas SubClass Triangle >; see its
     first definition at *note FindAreas-SubClass-Triangle-::.
<Triangle Constructor >

     This chunk is called by <FindAreas SubClass Triangle >; see its
     first definition at *note FindAreas-SubClass-Triangle-::.
<Two Instance Variables Declarations>

     This chunk is called by <Class TwoGen>; see its first definition
     at *note Class-TwoGen::.


File: JavaSE9.info,  Node: List of Tables,  Next: List of General Forms,  Prev: Code Chunk Summaries,  Up: Top

List of Tables
**************

* Menu:

* Table 5.1: PackageAccess.              Package Access Table
* Table 7.1: ByteStreamClasses.          The Byte Stream Classes ...
* Table 7.2: CharacterStreamClasses.     The Character Stream I/O ...
* Table 13.1: CollectionsInterfaces.     Summary of 'Collection' ...
* Table 13.2: CollectionsCoreMethods.    The Methods Declared by ...
* Table 13.3: CollectionCoreClasses.     Collection Core Classes
* Table 13.4: IteratorMethods.           The Methods Provided by ...
* Table 13.5: ListIteratorMethods.       The Methods Declared by ...
* Table 15.1: 'File'-Methods.            'File' Property Methods
* Table 15.2: 'File'-Utility-Methods.    File Utility Methods
* Table 15.3: InputStreamMethods.        The Methods Defined by ...
* Table 15.4: OutputStreamMethods.       The Methods Defined by ...
* Table 15.5: ReaderMethods.             The Methods Defined by ...
* Table 15.6: WriterMethods.             The Methods Defined by ...
* Table 25.1: java-lang-reflect-Classes. Classes Defined in ...
* Table 25.2: java-lang-reflect_Interfaces.
                                         Interfaces Defined in ...
* Table 25.3: ClassMethodsLocating.      Class Methods Locating


File: JavaSE9.info,  Node: List of General Forms,  Next: Bibliography,  Prev: List of Tables,  Up: Top

List of General Forms
*********************

* Menu:

* GeneralForm 2.1: ClassDeclaration.     Class Declaration -- ...
* GeneralForm 2.2: MethodDeclaration.    Method Declaration -- ...
* GeneralForm 4.1: Subclass.             Subclass General Form
* GeneralForm 4.2: SuperCallingConstructor.
                                         'super' Calling a ...
* GeneralForm 4.3: SuperReferencingSuperclass.
                                         'super' Referencing its ...
* GeneralForm 4.4: AbstractMethodDeclaration.
                                         Abstract Method ...
* GeneralForm 5.1: PackageStatement.     Package Statement -- ...
* GeneralForm 5.2: PackageStatementMulti.Package Statement -- ...
* GeneralForm 5.3: Import.               Import Statement -- ...
* GeneralForm 6.1: InterfaceSimple.      Interface Definition -- ...
* GeneralForm 6.2: ClassImplementsInterface.
                                         Class Implementing ...
* GeneralForm 6.3: InterfaceStaticMethod.Interface Static Method, ...
* GeneralForm 7.1: AutomaticResourceManagement.
                                         General Form Automatic ...
* GeneralForm 9.1: GenericClass.         General Form Generic Class
* GeneralForm 9.2: UpperBoundedWildcard. Upper Bounded Wildcard
* GeneralForm 9.3: LowerBoundedWildcard. Lower Bounded Wildcard
* GeneralForm 9.4: GenericMethod.        Generic Method Declaration
* GeneralForm 15.1: Directory-List.      Obtaining a list of files ...
* GeneralForm 15.2: Directory-List-With-Filter.
                                         Obtaining a filtered list ...
* GeneralForm 15.3: FilenameFilter.Accept.
                                         'accept()' Form to be ...
* GeneralForm 15.4: listFiles.           'File.listFiles()' Form
* GeneralForm 15.5: FileFilter-accept(). FileFilter.accept() Method
* GeneralForm 15.6: CloseStreamWithClose.Traditional Stream Close
* GeneralForm 15.7: TryWithResourcesClose.
                                         'try-with-resources' ...


File: JavaSE9.info,  Node: Bibliography,  Next: Concept Index,  Prev: List of General Forms,  Up: Top

Bibliography
************


File: JavaSE9.info,  Node: Concept Index,  Next: Function Index,  Prev: Bibliography,  Up: Top

Index
*****

 [index ]
* Menu:

* .class syntax:                         .class Syntax.     (line   6)
* <AbstractAreas Abstract Area Method Declaration >, definition: AbstractAreas Abstract Class Figure Node.
                                                            (line  34)
* <AbstractAreas Abstract Area Method Declaration >, use: AbstractAreas Abstract Class Figure Node.
                                                            (line  10)
* <AbstractAreas Abstract Class Figure >, definition: AbstractAreas Abstract Class Figure Node.
                                                            (line  10)
* <AbstractAreas Abstract Class Figure >, use: Improved Figure Class.
                                                            (line  12)
* <AbstractAreas Main Class >, definition: AbstractAreas Main Class.
                                                            (line   6)
* <AbstractAreas Main Class >, use:      Improved Figure Class.
                                                            (line  12)
* <AbstractAreas Main Method Declaration >, definition: AbstractAreas Main Class.
                                                            (line  21)
* <AbstractAreas Main Method Declaration >, use: AbstractAreas Main Class.
                                                            (line   6)
* <BRRead BufferedReader Constructor>, definition: BRRead BufferedReader Constructor Node.
                                                            (line   6)
* <BRRead BufferedReader Constructor>, use: Reading Characters.
                                                            (line  24)
* <BRRead Enter Characters>, definition: BRRead Enter Characters Node.
                                                            (line   6)
* <BRRead Enter Characters>, use:        Reading Characters.
                                                            (line  24)
* <BRReadLines BufferedReader Constructor>, definition: BRReadLines BufferedReader Constructor.
                                                            (line   6)
* <BRReadLines BufferedReader Constructor>, use: Reading Strings.
                                                            (line  20)
* <BRReadLines Enter Lines>, definition: BRReadLines Enter Lines.
                                                            (line   6)
* <BRReadLines Enter Lines>, use:        Reading Strings.   (line  20)
* <BufferedInputStreamDemo Buffer>, definition: BufferedInputStreamDemo Buffer.
                                                            (line   6)
* <BufferedInputStreamDemo Buffer>, use: BufferedInputStreamDemo Instance Variables.
                                                            (line   6)
* <BufferedInputStreamDemo ByteArrayInputStream>, definition: BufferedInputStreamDemo ByteArrayInputStream.
                                                            (line   6)
* <BufferedInputStreamDemo ByteArrayInputStream>, use: BufferedInputStreamDemo Instance Variables.
                                                            (line   6)
* <BufferedInputStreamDemo Instance Variables>, definition: BufferedInputStreamDemo Instance Variables.
                                                            (line   6)
* <BufferedInputStreamDemo Instance Variables>, use: Buffered Input Example.
                                                            (line  16)
* <BufferedInputStreamDemo String>, definition: BufferedInputStreamDemo String Into Buffer.
                                                            (line   6)
* <BufferedInputStreamDemo String>, use: BufferedInputStreamDemo Instance Variables.
                                                            (line   6)
* <BufferedInputStreamDemo String>, use <1>: BufferedReaderDemo Instance Variables.
                                                            (line  10)
* <BufferedInputStreamDemo Switch on Character>, definition: BufferedInputStreamDemo Switch on Character.
                                                            (line   6)
* <BufferedInputStreamDemo Switch on Character>, use: BufferedInputStreamDemo While Loop.
                                                            (line   6)
* <BufferedInputStreamDemo Switch on Character>, use <1>: BufferedReaderDemo TryWithResources BufferedReader.
                                                            (line  10)
* <BufferedInputStreamDemo TryWithResources BufferedInputStream>, definition: BufferedInputStreamDemo TryWithResources BufferedInputStream.
                                                            (line   6)
* <BufferedInputStreamDemo TryWithResources BufferedInputStream>, use: Buffered Input Example.
                                                            (line  16)
* <BufferedInputStreamDemo Utility Variables>, definition: BufferedInputStreamDemo Utility Variables.
                                                            (line   6)
* <BufferedInputStreamDemo Utility Variables>, use: BufferedInputStreamDemo Instance Variables.
                                                            (line   6)
* <BufferedInputStreamDemo While Loop>, definition: BufferedInputStreamDemo While Loop.
                                                            (line   6)
* <BufferedInputStreamDemo While Loop>, use: BufferedInputStreamDemo TryWithResources BufferedInputStream.
                                                            (line   6)
* <BufferedReaderDemo Buffer>, definition: BufferedReaderDemo Buffer.
                                                            (line  14)
* <BufferedReaderDemo Buffer>, use:      BufferedReaderDemo Instance Variables.
                                                            (line  10)
* <BufferedReaderDemo Instance Variables>, definition: BufferedReaderDemo Instance Variables.
                                                            (line  10)
* <BufferedReaderDemo Instance Variables>, use: Buffered Reader Demo.
                                                            (line  17)
* <BufferedReaderDemo TryWithResources BufferedReader>, definition: BufferedReaderDemo TryWithResources BufferedReader.
                                                            (line  10)
* <BufferedReaderDemo TryWithResources BufferedReader>, use: Buffered Reader Demo.
                                                            (line  17)
* <Call Overridden Methods One By One >, definition: FindAreas Main Class Node.
                                                            (line  78)
* <Call Overridden Methods One By One >, use: FindAreas Main Class Node.
                                                            (line  21)
* <Call Overridden Methods One By One Except Figure >, definition: AbstractAreas Main Class.
                                                            (line  70)
* <Call Overridden Methods One By One Except Figure >, use: AbstractAreas Main Class.
                                                            (line  21)
* <Catch Exception>, definition:         Catch Exception.   (line   6)
* <Catch Exception>, use:                Reflection Demonstration.
                                                            (line  22)
* <Catch IOException>, definition:       Catch IOException. (line   6)
* <Catch IOException>, use:              Buffered Input Example.
                                                            (line  16)
* <Catch IOException>, use <1>:          FileReader.        (line  23)
* <Catch IOException>, use <2>:          Buffered Reader Demo.
                                                            (line  17)
* <Class Declaration>, definition:       Class TwoGen.      (line  34)
* <Class Declaration>, use:              Class TwoGen.      (line   6)
* <Class Gen>, definition:               Class Gen<T>.      (line  33)
* <Class Gen>, use:                      Simple Generics Example.
                                                            (line   9)
* <Class GenDemo>, definition:           Class GenDemo.     (line  22)
* <Class GenDemo>, use:                  Simple Generics Example.
                                                            (line   9)
* <Class SimpGen>, definition:           Class SimpGen.     (line   9)
* <Class SimpGen>, use:                  Two Types Example Code.
                                                            (line   6)
* <Class TwoGen>, definition:            Class TwoGen.      (line   6)
* <Class TwoGen>, use:                   Two Types Example Code.
                                                            (line   6)
* <Constructor of Two Parameters>, definition: Class TwoGen.
                                                            (line  54)
* <Constructor of Two Parameters>, use:  Class TwoGen.      (line   6)
* <Constructor taking parameter of Type T>, definition: Class Gen<T>.
                                                            (line  79)
* <Constructor taking parameter of Type T>, use: Class Gen<T>.
                                                            (line  33)
* <CopyFile Check For 2 Files>, definition: CopyFile Check for 2 Files.
                                                            (line   6)
* <CopyFile Check For 2 Files>, use:     Demonstration Writing to a File.
                                                            (line  14)
* <CopyFile Copy a File>, definition:    CopyFile Copy a File.
                                                            (line  10)
* <CopyFile Copy a File>, use:           Demonstration Writing to a File.
                                                            (line  14)
* <CopyFile Initial Comments>, definition: CopyFile Initial Comments.
                                                            (line   6)
* <CopyFile Initial Comments>, use:      Demonstration Writing to a File.
                                                            (line  14)
* <CopyFile Instance Variable Declarations>, definition: CopyFile Instance Variable Declarations.
                                                            (line   6)
* <CopyFile Instance Variable Declarations>, use: Demonstration Writing to a File.
                                                            (line  14)
* <CopyFileMultTryWR Initial Comments>, definition: CopyFileMultTryWR Initial Comments.
                                                            (line   6)
* <CopyFileMultTryWR Initial Comments>, use: Demonstration of Multiple Resources.
                                                            (line  11)
* <CopyFileMultTryWR Manage Two Files>, definition: CopyFileMultTryWR Manage Two Files.
                                                            (line  13)
* <CopyFileMultTryWR Manage Two Files>, use: Demonstration of Multiple Resources.
                                                            (line  11)
* <Create a Gen object for Integers>, definition: GenDemo as Integer.
                                                            (line   6)
* <Create a Gen object for Integers>, use: Class GenDemo.   (line  22)
* <Create a Gen object for Strings>, definition: GenDemo as String.
                                                            (line   6)
* <Create a Gen object for Strings>, use: Class GenDemo.    (line  22)
* <Create Basic Figure Objects >, definition: FindAreas Main Class Node.
                                                            (line  45)
* <Create Basic Figure Objects >, use:   FindAreas Main Class Node.
                                                            (line  21)
* <Create Basic Figure Objects Except Figure >, definition: AbstractAreas Main Class.
                                                            (line  53)
* <Create Basic Figure Objects Except Figure >, use: AbstractAreas Main Class.
                                                            (line  21)
* <Create Basic Figure Reference Variable >, definition: FindAreas Main Class Node.
                                                            (line  62)
* <Create Basic Figure Reference Variable >, use: FindAreas Main Class Node.
                                                            (line  21)
* <Create Basic Figure Reference Variable >, use <1>: AbstractAreas Main Class.
                                                            (line  21)
* <DirList Examine Directory Contents For-Loop>, definition: Examine Directory Contents For-Loop.
                                                            (line   6)
* <DirList Examine Directory Contents For-Loop>, use: DirList Examine Directory Contents.
                                                            (line   6)
* <DirList Examine Directory Contents>, definition: DirList Examine Directory Contents.
                                                            (line   6)
* <DirList Examine Directory Contents>, use: Examine Directory Contents.
                                                            (line   9)
* <DirList Instance Variable Declarations>, definition: DirList Instance Variable Declarations.
                                                            (line   6)
* <DirList Instance Variable Declarations>, use: Examine Directory Contents.
                                                            (line   9)
* <DirList Obtain Directory From Command-Line Args>, definition: DirList Obtain Directory From Command-Line Args.
                                                            (line   6)
* <DirList Obtain Directory From Command-Line Args>, use: DirList Instance Variable Declarations.
                                                            (line   6)
* <DirList Obtain Directory From Command-Line Args>, use <1>: Example Using FilenameFilter Interface.
                                                            (line  39)
* <DirListOnly FilenameFilter Object List>, definition: DirListOnly FilenameFilter Object List.
                                                            (line   9)
* <DirListOnly FilenameFilter Object List>, use: Example Using FilenameFilter Interface.
                                                            (line  39)
* <DirListOnly FilenameFilter Object>, definition: DirListOnly FilenameFilter Object.
                                                            (line   6)
* <DirListOnly FilenameFilter Object>, use: Example Using FilenameFilter Interface.
                                                            (line  39)
* <DirListOnly Print List>, definition:  DirListOnly Print List.
                                                            (line   6)
* <DirListOnly Print List>, use:         Example Using FilenameFilter Interface.
                                                            (line  39)
* <Figure Area Method Declaration >, definition: FindAreas SuperClass Figure Node.
                                                            (line  71)
* <Figure Area Method Declaration >, use: FindAreas SuperClass Figure Node.
                                                            (line   6)
* <Figure Constructor >, definition:     FindAreas SuperClass Figure Node.
                                                            (line  46)
* <Figure Constructor >, use:            FindAreas SuperClass Figure Node.
                                                            (line   6)
* <Figure Constructor >, use <1>:        AbstractAreas Abstract Class Figure Node.
                                                            (line  10)
* <Figure Instance Variable Declarations >, definition: FindAreas SuperClass Figure Node.
                                                            (line  29)
* <Figure Instance Variable Declarations >, use: FindAreas SuperClass Figure Node.
                                                            (line   6)
* <Figure Instance Variable Declarations >, use <1>: AbstractAreas Abstract Class Figure Node.
                                                            (line  10)
* <FileReaderDemo TryWithResources FileReader>, definition: FileReaderDemo TryWithResources FileReader.
                                                            (line   6)
* <FileReaderDemo TryWithResources FileReader>, use: FileReader.
                                                            (line  23)
* <FindAreas Main Class >, definition:   FindAreas Main Class Node.
                                                            (line   6)
* <FindAreas Main Class >, use:          Applying Method Overriding.
                                                            (line  15)
* <FindAreas Main Method Declaration >, definition: FindAreas Main Class Node.
                                                            (line  21)
* <FindAreas Main Method Declaration >, use: FindAreas Main Class Node.
                                                            (line   6)
* <FindAreas SubClass Rectangle >, definition: FindAreas SubClass Rectangle Node.
                                                            (line   6)
* <FindAreas SubClass Rectangle >, use:  Applying Method Overriding.
                                                            (line  15)
* <FindAreas SubClass Rectangle >, use <1>: Improved Figure Class.
                                                            (line  12)
* <FindAreas SubClass Triangle >, definition: FindAreas SubClass Triangle Node.
                                                            (line   6)
* <FindAreas SubClass Triangle >, use:   Applying Method Overriding.
                                                            (line  15)
* <FindAreas SubClass Triangle >, use <1>: Improved Figure Class.
                                                            (line  12)
* <FindAreas SuperClass Figure >, definition: FindAreas SuperClass Figure Node.
                                                            (line   6)
* <FindAreas SuperClass Figure >, use:   Applying Method Overriding.
                                                            (line  15)
* <GenMethDemo Main>, definition:        GenMethDemo Main.  (line   6)
* <GenMethDemo Main>, use:               Example of Generic Method.
                                                            (line  13)
* <Get Value>, definition:               GenDemo as Integer.
                                                            (line  91)
* <Get Value>, use:                      GenDemo as Integer.
                                                            (line   6)
* <Import java.io.File>, definition:     Import java.io.File.
                                                            (line   6)
* <Import java.io.File>, use:            Examine Directory Contents.
                                                            (line   9)
* <Import java.io>, definition:          Import java.io.    (line   6)
* <Import java.io>, use:                 Reading Characters.
                                                            (line  24)
* <Import java.io>, use <1>:             Reading Strings.   (line  20)
* <Import java.io>, use <2>:             Demonstration Using PrintWriter.
                                                            (line   6)
* <Import java.io>, use <3>:             Demonstration Reading From a File.
                                                            (line  10)
* <Import java.io>, use <4>:             close() Within finally.
                                                            (line  19)
* <Import java.io>, use <5>:             Demonstration Reading From File with Single try.
                                                            (line  12)
* <Import java.io>, use <6>:             Demonstration Writing to a File.
                                                            (line  14)
* <Import java.io>, use <7>:             Demonstration of Automatically Closing a File.
                                                            (line   9)
* <Import java.io>, use <8>:             Demonstration of Multiple Resources.
                                                            (line  11)
* <Import java.io>, use <9>:             Example Using FilenameFilter Interface.
                                                            (line  14)
* <Import java.io>, use <10>:            Example Using FilenameFilter Interface.
                                                            (line  39)
* <Import java.io>, use <11>:            Buffered Input Example.
                                                            (line  16)
* <Import java.io>, use <12>:            FileReader.        (line  23)
* <Import java.io>, use <13>:            Buffered Reader Demo.
                                                            (line  17)
* <Import java.lang.reflect>, definition: Import java.lang.reflect.
                                                            (line   6)
* <Import java.lang.reflect>, use:       Reflection Demonstration.
                                                            (line  22)
* <Instance Methods Show and Get>, definition: Class TwoGen.
                                                            (line  67)
* <Instance Methods Show and Get>, use:  Class TwoGen.      (line   6)
* <Instance Variable ob of Type T>, definition: Class Gen<T>.
                                                            (line  63)
* <Instance Variable ob of Type T>, use: Class Gen<T>.      (line  33)
* <Integer Type Parameter>, definition:  GenDemo as Integer.
                                                            (line  36)
* <Integer Type Parameter>, use:         GenDemo as Integer.
                                                            (line   6)
* <Makefile CLEAN Targets>, definition:  Makefile Clean Targets.
                                                            (line   6)
* <Makefile CLEAN Targets>, use:         The Makefile.      (line   6)
* <Makefile CLEAN>, definition:          Makefile Clean.    (line   6)
* <Makefile CLEAN>, use:                 Makefile Clean Targets.
                                                            (line   6)
* <Makefile CONSTANTS>, definition:      Makefile Constants.
                                                            (line   8)
* <Makefile CONSTANTS>, use:             The Makefile.      (line   6)
* <Makefile DEFAULTS>, definition:       Makefile Defaults. (line   6)
* <Makefile DEFAULTS>, use:              The Makefile.      (line   6)
* <Makefile DISTCLEAN>, definition:      Makefile DistClean.
                                                            (line   6)
* <Makefile DISTCLEAN>, use:             Makefile Clean Targets.
                                                            (line   6)
* <Makefile HTML>, definition:           Makefile HTML.     (line   6)
* <Makefile HTML>, use:                  The Makefile.      (line   6)
* <Makefile MAKEFILE Target>, definition: Make the Makefile.
                                                            (line   6)
* <Makefile MAKEFILE Target>, use:       The Makefile.      (line   6)
* <Makefile MAKEPDF>, definition:        Makefile MAKEPDF.  (line   6)
* <Makefile MAKEPDF>, use:               Makefile PDF.      (line   6)
* <Makefile OPENPDF>, definition:        Makefile OPENPDF.  (line   6)
* <Makefile OPENPDF>, use:               Makefile PDF.      (line   6)
* <Makefile PDF>, definition:            Makefile PDF.      (line   6)
* <Makefile PDF>, use:                   The Makefile.      (line   6)
* <Makefile TANGLE WEAVE>, definition:   Makefile Tangle Weave.
                                                            (line   6)
* <Makefile TANGLE WEAVE>, use:          The Makefile.      (line   6)
* <Makefile WORLDCLEAN>, definition:     Makefile WorldClean.
                                                            (line   6)
* <Makefile WORLDCLEAN>, use:            Makefile Clean Targets.
                                                            (line   6)
* <Method returning object of type T>, definition: Class Gen<T>.
                                                            (line  97)
* <Method returning object of type T>, use: Class Gen<T>.   (line  33)
* <Method showing type of T>, definition: Class Gen<T>.     (line 115)
* <Method showing type of T>, use:       Class Gen<T>.      (line  33)
* <Number 1>, definition:                ShowFileTryWR Check CL Args.
                                                            (line  31)
* <Number 1>, use:                       Demonstration of Automatically Closing a File.
                                                            (line   9)
* <Number 2>, definition:                Demonstration of Multiple Resources.
                                                            (line  39)
* <Number 2>, use:                       Demonstration of Multiple Resources.
                                                            (line  11)
* <OnlyExt Accept Method Implementation>, definition: OnlyExt Accept Method Implementation.
                                                            (line   6)
* <OnlyExt Accept Method Implementation>, use: Example Using FilenameFilter Interface.
                                                            (line  14)
* <OnlyExt Constructor>, definition:     OnlyExt Constructor.
                                                            (line   6)
* <OnlyExt Constructor>, use:            Example Using FilenameFilter Interface.
                                                            (line  14)
* <OnlyExt Instance Variable Declarations>, definition: OnlyExt Instance Variable Declarations.
                                                            (line   6)
* <OnlyExt Instance Variable Declarations>, use: Example Using FilenameFilter Interface.
                                                            (line  14)
* <PrintWriterDemo Printing To Console>, definition: PrintWriterDemo Printing To Console.
                                                            (line   6)
* <PrintWriterDemo Printing To Console>, use: Demonstration Using PrintWriter.
                                                            (line   6)
* <PrintWriterDemo PrintWriter Constructor>, definition: PrintWriterDemo PrintWriter Constructor.
                                                            (line   6)
* <PrintWriterDemo PrintWriter Constructor>, use: Demonstration Using PrintWriter.
                                                            (line   6)
* <Rectangle Area Method Declaration >, definition: FindAreas SubClass Rectangle Node.
                                                            (line  43)
* <Rectangle Area Method Declaration >, use: FindAreas SubClass Rectangle Node.
                                                            (line   6)
* <Rectangle Constructor >, definition:  FindAreas SubClass Rectangle Node.
                                                            (line  31)
* <Rectangle Constructor >, use:         FindAreas SubClass Rectangle Node.
                                                            (line   6)
* <Reference to Integer Instance>, definition: GenDemo as Integer.
                                                            (line  58)
* <Reference to Integer Instance>, use:  GenDemo as Integer.
                                                            (line   6)
* <ReflectionDemo1 Class forName Call>, definition: ReflectionDemo1 Class forName Call.
                                                            (line   6)
* <ReflectionDemo1 Class forName Call>, use: Reflection Demonstration.
                                                            (line  22)
* <ReflectionDemo1 getConstructors Call>, definition: ReflectionDemo1 getConstructors Call.
                                                            (line   6)
* <ReflectionDemo1 getConstructors Call>, use: Reflection Demonstration.
                                                            (line  22)
* <ReflectionDemo1 getFields Call>, definition: ReflectionDem1 getFields Call.
                                                            (line   6)
* <ReflectionDemo1 getFields Call>, use: Reflection Demonstration.
                                                            (line  22)
* <ReflectionDemo1 getMethods Call>, definition: ReflectionDemo1 getMethods Call.
                                                            (line   6)
* <ReflectionDemo1 getMethods Call>, use: Reflection Demonstration.
                                                            (line  22)
* <Show Type>, definition:               GenDemo as Integer.
                                                            (line  76)
* <Show Type>, use:                      GenDemo as Integer.
                                                            (line   6)
* <ShowFile Close a File>, definition:   ShowFile Close a File.
                                                            (line   6)
* <ShowFile Close a File>, use:          Demonstration Reading From a File.
                                                            (line  10)
* <ShowFile Close a File>, use <1>:      close() Within finally.
                                                            (line  19)
* <ShowFile Initial Comments>, definition: ShowFile Initial Comments.
                                                            (line   6)
* <ShowFile Initial Comments>, use:      Demonstration Reading From a File.
                                                            (line  10)
* <ShowFile Initial Comments>, use <1>:  close() Within finally.
                                                            (line  19)
* <ShowFile Initial Comments>, use <2>:  Demonstration Reading From File with Single try.
                                                            (line  12)
* <ShowFile Instance Variable Declarations>, definition: ShowFile Instance Variable Declarations.
                                                            (line   6)
* <ShowFile Instance Variable Declarations>, use: Demonstration Reading From a File.
                                                            (line  10)
* <ShowFile Instance Variable Declarations>, use <1>: close() Within finally.
                                                            (line  19)
* <ShowFile Instance Variable Declarations>, use <2>: Demonstration Reading From File with Single try.
                                                            (line  12)
* <ShowFile Open a File>, definition:    ShowFile Open a File.
                                                            (line  10)
* <ShowFile Open a File>, use:           Demonstration Reading From a File.
                                                            (line  10)
* <ShowFile Open a File>, use <1>:       close() Within finally.
                                                            (line  19)
* <ShowFile Open a File>, use <2>:       Demonstration Reading From File with Single try.
                                                            (line  12)
* <ShowFile Read a File>, definition:    ShowFile Read a File.
                                                            (line   6)
* <ShowFile Read a File>, use:           Demonstration Reading From a File.
                                                            (line  10)
* <ShowFileAlt Read a File>, definition: close() Within finally.
                                                            (line  48)
* <ShowFileAlt Read a File>, use:        close() Within finally.
                                                            (line  19)
* <ShowFileSingleTry Additional Initial Comment>, definition: ShowFileSingleTry Additional Initial Comment.
                                                            (line   6)
* <ShowFileSingleTry Additional Initial Comment>, use: Demonstration Reading From File with Single try.
                                                            (line  12)
* <ShowFileSingleTry Read a File>, definition: ShowFileSingleTry Read a File.
                                                            (line  12)
* <ShowFileSingleTry Read a File>, use:  Demonstration Reading From File with Single try.
                                                            (line  12)
* <ShowFileTryWR Check CL Args End>, definition: ShowFileTryWR Check CL Args.
                                                            (line  17)
* <ShowFileTryWR Check CL Args End>, use: Demonstration of Automatically Closing a File.
                                                            (line   9)
* <ShowFileTryWR Check CL Args End>, use <1>: Demonstration of Multiple Resources.
                                                            (line  11)
* <ShowFileTryWR Check CL Args>, definition: ShowFileTryWR Check CL Args.
                                                            (line   6)
* <ShowFileTryWR Check CL Args>, use:    Demonstration of Automatically Closing a File.
                                                            (line   9)
* <ShowFileTryWR Check CL Args>, use <1>: Demonstration of Multiple Resources.
                                                            (line  11)
* <ShowFileTryWR Initial Comments>, definition: ShowFileTryWR Initial Comments.
                                                            (line   6)
* <ShowFileTryWR Initial Comments>, use: Demonstration of Automatically Closing a File.
                                                            (line   9)
* <ShowFileTryWR Instance Variable Declaration>, definition: ShowFileTryWR Instance Variable Declarations.
                                                            (line   6)
* <ShowFileTryWR Instance Variable Declaration>, use: Demonstration of Automatically Closing a File.
                                                            (line   9)
* <ShowFileTryWR Instance Variable Declaration>, use <1>: Demonstration of Multiple Resources.
                                                            (line  11)
* <ShowFileTryWR Open a File TryWR>, definition: ShowFileTryWR Open a File TryWR.
                                                            (line  18)
* <ShowFileTryWR Open a File TryWR>, use: Demonstration of Automatically Closing a File.
                                                            (line   9)
* <Stack Constructor>, definition:       Stack Constructor Node.
                                                            (line   6)
* <Stack Constructor>, use:              Stack Class.       (line  22)
* <Stack Constructor>, use <1>:          Improved Stack Class.
                                                            (line  11)
* <Stack Instance Methods>, definition:  Stack Instance Methods Node.
                                                            (line   6)
* <Stack Instance Methods>, use:         Stack Class.       (line  22)
* <Stack Instance Methods>, use <1>:     Improved Stack Class.
                                                            (line  11)
* <Stack Instance Variables>, definition: Stack Instance Variables.
                                                            (line   6)
* <Stack Instance Variables>, use:       Stack Class.       (line  22)
* <Stack Pop>, definition:               Stack Push and Pop Node.
                                                            (line  19)
* <Stack Pop>, use:                      Stack Instance Methods Node.
                                                            (line   6)
* <Stack Private Instance Variables>, definition: Improved Stack Class.
                                                            (line  31)
* <Stack Private Instance Variables>, use: Improved Stack Class.
                                                            (line  11)
* <Stack Push>, definition:              Stack Push and Pop Node.
                                                            (line   6)
* <Stack Push>, use:                     Stack Instance Methods Node.
                                                            (line   6)
* <Static Method isIn>, definition:      Method isIn.       (line   9)
* <Static Method isIn>, use:             Example of Generic Method.
                                                            (line  13)
* <TestStack Main Method>, definition:   Stack TestStack Node.
                                                            (line   6)
* <TestStack Main Method>, use:          Stack Class.       (line  42)
* <Triangle Area Method Declaration >, definition: FindAreas SubClass Triangle Node.
                                                            (line  42)
* <Triangle Area Method Declaration >, use: FindAreas SubClass Triangle Node.
                                                            (line   6)
* <Triangle Constructor >, definition:   FindAreas SubClass Triangle Node.
                                                            (line  30)
* <Triangle Constructor >, use:          FindAreas SubClass Triangle Node.
                                                            (line   6)
* <Two Instance Variables Declarations>, definition: Class TwoGen.
                                                            (line  43)
* <Two Instance Variables Declarations>, use: Class TwoGen. (line   6)
* ==:                                    Enumeration Basics.
                                                            (line  38)
* {AbstractAreas.java }, definition:     Improved Figure Class.
                                                            (line  12)
* {BRRead.java}, definition:             Reading Characters.
                                                            (line  24)
* {BRReadLines.java}, definition:        Reading Strings.   (line  20)
* {BufferedInputStreamDemo.java}, definition: Buffered Input Example.
                                                            (line  16)
* {BufferedReaderDemo.java}, definition: Buffered Reader Demo.
                                                            (line  17)
* {CopyFile.java}, definition:           Demonstration Writing to a File.
                                                            (line  14)
* {CopyFileMultTryWR.java}, definition:  Demonstration of Multiple Resources.
                                                            (line  11)
* {DirList.java}, definition:            Examine Directory Contents.
                                                            (line   9)
* {DirListOnly}, definition:             Example Using FilenameFilter Interface.
                                                            (line  39)
* {FileReaderDemo.java}, definition:     FileReader.        (line  23)
* {FindAreas.java }, definition:         Applying Method Overriding.
                                                            (line  15)
* {GenMethDemo.java}, definition:        Example of Generic Method.
                                                            (line  13)
* {Makefile}, definition:                The Makefile.      (line   6)
* {OnlyExt.java}, definition:            Example Using FilenameFilter Interface.
                                                            (line  14)
* {PrinterWriterDemo.java}, definition:  Demonstration Using PrintWriter.
                                                            (line   6)
* {ReflectionDemo1.java}, definition:    Reflection Demonstration.
                                                            (line  22)
* {ShowFile.java}, definition:           Demonstration Reading From a File.
                                                            (line  10)
* {ShowFileAlt.java}, definition:        close() Within finally.
                                                            (line  19)
* {ShowFileSingleTry}, definition:       Demonstration Reading From File with Single try.
                                                            (line  12)
* {ShowFileTryWR.java}, definition:      Demonstration of Automatically Closing a File.
                                                            (line   9)
* {SimpleGenerics.java}, definition:     Simple Generics Example.
                                                            (line   9)
* {Stack.java}, definition:              Stack Class.       (line  22)
* {StackImproved.java}, definition:      Improved Stack Class.
                                                            (line  11)
* {TestStack.java}, definition:          Stack Class.       (line  42)
* {TwoTypeParameters.java}, definition:  Two Types Example Code.
                                                            (line   6)
* abstract class:                        Interfaces.        (line   6)
* abstract class, inheritance:           Using Abstract Classes.
                                                            (line   6)
* abstract method:                       Using Abstract Classes.
                                                            (line   6)
* abstract methods, interface:           Defining Interfaces.
                                                            (line  22)
* abstract methods, interface <1>:       Default Interface Methods.
                                                            (line   6)
* abstract over types:                   Generics.          (line   6)
* abstract type modifier:                Using Abstract Classes.
                                                            (line   6)
* accept():                              FilenameFilter.    (line   6)
* access control table:                  Member Access.     (line  27)
* access control, packages:              Member Access.     (line   6)
* access control, single class:          Access Control.    (line   6)
* access modifiers:                      Access Control.    (line   6)
* access, member:                        Member Access.     (line   6)
* accessibility:                         Packages Intro.    (line   6)
* add():                                 Collection Interface.
                                                            (line  54)
* addAll():                              Collection Interface.
                                                            (line  54)
* Algorithms, Collections Framework:     Collections Overview.
                                                            (line  46)
* anonymous inner classes:               Nested and Inner Classes.
                                                            (line   6)
* API, Stream:                           Streams API.       (line   5)
* argument passing:                      Argument Passing.  (line   6)
* arguments, command-line:               Command-Line Arguments.
                                                            (line   6)
* arguments, varargs:                    Varargs.           (line   6)
* ARM:                                   Automatically Closing Files.
                                                            (line   6)
* Arrays:                                Arrays 2.          (line   6)
* arrays as objects:                     Arrays 2.          (line   6)
* Arrays Class:                          Arrays Class.      (line   5)
* arrays, creating new:                  Creating New Arrays.
                                                            (line   6)
* arrays, getting and setting:           Getting and Setting Arrays.
                                                            (line   6)
* Arrays, reflection:                    Arays and Enumerated Types and Reflection.
                                                            (line   6)
* Arrays, reflection <1>:                Arrays and Reflection.
                                                            (line   6)
* assert:                                Miscellaneous Java Keywords.
                                                            (line   6)
* auto-boxing, generics:                 Reference Types.   (line   6)
* auto-unboxing, generics:               Reference Types.   (line   6)
* autoboxing in generic reference:       GenDemo as Integer.
                                                            (line  46)
* AutoClosable interface:                FileInputStream and FileOutputStream.
                                                            (line  42)
* AutoCloseable:                         AutoCloseable Closeable Flushable Interfaces.
                                                            (line   6)
* automatic resource management:         Automatically Closing Files.
                                                            (line   6)
* AWT:                                   AWT.               (line   6)
* AWT Controls:                          AWT Controls.      (line   6)
* AWT Layout Managers, Menus:            AWT Controls.      (line   5)
* binary data, reading and writing:      Byte Streams Character Streams.
                                                            (line   6)
* binding, late, early:                  final to Prevent Overriding.
                                                            (line   6)
* bounded types:                         Bounded Types.     (line   6)
* bounded wildcards:                     Bounded Wildcards. (line   6)
* bounded wildcards, lower bound:        Bounded Wildcards. (line  32)
* bounded wildcards, upper bound:        Bounded Wildcards. (line  18)
* bounded wildcards, upper bound <1>:    Bounded Wildcards. (line  20)
* BRRead BufferedReader Constructor:     BRRead BufferedReader Constructor Node.
                                                            (line   6)
* BRRead Enter Characters:               BRRead Enter Characters Node.
                                                            (line   6)
* BRRead.java:                           Reading Characters.
                                                            (line  19)
* BRReadLines BufferedReader Constructor: BRReadLines BufferedReader Constructor.
                                                            (line   6)
* BRReadLines Enter Lines:               BRReadLines Enter Lines.
                                                            (line   6)
* BRReadLines.java:                      Reading Strings.   (line  16)
* Buffered Byte Streams:                 Buffered Byte Streams.
                                                            (line   6)
* buffered stream:                       Buffered Byte Streams.
                                                            (line   6)
* BufferedInputStream:                   Buffered Byte Streams.
                                                            (line   6)
* BufferedInputStream <1>:               BufferedInputStream.
                                                            (line   6)
* BufferedInputStream constructors:      BufferedInputStream.
                                                            (line   6)
* BufferedOutputStream:                  Buffered Byte Streams.
                                                            (line   6)
* BufferedOutputStream <1>:              BufferedOutputStream.
                                                            (line   5)
* BufferedReader:                        Reading Console Input.
                                                            (line  13)
* BufferedReader <1>:                    BufferedReader.    (line   6)
* BufferedReader constructors:           BufferedReader.    (line   6)
* BufferedReader.lines() method:         BufferedReader.    (line   6)
* BufferedWriter:                        BufferedWriter.    (line   6)
* BufferedWriter constructors:           BufferedWriter.    (line   6)
* Byte Stream Class:                     Byte Stream Class. (line   6)
* Byte Streams:                          Byte Streams.      (line   6)
* Byte Streams, buffered:                Buffered Byte Streams.
                                                            (line   6)
* Byte Streams, definition:              Byte Streams Character Streams.
                                                            (line   6)
* Byte Streams, filtered:                Filtered Byte Streams.
                                                            (line   6)
* byte-oriented I/O:                     Byte Streams.      (line   6)
* ByteArrayInputStream:                  ByteArrayInputStream.
                                                            (line   5)
* ByteArrayOutputStream:                 ByteArrayOutputStream.
                                                            (line   5)
* casts, eliminated in generics:         Type Safety.       (line   6)
* casts, generics, automatic, implicit:  What are Generics. (line   6)
* catch exception:                       I/O Exceptions.    (line   6)
* Character Stream Class:                Character Stream Class.
                                                            (line   6)
* Character Streams:                     Character Streams. (line   6)
* Character Streams, definition:         Byte Streams Character Streams.
                                                            (line   6)
* character streams, Unicode:            Character Stream Class.
                                                            (line   6)
* character-based stream:                Reading Console Input.
                                                            (line   6)
* character-based stream class, PrintWriter: PrintWriter Class.
                                                            (line   6)
* characters, reading:                   Reading Characters.
                                                            (line   6)
* CharArrayReader:                       CharArrayReader.   (line   5)
* CharArrayWriter:                       CharArrayWriter.   (line   5)
* charAT():                              String Class.      (line  33)
* Class:                                 Class Gen<T>.      (line 107)
* Class <1>:                             Reflection.        (line   6)
* Class <2>:                             java.lang.Class.   (line   6)
* Class <3>:                             Retrieving Class Objects.
                                                            (line   6)
* Class fundamentals:                    Class Fundamentals.
                                                            (line   6)
* class instance, creating new:          Creating New Class Instances.
                                                            (line   6)
* class members, discovering:            Discovering Class Members.
                                                            (line   6)
* class modifiers, examining:            Examining Class Modifiers.
                                                            (line   6)
* class name, from getName():            Class Gen<T>.      (line 107)
* class namespace, compartmentalize:     Packages.          (line   6)
* Class object, from getClass():         Class Gen<T>.      (line 107)
* class String:                          String Class.      (line   6)
* class types, examing:                  Examining Class Modifiers.
                                                            (line   6)
* class, general form:                   General Form.      (line   6)
* class, new data type:                  Class Fundamentals.
                                                            (line   6)
* Class.forName():                       Class.forName() and Class.getName() Methods.
                                                            (line   6)
* Class.getClasses():                    Methods that Return Classes.
                                                            (line  20)
* Class.getEnumConstants():              Enumerate Types and Reflection.
                                                            (line   6)
* Class.getEnumConstants() <1>:          Enumerated Types Reflection.
                                                            (line   6)
* Class.getName():                       Class.forName() and Class.getName() Methods.
                                                            (line   6)
* Class.isEnum():                        Enumerate Types and Reflection.
                                                            (line   6)
* Class.isEnum() <1>:                    Enumerated Types Reflection.
                                                            (line   6)
* Class.newInstance():                   Creating New Class Instances.
                                                            (line   6)
* classed in java.lang:                  Exploring java-lang.
                                                            (line  14)
* Classes:                               Classes.           (line   6)
* Classes and Reflection:                Classes and Reflection.
                                                            (line   6)
* classes, nested and inner:             Nested and Inner Classes.
                                                            (line   6)
* CLASSPATH -classpath:                  Classpath.         (line   6)
* clear():                               Collection Interface.
                                                            (line  54)
* close():                               FileInputStream and FileOutputStream.
                                                            (line  29)
* close() <1>:                           Closing a Stream.  (line   6)
* close() Within finally:                close() Within finally.
                                                            (line   6)
* Closeable:                             AutoCloseable Closeable Flushable Interfaces.
                                                            (line   6)
* closing a stream:                      Closing a Stream.  (line   6)
* Collection Algorithms:                 Collection Algorithms.
                                                            (line   5)
* Collection Classes:                    Collection Classes.
                                                            (line   6)
* Collection interface:                  Collection Interface.
                                                            (line   6)
* Collection Interfaces:                 Collection Interfaces.
                                                            (line   6)
* collection-view of a map:              Collections Overview.
                                                            (line  79)
* Collections Framekwork goals:          Collections Overview.
                                                            (line  20)
* Collections Framework:                 Generics.          (line   6)
* Collections Framework <1>:             java util Collections.
                                                            (line  20)
* Collections overview:                  Collections Overview.
                                                            (line   6)
* collections, generics:                 Generics.          (line   6)
* collisions, prevention:                Packages.          (line   6)
* command-line arguments:                Command-Line Arguments.
                                                            (line   6)
* Comparators:                           Comparators.       (line   5)
* compartmentalized:                     Packages.          (line   6)
* compile time:                          Interfaces.        (line  19)
* compile-time type check:               Motivation.        (line  31)
* Concurrency Utilities:                 Concurrency.       (line   5)
* Console Class:                         Console Class.     (line   5)
* console I/O:                           I/O Basics.        (line   6)
* console input, reading:                Reading Console Input.
                                                            (line   6)
* constant, final variable:              final Keyword.     (line   6)
* Constants:                             Makefile Constants.
                                                            (line   6)
* constructor:                           Declaring Objects. (line   6)
* constructor modifiers, retrieving and parsing: Constructor Modifiers.
                                                            (line   6)
* Constructor, reflection:               reflect Constructors.
                                                            (line   6)
* Constructors:                          Constructors.      (line   6)
* constructors for FileInputStream:      FileInputStream.   (line   6)
* constructors, finding:                 Finding Constructors.
                                                            (line   6)
* constructors, overloading:             Overloading Constructors.
                                                            (line   6)
* Consumer:                              Iterable Interface.
                                                            (line  32)
* containers, packages as:               Packages.          (line   6)
* contains():                            Collection Interface.
                                                            (line  69)
* containsAll():                         Collection Interface.
                                                            (line  69)
* Creating Directories:                  Creating Directories.
                                                            (line   6)
* creating generic method:               Generic Methods.   (line   6)
* data type, enumeration:                Enumerations.      (line   6)
* DataInputStream:                       DataOutputStream DataInputStream.
                                                            (line   5)
* DataOutputStream:                      DataOutputStream DataInputStream.
                                                            (line   6)
* default access level:                  Access Control.    (line  28)
* default method, interface, motivation: Default Interface Methods.
                                                            (line  15)
* default methods, interface:            Default Interface Methods.
                                                            (line   6)
* default package:                       Defining Packages. (line   6)
* demonstration using PrintWriter:       Demonstration Using PrintWriter.
                                                            (line   6)
* Dequeue Interface:                     Dequeue Interface. (line   5)
* Dictionary:                            Collections Overview.
                                                            (line   6)
* difference between class and interface: Default Interface Methods.
                                                            (line  32)
* directed graph:                        Serialization.     (line   6)
* directories:                           File.              (line  17)
* Directories:                           Directories.       (line   6)
* directories, creating:                 Creating Directories.
                                                            (line   6)
* directory contents, examine using list(): Examine Directory Contents.
                                                            (line   6)
* dispatch through an interface:         Interface References.
                                                            (line   6)
* dot operator:                          General Form.      (line  48)
* dynamic allocation, run time:          Declaring Objects. (line   6)
* dynamic dispatch, interface method look-ups: Interface References.
                                                            (line   6)
* dynamic method dispatch:               Dynamic Method Dispatch.
                                                            (line   6)
* dynamic method resolution:             Interfaces.        (line  19)
* early binding:                         final to Prevent Overriding.
                                                            (line   6)
* encapsulation, access control:         Access Control.    (line   6)
* enum valueOf():                        Enum Methods.      (line   6)
* enum values():                         Enum Methods.      (line   6)
* enum variable, declare:                Enumeration Basics.
                                                            (line  25)
* Enumerate types, reflection:           Arays and Enumerated Types and Reflection.
                                                            (line   6)
* enumerate types, reflection:           Enumerated Types Reflection.
                                                            (line   6)
* Enumerated types, refelction:          Enumerate Types and Reflection.
                                                            (line   6)
* enumeration capabilities:              Enumerations.      (line   6)
* enumeration comparison:                Enumeration Basics.
                                                            (line  38)
* enumeration constants:                 Enumeration Basics.
                                                            (line  15)
* enumeration constants <1>:             Enumerations as Class Types.
                                                            (line   6)
* enumeration constructor:               Enumerations as Class Types.
                                                            (line   6)
* enumeration instance variables:        Enumerations as Class Types.
                                                            (line   6)
* enumeration methods:                   Enum Methods.      (line   6)
* enumeration methods <1>:               Enumerations as Class Types.
                                                            (line   6)
* enumeration object:                    Enumerations.      (line   6)
* enumeration restrictions:              Enumerations as Class Types.
                                                            (line  41)
* enumeration variable:                  Enumeration Basics.
                                                            (line  25)
* Enumeration, basics:                   Enumeration Basics.
                                                            (line   6)
* Enumerations:                          Enumerations.      (line   6)
* enumerations as class types:           Enumerations as Class Types.
                                                            (line   6)
* enumerations inherit Enum:             Inherit Enum.      (line   6)
* enums, printing:                       Enumeration Basics.
                                                            (line  51)
* equality, enum types:                  Enumeration Basics.
                                                            (line  38)
* equals():                              String Class.      (line  33)
* equals() <1>:                          Object Class.      (line  49)
* equals() <2>:                          Collection Interface.
                                                            (line  94)
* erasure:                               Class GenDemo.     (line   6)
* err:                                   Predefined Streams.
                                                            (line   6)
* Event Handling:                        Event Handling.    (line   5)
* example generic method:                Example of Generic Method.
                                                            (line   6)
* example, generics:                     Simple Generics Example.
                                                            (line   6)
* exceptions for I/O errors:             Demonstration Writing to a File.
                                                            (line   6)
* Exceptions, I/O:                       I/O Exceptions.    (line   6)
* exposure of code:                      Packages Intro.    (line   6)
* extending interfaces:                  Extending Interfaces.
                                                            (line   6)
* extends clause:                        Bounded Types.     (line   6)
* extends keyword:                       Inheritance Basics.
                                                            (line   6)
* extents, with interfaces:              Extending Interfaces.
                                                            (line   6)
* Externalizable:                        Externalizable.    (line   6)
* Field.get(Object):                     Getting and Setting Arrays.
                                                            (line   6)
* Fields, reflection:                    reflect Fields.    (line   6)
* File class:                            File.              (line   6)
* File constructors:                     File.              (line  26)
* File methods:                          File Methods.      (line   6)
* file properties:                       File.              (line   6)
* File utility methods:                  File Utility Methods.
                                                            (line   6)
* file, close:                           FileInputStream and FileOutputStream.
                                                            (line  29)
* file, open:                            FileInputStream and FileOutputStream.
                                                            (line  16)
* file, read from:                       FileInputStream and FileOutputStream.
                                                            (line  63)
* file, write to:                        FileInputStream and FileOutputStream.
                                                            (line  75)
* FileFilter.accept() method:            listFiles() Alternative.
                                                            (line  33)
* FileInputStream:                       FileInputStream and FileOutputStream.
                                                            (line   6)
* FileInputStream <1>:                   FileInputStream.   (line   6)
* FilenameFilter:                        FilenameFilter.    (line   6)
* FilenameFilter interface:              FilenameFilter.    (line   6)
* FileNotFoundException:                 I/O Exceptions.    (line   6)
* FileNotFoundException <1>:             FileInputStream.   (line   6)
* FileOutputStream:                      FileInputStream and FileOutputStream.
                                                            (line   6)
* FileOutputStream <1>:                  FileOutputStream.  (line   5)
* FileReader:                            FileReader.        (line   6)
* FileReader constructors:               FileReader.        (line   6)
* files:                                 File.              (line  17)
* Files, Reading and Writing:            Reading and Writing Files.
                                                            (line   6)
* FileWriter:                            FileWriter.        (line   6)
* FileWriter constructors:               FileWriter.        (line   6)
* filter directory contents:             FilenameFilter.    (line   6)
* filtered byte streams:                 Filtered Byte Streams.
                                                            (line   6)
* FilterInputStream:                     Filtered Byte Streams.
                                                            (line   6)
* FilterOutputStream:                    Filtered Byte Streams.
                                                            (line   6)
* final Keyword:                         final Keyword.     (line   6)
* final to prevent inheritance:          final to Prevent Inheritance.
                                                            (line   6)
* final to prevent overriding:           final to Prevent Overriding.
                                                            (line   6)
* final with inheritance:                final with Inheritance.
                                                            (line   6)
* final, traditional enums:              Enumerations.      (line   6)
* finally used to close a stream:        Closing a Stream.  (line   6)
* finding packages:                      Classpath.         (line   6)
* Flushable:                             AutoCloseable Closeable Flushable Interfaces.
                                                            (line   5)
* flushing:                              PrinterWriter Constructors.
                                                            (line   6)
* flushingOn:                            PrinterWriter Constructors.
                                                            (line   6)
* for loop, for-each version:            Iterable Interface.
                                                            (line   6)
* for-each version of for loop:          Iterable Interface.
                                                            (line   6)
* fully qualified name:                  Importing.         (line  39)
* fully-qualified name and reflection:   Class.forName() and Class.getName() Methods.
                                                            (line   6)
* generic class:                         Simple Generics Example.
                                                            (line   6)
* generic class <1>:                     Class Gen<T>.      (line   6)
* generic class, general form:           Generic Class General Form.
                                                            (line   6)
* generic class, method:                 What are Generics. (line   6)
* generic class, two type parameters:    Two Type Parameters.
                                                            (line   6)
* generic code, demonstrating an implementation: Class GenDemo.
                                                            (line   6)
* generic constructors:                  Generic Constructors.
                                                            (line   6)
* generic interface:                     Motivation.        (line  31)
* generic method, creating:              Generic Methods.   (line   6)
* generic method, example:               Example of Generic Method.
                                                            (line   6)
* generic method, static:                Method isIn.       (line  28)
* generic methods, including type arguments: Method isIn.   (line  34)
* generic reference assignment to Integer: GenDemo as Integer.
                                                            (line  46)
* generic reference to Integer:          GenDemo as Integer.
                                                            (line  28)
* generic reference, creating:           GenDemo as Integer.
                                                            (line   6)
* generic type argument, reference type: Reference Types.   (line   6)
* generic type checking:                 GenDemo as Integer.
                                                            (line  46)
* generic types differ, type arguments:  Type Arguments.    (line   6)
* Generics (chapter):                    Generics.          (line   6)
* generics eliminate casts:              Type Safety.       (line   6)
* generics ensure type safety:           Type Safety.       (line   6)
* generics example:                      Simple Generics Example.
                                                            (line   6)
* generics improve type safety:          Type Safety.       (line   6)
* generics, bounded types:               Bounded Types.     (line   6)
* generics, casts:                       What are Generics. (line   6)
* generics, compile-time error, mismatched types: GenDemo as Integer.
                                                            (line  46)
* generics, generic constructors:        Generic Constructors.
                                                            (line   6)
* generics, interface as bound:          Bounded Types.     (line  22)
* generics, introduction:                Generics.          (line   6)
* generics, motivation:                  Motivation.        (line   6)
* generics, motivation, readability and robustness: Motivation.
                                                            (line  31)
* generics, only reference types:        Reference Types.   (line   6)
* generics, subtyping:                   Subtyping.         (line   6)
* generics, two type arguments:          Class TwoGen.      (line  29)
* generics, two type parameters, declaration: Class TwoGen. (line  29)
* generics, type safety benefit:         GenDemo as Integer.
                                                            (line  46)
* generics, what they are:               What are Generics. (line   6)
* generics, wildcard arguments:          Wildcard Arguments.
                                                            (line   6)
* getClass(), defined in Object:         Class Gen<T>.      (line 107)
* getDeclaredClasses():                  Methods that Return Classes.
                                                            (line  28)
* getDeclaringClass():                   Methods that Return Classes.
                                                            (line  36)
* getEnclosingClass():                   Methods that Return Classes.
                                                            (line  63)
* getName(), defined in Class:           Class Gen<T>.      (line 107)
* getSuperClass():                       Methods that Return Classes.
                                                            (line  13)
* global members:                        static Keyword.    (line  55)
* Graphics:                              AWT.               (line   6)
* hiding, instance variables:            Instance Variable Hiding.
                                                            (line   6)
* hierarchical classifications:          Inheritance.       (line   6)
* hierarchical structure, packages:      Packages.          (line   6)
* hierarchy of packages:                 Defining Packages. (line  41)
* hierarchy, constructors executed:      Constructors Executed.
                                                            (line   6)
* hierarchy, files:                      Multilevel Hierarchy.
                                                            (line   6)
* hierarchy, multilevel, creating:       Multilevel Hierarchy.
                                                            (line   6)
* I/O:                                   I/O.               (line   6)
* I/O abstract classes:                  Stream Classes.    (line   6)
* I/O Basics:                            I/O Basics.        (line   6)
* I/O Classes and Interfaces:            I/O Classes and Interfaces.
                                                            (line   6)
* I/O Classes, java.io:                  I/O Classes.       (line   6)
* I/O Exceptions:                        I/O Exceptions.    (line   6)
* I/O Interfaces, java.io:               I/O Interfaces.    (line   6)
* I/O, byte-oriented:                    Byte Streams.      (line   6)
* Images:                                Images.            (line   5)
* implements clause:                     Implementing Interfaces.
                                                            (line   6)
* import is optional:                    Importing.         (line  39)
* import java.io:                        Import java.io.    (line   6)
* import java.io.File:                   Import java.io.File.
                                                            (line   6)
* import packages:                       Packages.          (line   6)
* import statement, general form and example: Importing.    (line  14)
* imported packages must be public:      Importing.         (line  43)
* importing packages:                    Importing.         (line   6)
* in:                                    Predefined Streams.
                                                            (line   6)
* index interface, default methods:      Default Interface Methods.
                                                            (line   6)
* Inheritance:                           Inheritance.       (line   6)
* inheritance basics:                    Inheritance Basics.
                                                            (line   6)
* inheritance, member access:            Member Access and Inheritance.
                                                            (line   6)
* inheriting interfaces:                 Extending Interfaces.
                                                            (line   6)
* inline, inlining:                      final to Prevent Overriding.
                                                            (line   6)
* inner classes:                         Nested and Inner Classes.
                                                            (line   6)
* inner classes, anonymous:              Nested and Inner Classes.
                                                            (line   6)
* inner classes, event handling:         Nested and Inner Classes.
                                                            (line   6)
* input stream:                          Streams.           (line   6)
* input/output system:                   I/O.               (line   6)
* InputStream:                           Reading Console Input.
                                                            (line  13)
* InputStream <1>:                       InputStream.       (line   6)
* InputStream abstract class:            Stream Classes.    (line   6)
* InputStream methods:                   InputStream Methods.
                                                            (line   6)
* InputStreamReader concrete subclass:   Reading Console Input.
                                                            (line  13)
* instance variables:                    General Form.      (line  32)
* instance, class:                       Class Fundamentals.
                                                            (line   6)
* instanceof:                            Miscellaneous Java Keywords.
                                                            (line   6)
* intefaces, applying:                   Applying Interfaces.
                                                            (line   6)
* interface as bound, generics:          Bounded Types.     (line  22)
* interface default access, no modified: Defining Interfaces.
                                                            (line  22)
* interface definition, simplified general form: Defining Interfaces.
                                                            (line   7)
* interface method defintion, declared public: Implementing Interfaces.
                                                            (line  18)
* interface methods, abstract methods:   Defining Interfaces.
                                                            (line  22)
* interface methods, private:            Private Interface Methods.
                                                            (line   6)
* interface public access:               Defining Interfaces.
                                                            (line  22)
* interface references, accessing implementations: Interface References.
                                                            (line   6)
* interface variable declarations:       Defining Interfaces.
                                                            (line  35)
* interface, implement:                  Interfaces.        (line   6)
* interface, partial implementation:     Partial Implementations.
                                                            (line   6)
* interface, static method:              Interface Static Methods.
                                                            (line   6)
* interface, traditional form:           Default Interface Methods.
                                                            (line   6)
* Interfaces (chapter):                  Interfaces.        (line   6)
* interfaces in java.lang:               Exploring java-lang.
                                                            (line  62)
* interfaces, defining:                  Defining Interfaces.
                                                            (line   6)
* interfaces, extending:                 Extending Interfaces.
                                                            (line   6)
* interfaces, final variables in:        Variables in Interfaces.
                                                            (line   6)
* interfaces, implementing:              Implementing Interfaces.
                                                            (line   6)
* interfaces, inheriting:                Extending Interfaces.
                                                            (line   6)
* interfaces, introduction:              Interfaces.        (line   6)
* interfaces, key aspect, no state:      Default Interface Methods.
                                                            (line  32)
* interfaces, key feature, reference look-ups: Interface References.
                                                            (line   6)
* interfaces, nested:                    Nested Interfaces. (line   6)
* interfaces, shared constants:          Variables in Interfaces.
                                                            (line   6)
* internationalization of output to console: PrintWriter Class.
                                                            (line   6)
* internationalization, character streams: Byte Streams Character Streams.
                                                            (line   6)
* internationalization, character streams <1>: Reading Console Input.
                                                            (line   6)
* introduction to Java SE 9:             Java SE 9 Introduction.
                                                            (line   5)
* Introduction to Packages (section):    Packages Intro.    (line   6)
* IOException:                           I/O Exceptions.    (line   6)
* isEmpty():                             Collection Interface.
                                                            (line  69)
* Iterable Interface:                    Iterable Interface.
                                                            (line   6)
* iteration, iterative:                  Recursion.         (line   6)
* iterator:                              Collections Overview.
                                                            (line  56)
* Iterator interface:                    Collections Overview.
                                                            (line  56)
* Iterator iterator:                     Iterable Interface.
                                                            (line   6)
* iterator():                            Collection Interface.
                                                            (line 101)
* Iterator, accessing a Collection:      Accessing a Collection via Iterator.
                                                            (line   6)
* iterators, primitive types:            Collections Overview.
                                                            (line  69)
* J2SE 1.2:                              Collections Overview.
                                                            (line   6)
* J2SE 5.0:                              Generics.          (line   6)
* Java I/O system:                       Streams.           (line   6)
* Java SE 9 introduction:                Java SE 9 Introduction.
                                                            (line   6)
* java.base module:                      Reflection.        (line   6)
* java.io:                               I/O.               (line   6)
* java.io <1>:                           Character Stream Class.
                                                            (line   6)
* java.io <2>:                           Input/Output java.io.
                                                            (line   6)
* java.io package:                       Streams.           (line   6)
* java.lang:                             Importing.         (line  29)
* java.lang <1>:                         Exploring java-lang.
                                                            (line   6)
* java.lang.Class:                       Classes and Reflection.
                                                            (line   6)
* java.lang.Class <1>:                   java.lang.Class.   (line   6)
* java.lang.Class <2>:                   Retrieving Class Objects.
                                                            (line   6)
* java.lang.reflect package:             Reflection.        (line   6)
* java.lang.reflect Package:             java.lang.reflect Package.
                                                            (line   6)
* java.lang.reflect.Array:               Arrays and Reflection.
                                                            (line   6)
* java.lang.reflect.Array <1>:           Getting and Setting Arrays.
                                                            (line   6)
* java.lang.reflect.Constructor:         reflect Constructors.
                                                            (line   6)
* java.lang.reflect.Constructor <1>:     Finding Constructors.
                                                            (line   6)
* java.lang.reflect.Constructor.newInstance(): Creating New Class Instances.
                                                            (line   6)
* java.lang.reflect.Field class:         reflect Fields.    (line   6)
* java.lang.reflect.Field.isEnumConstant(): Enumerate Types and Reflection.
                                                            (line   6)
* java.lang.reflect.Field.isEnumConstant() <1>: Enumerated Types Reflection.
                                                            (line   6)
* java.lang.reflect.Field.set():         Getting and Setting Arrays.
                                                            (line   6)
* java.lang.reflect.Member interface:    Members and Reflection.
                                                            (line   6)
* java.lang.reflect.Method class:        reflect Methods.   (line   6)
* java.nio:                              Input/Output java.io.
                                                            (line   6)
* java.util Collections Framework:       java util Collections.
                                                            (line   6)
* java.util Utility Classes:             java util Utility Classes.
                                                            (line   5)
* java.util.function:                    Iterable Interface.
                                                            (line  32)
* JDK 5:                                 Enumerations.      (line   6)
* JDK 7, try-with-resource:              Closing a Stream.  (line  32)
* JDK 8:                                 Iterable Interface.
                                                            (line  32)
* JDK 8 <1>:                             Collections Overview.
                                                            (line  69)
* JDK 8, default method in interface:    Default Interface Methods.
                                                            (line   6)
* JDK 8, static interface method:        Interface Static Methods.
                                                            (line   6)
* JDK 9:                                 java util Collections.
                                                            (line  20)
* JDK 9 <1>:                             Reflection.        (line   6)
* JDK 9, package part of module:         Classpath.         (line   6)
* JDK 9, private interface method:       Private Interface Methods.
                                                            (line   6)
* JDK 9, try-with-resources:             Closing a Stream.  (line  54)
* keyword extends:                       Inheritance Basics.
                                                            (line   6)
* keyword final:                         final Keyword.     (line   6)
* keyword interface:                     Interfaces.        (line   6)
* keyword static:                        static Keyword.    (line   6)
* keyword, enum:                         Enumeration Basics.
                                                            (line   6)
* late binding:                          final to Prevent Overriding.
                                                            (line   6)
* legacy classes and interfaces, Collections: Legacy Classes and Interfaces.
                                                            (line   5)
* length instance variable:              Arrays 2.          (line   6)
* length():                              String Class.      (line  33)
* lines() method:                        BufferedReader.    (line   6)
* List interface:                        List Interface.    (line   5)
* list():                                Directories.       (line   6)
* list() method for directories:         File.              (line  17)
* listFiles() Alternative:               listFiles() Alternative.
                                                            (line   6)
* lower bounded wildcard:                Bounded Wildcards. (line  32)
* main() method, class:                  General Form.      (line  45)
* Make the Makefile:                     Make the Makefile. (line   6)
* Makefiel Weave:                        Makefile Tangle Weave.
                                                            (line   6)
* Makefile Clean:                        Makefile Clean.    (line   6)
* Makefile Clean targets:                Makefile Clean Targets.
                                                            (line   6)
* Makefile defaults:                     Makefile Defaults. (line   6)
* Makefile DistClean:                    Makefile DistClean.
                                                            (line   6)
* Makefile HTML:                         Makefile HTML.     (line   6)
* Makefile MAKEPDF:                      Makefile MAKEPDF.  (line   6)
* Makefile OPENPDF:                      Makefile OPENPDF.  (line   6)
* Makefile PDF:                          Makefile PDF.      (line   6)
* Makefile Tangle:                       Makefile Tangle Weave.
                                                            (line   6)
* Makefile WorldClean:                   Makefile WorldClean.
                                                            (line   6)
* Makefile, The (appendix):              The Makefile.      (line   6)
* maps:                                  Collections Overview.
                                                            (line  79)
* Maps, working with:                    Working with Maps. (line   5)
* member access:                         Member Access.     (line   6)
* member access, inheritance:            Member Access and Inheritance.
                                                            (line   6)
* member hiding:                         super Referencing Superclass.
                                                            (line   6)
* Member interface:                      java.lang.reflect Package.
                                                            (line   6)
* member interfaces:                     Nested Interfaces. (line   6)
* members:                               General Form.      (line  32)
* Members and Reflection:                Members and Reflection.
                                                            (line   6)
* method overriding:                     Method Overriding. (line   6)
* method signatures compatible:          Interfaces.        (line  19)
* method, static, interface:             Interface Static Methods.
                                                            (line   6)
* method, varargs:                       Varargs.           (line   6)
* methods:                               General Form.      (line  32)
* Methods:                               Methods.           (line   6)
* Methods and Classes:                   Methods and Classes.
                                                            (line   6)
* methods, enumeration:                  Enum Methods.      (line   6)
* methods, overloading:                  Overloading Methods.
                                                            (line   6)
* Methods, reflection:                   reflect Methods.   (line   6)
* modifiable collections:                Collection Interfaces.
                                                            (line  47)
* module path:                           Classpath.         (line   6)
* modules, packages:                     Classpath.         (line   6)
* multilevel hierarchy:                  Multilevel Hierarchy.
                                                            (line   6)
* name, method:                          Methods.           (line  15)
* naming mechanism:                      Packages Intro.    (line   6)
* native:                                Miscellaneous Java Keywords.
                                                            (line   6)
* NavigableSet interface:                NavigableSet Interface.
                                                            (line   5)
* nested classes:                        Nested and Inner Classes.
                                                            (line   6)
* nested interfaces:                     Nested Interfaces. (line   6)
* Networking:                            Networking.        (line   5)
* new operator:                          Declaring Objects. (line   6)
* NIO:                                   Input/Output java.io.
                                                            (line   6)
* NIO <1>:                               NIO.               (line   5)
* Object:                                Class Gen<T>.      (line 107)
* Object class:                          Object Class.      (line   6)
* object references, interfaces:         Interface References.
                                                            (line   6)
* Object type:                           What are Generics. (line   6)
* object, class:                         Class Fundamentals.
                                                            (line   6)
* object, instantiate using reflection API: Creating New Class Instances.
                                                            (line   6)
* Object.getClass():                     Object.getClass.   (line   6)
* ObjectInput:                           ObjectInput.       (line   5)
* ObjectInputStream:                     ObjectInputStream. (line   5)
* ObjectOutput:                          ObjectOutput.      (line   5)
* ObjectOutputStream:                    ObjectOutputStream.
                                                            (line   5)
* objects as parameters:                 Objects as Parameters.
                                                            (line   6)
* objects, declaring:                    Declaring Objects. (line   6)
* objects, dynamical allocation:         Returning Objects. (line   6)
* objects, references to:                Returning Objects. (line   6)
* objects, returning from methods:       Returning Objects. (line   6)
* one interface, many methods polymorphism: Why Overridden Methods.
                                                            (line   6)
* _one interface, multiple methods_:     Overloading Methods.
                                                            (line   6)
* out:                                   Predefined Streams.
                                                            (line   6)
* output stream:                         Streams.           (line   6)
* OutputStream:                          OutputStream.      (line   6)
* OutputStream abstract class:           Stream Classes.    (line   6)
* OutputStream as byte stream abstract class: Writing Console Output.
                                                            (line   6)
* OutputStream Methods:                  OutputStream Methods.
                                                            (line   6)
* overload versus override:              Method Overriding. (line   6)
* overload, overloaded:                  Overloading Methods.
                                                            (line   6)
* overloading constructors:              Overloading Constructors.
                                                            (line   6)
* overloading methods:                   Overloading Methods.
                                                            (line   6)
* overloading, automatic type conversion: Overloading Methods.
                                                            (line   6)
* overriding, method:                    Method Overriding. (line   6)
* package command:                       Defining Packages. (line   6)
* package namespace:                     Defining Packages. (line   6)
* package renaming:                      Defining Packages. (line  56)
* package statement:                     Defining Packages. (line   6)
* package statement, example:            Defining Packages. (line  20)
* package statement, general form:       Defining Packages. (line  16)
* package statement, multilevel form:    Defining Packages. (line  43)
* package, java.io:                      Streams.           (line   6)
* Packages (chapter):                    Packages.          (line   6)
* packages hierarchy:                    Defining Packages. (line  41)
* packages stored in file system:        Defining Packages. (line  27)
* packages, access control:              Member Access.     (line   6)
* Packages, Defining (section):          Defining Packages. (line   6)
* packages, finding, example:            Classpath.         (line  26)
* packages, how stored:                  Packages.          (line   6)
* packages, import:                      Packages.          (line   6)
* packages, importing:                   Importing.         (line   6)
* packages, purposes, prevent collisions: Packages.         (line   6)
* parallelStream():                      Collection Interface.
                                                            (line 101)
* parameter list, method:                Methods.           (line  15)
* parameter, generic class:              Class Gen<T>.      (line   6)
* parameterized type:                    Class Gen<T>.      (line   6)
* parameterized types:                   What are Generics. (line   6)
* parameters, as objects:                Objects as Parameters.
                                                            (line   6)
* partitioning mechanism:                Packages Intro.    (line   6)
* performance enhancement, inlining:     final to Prevent Overriding.
                                                            (line   6)
* polymorphism, dynamic run-time:        Why Overridden Methods.
                                                            (line   6)
* polymorphism, one interface multiple methods: Interfaces. (line   6)
* polymorphism, overloading of methods:  Overloading Methods.
                                                            (line   6)
* polymorphism, run-time:                Dynamic Method Dispatch.
                                                            (line   6)
* Predefined Streams:                    Predefined Streams.
                                                            (line   6)
* preexisting code, default method, interface: Default Interface Methods.
                                                            (line  15)
* primitive type iterators:              Collections Overview.
                                                            (line  69)
* Primitive Wrappers:                    Primitive Wrappers.
                                                            (line   6)
* PrimitiveIterator:                     Collections Overview.
                                                            (line  69)
* PrimitiveIterator.OfDouble:            Collections Overview.
                                                            (line  69)
* print() and println(), PrintWriter class: PrinterWriter Constructors.
                                                            (line   6)
* print(), from PrintStream:             Writing Console Output.
                                                            (line   6)
* println(), from PrintStream:           Writing Console Output.
                                                            (line   6)
* PrintStream:                           PrintStream.       (line   5)
* PrintStream as byte stream:            Writing Console Output.
                                                            (line   6)
* PrintWriter:                           PrintWriter.       (line   5)
* PrintWriter Class, character-based stream: PrintWriter Class.
                                                            (line   6)
* PrintWriter constructor:               PrinterWriter Constructors.
                                                            (line   6)
* private access modifier:               Access Control.    (line  28)
* private and inheritance:               Member Access and Inheritance.
                                                            (line   6)
* Properties:                            Collections Overview.
                                                            (line   6)
* protected access modifier:             Access Control.    (line  28)
* public access modifier:                Access Control.    (line  28)
* PushbackInputStream:                   Buffered Byte Streams.
                                                            (line   6)
* PushbackInputStream <1>:               PushbackInputStream.
                                                            (line   5)
* PushbackReader:                        PushbackReader.    (line   5)
* Queue interface:                       Queue Interface.   (line   5)
* RandomAccess Interface:                RandomAccess Interface.
                                                            (line   5)
* RandomAccessFile:                      RandomAccessFile.  (line   5)
* read():                                FileInputStream and FileOutputStream.
                                                            (line  63)
* read(), from BufferedReader:           Reading Characters.
                                                            (line   6)
* read(), InputStream abstract class:    Byte Stream Class. (line  58)
* read(), Reader:                        Character Stream Class.
                                                            (line  55)
* Reader:                                Reader.            (line   6)
* Reader abstract class:                 Character Stream Class.
                                                            (line   6)
* Reader abstract class <1>:             Reading Console Input.
                                                            (line  13)
* Reader abstract class <2>:             Stream Classes.    (line   6)
* Reader abstract class <3>:             Character Streams. (line   6)
* Reader Methods:                        Reader.            (line  14)
* readExternal():                        Externalizable.    (line   6)
* reading characters:                    Reading Characters.
                                                            (line   6)
* Reading Console Input:                 Reading Console Input.
                                                            (line   6)
* reading from file demonstration:       Demonstration Reading From a File.
                                                            (line   6)
* reading strings:                       Reading Strings.   (line   6)
* recursion, recursive:                  Recursion.         (line   6)
* reference variable, superclass:        Superclass Referencing Subclass.
                                                            (line   6)
* Reflection:                            Reflection.        (line   6)
* Reflection demonstration:              Reflection Demonstration.
                                                            (line   6)
* Regular Expressions:                   Regular Expressions.
                                                            (line   5)
* remove():                              Collection Interface.
                                                            (line  54)
* removeAll():                           Collection Interface.
                                                            (line  54)
* removeIf():                            Collection Interface.
                                                            (line  54)
* retainAll():                           Collection Interface.
                                                            (line  54)
* run time, dynamic allocation:          Declaring Objects. (line   6)
* run-time:                              Interfaces.        (line  19)
* run-time polymorphism, abstract class: Using Abstract Classes.
                                                            (line  52)
* run-time system, finding packages:     Classpath.         (line   6)
* self-typed constants:                  Enumeration Basics.
                                                            (line  15)
* SequenceInputStream:                   SequenceInputStream.
                                                            (line   5)
* serializable example:                  Serializable Example.
                                                            (line   5)
* Serializable interface:                Serializable.      (line   6)
* Serialization:                         Serialization.     (line   6)
* Set Interface:                         Set Interface.     (line   5)
* size():                                Collection Interface.
                                                            (line  69)
* SortedSet interface:                   SortedSed Interface.
                                                            (line   5)
* Spliterator:                           Collections Overview.
                                                            (line  69)
* spliterator():                         Iterable Interface.
                                                            (line  40)
* spliterator() <1>:                     Collection Interface.
                                                            (line 101)
* Spliterators:                          Spliterators.      (line   5)
* Stack:                                 Collections Overview.
                                                            (line   6)
* Stack Class:                           Stack Class.       (line   6)
* Stack class, improved:                 Improved Stack Class.
                                                            (line   6)
* stack exhaustion, recursion:           Recursion.         (line   6)
* stack overun, recursion:               Recursion.         (line   6)
* standard Java classes, imported implicitly: Importing.    (line  29)
* static and non-static nested classes:  Nested and Inner Classes.
                                                            (line   6)
* static environment:                    Interfaces.        (line  19)
* static generic method:                 Method isIn.       (line  28)
* static initialization block:           static Keyword.    (line  34)
* static Keyword:                        static Keyword.    (line   6)
* static members:                        static Keyword.    (line   6)
* static method, interface:              Interface Static Methods.
                                                            (line   6)
* static restrictions on methods:        static Keyword.    (line  24)
* static variable, not serialized:       Serializable.      (line   6)
* Stream:                                Collection Interface.
                                                            (line 101)
* stream:                                Input/Output java.io.
                                                            (line   6)
* Stream API:                            Streams API.       (line   6)
* Stream Benefits:                       Stream Benefits.   (line   5)
* Stream Class, Byte:                    Byte Stream Class. (line   6)
* Stream Class, Character:               Character Stream Class.
                                                            (line   6)
* Stream Classes:                        Stream Classes.    (line   6)
* stream closing using try-with-resources: Closing a Stream.
                                                            (line  32)
* stream closing, traditional approach:  Closing a Stream.  (line   6)
* stream definition:                     Streams.           (line   6)
* Stream reference:                      BufferedReader.    (line   6)
* stream variables, predefined:          Predefined Streams.
                                                            (line   6)
* stream():                              Collection Interface.
                                                            (line 101)
* stream, character-based:               Reading Console Input.
                                                            (line   6)
* stream, input:                         Streams.           (line   6)
* stream, move backwards in:             BufferedReader.    (line   6)
* stream, output:                        Streams.           (line   6)
* Streams:                               Streams.           (line   6)
* Streams API:                           BufferedReader.    (line   6)
* Streams, Character:                    Byte Streams Character Streams.
                                                            (line   6)
* Streams, Predefined:                   Predefined Streams.
                                                            (line   6)
* strictfp:                              Miscellaneous Java Keywords.
                                                            (line   6)
* String Class:                          String Class.      (line   6)
* String concatenation:                  String Class.      (line  20)
* String construction:                   String Class.      (line  20)
* String Handling:                       Strings.           (line   5)
* String methods:                        String Class.      (line  33)
* String operator +:                     String Class.      (line  20)
* Strings:                               Strings.           (line   6)
* strings, reading:                      Reading Strings.   (line   6)
* subclass:                              Inheritance.       (line   6)
* super calling superclass constructors: super Calling Superclass Constructor.
                                                            (line   6)
* super referencing superclass:          super Referencing Superclass.
                                                            (line   6)
* super, using:                          Using super.       (line   6)
* superclass:                            Inheritance.       (line   6)
* superclass referencing subclass:       Superclass Referencing Subclass.
                                                            (line   6)
* Swing:                                 Swing.             (line   5)
* switch statement, enum types:          Enumeration Basics.
                                                            (line  38)
* System class:                          Predefined Streams.
                                                            (line   6)
* System.in:                             Reading Console Input.
                                                            (line  13)
* System.out as byte stream:             Writing Console Output.
                                                            (line   6)
* template, class:                       Class Fundamentals.
                                                            (line   6)
* Text:                                  AWT.               (line   5)
* text-based console programs:           I/O Basics.        (line   6)
* this Keyword:                          this Keyword.      (line   6)
* toArray():                             Collection Interface.
                                                            (line  79)
* toString():                            Object Class.      (line  49)
* toString(), PrintWriter:               PrinterWriter Constructors.
                                                            (line   6)
* transient variable, not serialized:    Serializable.      (line   6)
* try-with-resources:                    I/O.               (line   6)
* try-with-resources <1>:                Automatically Closing Files.
                                                            (line   6)
* try-with-resources <2>:                Closing a Stream.  (line  32)
* try-with-resources multiple resources: Automatically Closing Files.
                                                            (line  54)
* type abstraction, generics:            Generics.          (line   6)
* type argument, passed to type parameter: GenDemo as Integer.
                                                            (line   6)
* type correctness:                      Motivation.        (line  31)
* type erasure:                          Class GenDemo.     (line   6)
* TYPE field for primitive type wrappers: TYPE Field for Primitive Wrappers.
                                                            (line   6)
* type parameter:                        Motivation.        (line  31)
* type parameter, generic class:         Class Gen<T>.      (line   6)
* type safety, generics:                 What are Generics. (line   6)
* type wrappers:                         Primitive Wrappers.
                                                            (line   6)
* type wrappers, generics:               Reference Types.   (line   6)
* type, method:                          Methods.           (line  15)
* Unicode:                               Byte Streams Character Streams.
                                                            (line   6)
* Unicode character streams:             Character Stream Class.
                                                            (line   6)
* Unicode character streams <1>:         Character Stream Class.
                                                            (line   6)
* Unicode characters:                    Character Streams. (line   6)
* unmodifiable collections:              Collection Interfaces.
                                                            (line  47)
* UnsupportedOperationException:         Collection Interfaces.
                                                            (line  47)
* upper bound:                           Bounded Types.     (line   6)
* upper bound wildcard argument:         Bounded Wildcards. (line  20)
* upper bounded wildcard:                Bounded Wildcards. (line  18)
* User-Defined Classes, storing in Collections: Storing User-Defined Classes.
                                                            (line   5)
* vararg ambiguity:                      Varargs.           (line  32)
* vararg overloading:                    Varargs.           (line  32)
* varargs:                               Varargs.           (line   6)
* varargs method:                        Varargs.           (line   6)
* variable, enum type:                   Enumeration Basics.
                                                            (line  25)
* variable-arity method:                 Varargs.           (line   6)
* variable-length arguments:             Varargs.           (line   6)
* Vector:                                Collections Overview.
                                                            (line   6)
* visibility mechanism:                  Packages Intro.    (line   6)
* volative:                              Miscellaneous Java Keywords.
                                                            (line   6)
* wildcard arguments, generics:          Wildcard Arguments.
                                                            (line   6)
* wildcard syntax:                       Wildcard Syntax.   (line   6)
* wildcards, bounded:                    Bounded Wildcards. (line   6)
* wildcards, motivation:                 Wildcard Motivation.
                                                            (line   6)
* Windows:                               AWT.               (line   6)
* Wrappers, Primitives:                  Primitive Wrappers.
                                                            (line   6)
* write to a file:                       FileInputStream and FileOutputStream.
                                                            (line  75)
* write to file demonstration:           Demonstration Writing to a File.
                                                            (line   6)
* write() example:                       Writing Console Output.
                                                            (line  38)
* write() low-level method:              Writing Console Output.
                                                            (line   6)
* write(), FileOutputStream class:       FileInputStream and FileOutputStream.
                                                            (line  75)
* write(), OutputStream abstract class:  Byte Stream Class. (line  58)
* write(), Writer:                       Character Stream Class.
                                                            (line  55)
* writeExternal():                       Externalizable.    (line   6)
* Writer abstract class:                 Character Stream Class.
                                                            (line   6)
* Writer abstract class <1>:             Stream Classes.    (line   6)
* Writer abstract class <2>:             Character Streams. (line   6)
* Writer Methods:                        Writer.            (line  14)
* Writing Console Output:                Writing Console Output.
                                                            (line   6)
* Wrtier:                                Writer.            (line   6)


File: JavaSE9.info,  Node: Function Index,  Prev: Concept Index,  Up: Top

Function Index
**************

 [index ]
* Menu:

* == on Enum:                            Inherit Enum.       (line 37)
* accept on FileFilter:                  listFiles() Alternative.
                                                             (line 33)
* accept on FilenameFilter:              FilenameFilter.     (line 23)
* boolean equals(Object object):         Object Class.       (line 21)
* Class<?> getClass():                   Object Class.       (line 26)
* compareTo on Enum:                     Inherit Enum.       (line 21)
* equals on Enum:                        Inherit Enum.       (line 34)
* getConstructor on Class:               Class Constructor.  (line  6)
* getConstructors on Class:              Class Constructor.  (line 15)
* int hashCode():                        Object Class.       (line 28)
* list on File:                          Directories.        (line 12)
* list on File <1>:                      FilenameFilter.     (line 10)
* listFiles on File:                     listFiles() Alternative.
                                                             (line  9)
* listFiles on File <1>:                 listFiles() Alternative.
                                                             (line 12)
* listFiles on File <2>:                 listFiles() Alternative.
                                                             (line 15)
* Object clone():                        Object Class.       (line 19)
* ordinal on Enum:                       Inherit Enum.       (line 13)
* String toString():                     Object Class.       (line 34)
* valueOf on Enum:                       Enum Methods.       (line 14)
* values on Enum:                        Enum Methods.       (line  8)
* void finalize():                       Object Class.       (line 23)
* void notify():                         Object Class.       (line 30)
* void notifyAll():                      Object Class.       (line 32)
* void wait():                           Object Class.       (line 36)
* void wait(long millisconds, int nanoseconds): Object Class.
                                                             (line 38)
* void wait(long milliseconds):          Object Class.       (line 37)

