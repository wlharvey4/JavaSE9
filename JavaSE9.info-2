This is JavaSE9.info, produced by makeinfo version 6.5 from
JavaSE9.texi.


File: JavaSE9.info,  Node: Buffered Reader Demo,  Next: BufferedWriter,  Prev: BufferedReader,  Up: Character Streams

15.8.8 Buffered Reader Demo
---------------------------

This example reworks the 'BufferedInputStream' example (*note Buffered
Input Example::) so that it uses a 'BufferedReader' character stream
rather than a buffered byte stream.  It uses the 'mark()' and
'reset()' methods to parse a stream for the HTML-entity reference for
the copyright symbol.  Such a reference begins with an ampersand ('&')
and ends with a semicolon (';') without any intervening whitespace.
The sample has two ampersands to show the case where the 'reset()'
happens and where it does not.

=============================================================================

{'BufferedReaderDemo.java'} ==
     <Import java.io>
     class BufferedReaderDemo {
       public static void main (String[] args) throws IOException {

         <BufferedReaderDemo Instance Variables>

         <BufferedReaderDemo TryWithResources BufferedReader>
         <Catch IOException>

       }
     }


The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<BufferedReaderDemo       See
Instance Variables>       *note BufferedReaderDemo-Instance-Variables::.
<BufferedReaderDemo       See
TryWithResources          *note BufferedReaderDemo-TryWithResources-BufferedReader::.
BufferedReader>
<Catch IOException>       See *note Catch-IOException::.
<Import java.io>          See *note Import-java-io::.

* Menu:

* BufferedReaderDemo Instance Variables::
* BufferedReaderDemo Buffer::
* BufferedReaderDemo TryWithResources BufferedReader::


File: JavaSE9.info,  Node: BufferedReaderDemo Instance Variables,  Next: BufferedReaderDemo Buffer,  Up: Buffered Reader Demo

15.8.8.1 BufferedReaderDemo Instance Variables
..............................................

The String is copied directly from the prior implementation.

=========================================================================

<BufferedReaderDemo Instance Variables> ==
     <BufferedInputStreamDemo String>
     <BufferedReaderDemo Buffer>


This chunk is called by {'BufferedReaderDemo.java'}; see its first
definition at *note BufferedReaderDemo-java::.

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<BufferedInputStreamDemo  See *note BufferedInputStreamDemo-String::.
String>
<BufferedReaderDemo       See *note BufferedReaderDemo-Buffer::.
Buffer>


File: JavaSE9.info,  Node: BufferedReaderDemo Buffer,  Next: BufferedReaderDemo TryWithResources BufferedReader,  Prev: BufferedReaderDemo Instance Variables,  Up: Buffered Reader Demo

15.8.8.2 BufferedReaderDemo Buffer
..................................

Notice that this implementation uses a 'char' buffer, with a
'getChars()' method to transfer the string characters, while the
'BufferedInputStream' implementation uses a 'byte' buffer, and a
'getBytes()' method to transfer the string bytes.  *Note
BufferedInputStreamDemo Buffer::.

=========================================================================

<BufferedReaderDemo Buffer> ==
     char buf[] = new char[s.length()];
     s.getChars(0, s.length(), buf, 0);


This chunk is called by <BufferedReaderDemo Instance Variables>; see
its first definition at *note BufferedReaderDemo-Instance-Variables::.


File: JavaSE9.info,  Node: BufferedReaderDemo TryWithResources BufferedReader,  Prev: BufferedReaderDemo Buffer,  Up: Buffered Reader Demo

15.8.8.3 BufferedReaderDemo TryWithResources BufferedReader
...........................................................

Notice that the Switch code is identical to the byte stream example.

==========================================================================

<BufferedReaderDemo TryWithResources BufferedReader> ==
     try ( BufferedReader f = new BufferedReader(in) ) {
       while ( (c = f.read()) != -1 ) {
         <BufferedInputStreamDemo Switch on Character>
       }
     }


This chunk is called by {'BufferedReaderDemo.java'}; see its first
definition at *note BufferedReaderDemo-java::.

The called chunk <BufferedInputStreamDemo Switch on Character> is
first defined at *note BufferedInputStreamDemo-Switch-on-Character::.


File: JavaSE9.info,  Node: BufferedWriter,  Next: PushbackReader,  Prev: Buffered Reader Demo,  Up: Character Streams

15.8.9 'BufferedWriter'
-----------------------

A 'BufferedWriter' is a 'Writer' that buffers output.  Using a
'BufferedWriter' can improve performance by reducing the number of
times data is actually phyiscally written to the output device.  A
'BufferedWriter' has these constructors:

     BufferedWriter (Writer outputStream)
     BufferedWriter (Writer outputStream, int bufSize)


File: JavaSE9.info,  Node: PushbackReader,  Next: PrintWriter,  Prev: BufferedWriter,  Up: Character Streams

15.8.10 'PushbackReader'
------------------------


File: JavaSE9.info,  Node: PrintWriter,  Prev: PushbackReader,  Up: Character Streams

15.8.11 'PrintWriter'
---------------------


File: JavaSE9.info,  Node: Console Class,  Next: Serialization,  Prev: Character Streams,  Up: java.io --- Input/Output

15.9 The Console Class
======================


File: JavaSE9.info,  Node: Serialization,  Next: Stream Benefits,  Prev: Console Class,  Up: java.io --- Input/Output

15.10 Serialization
===================

"Serialization" is the process of writing the state of an object to a
byte stream.  This is useful when you want to save the state of your
program to a persistent storage area, such as a file.  At a later
time, you may restore these objects by using the process of
deserialization.

   Assume that an object to be serialized has references to other
objects, which, in turn, have references to still more objects.  This
set of objects and the relationships among them form a directed graph.
There may also be circular references within this object graph.
Objects may also contain references to themselves.  The object
serialization and deserialization facilities have been designed to
work correctly in these scenarios.  If you attempt to serialize an
object at the top of an object graph, all of the other referenced
objects are recurseively located and serialized.  Similarly, during
the process of deserialization, all of these objects and their
references are correctly restored.

* Menu:

* Serializable::
* Externalizable::
* ObjectOutput::
* ObjectOutputStream::
* ObjectInput::
* ObjectInputStream::
* Serializable Example::


File: JavaSE9.info,  Node: Serializable,  Next: Externalizable,  Up: Serialization

15.10.1 'Serializable'
----------------------

Only an object that implements the 'Serializable' interface can be
saved and restored by the serialization facilities.  The
'Serializable' interface defines no members.  It is simply used to
indicate that a class may be serialized.  If a class is serializable,
all of its subclasses are also serializable.

   Variables that are declared as 'transient' are not saved by the
serialization facilities.  Also 'static' variables are not saved.


File: JavaSE9.info,  Node: Externalizable,  Next: ObjectOutput,  Prev: Serializable,  Up: Serialization

15.10.2 'Externalizable'
------------------------

The Java facilities for serialization and deserialization have been
designed so that much of the work to save and restore the state of an
object occurs automatically.  However, there are cases in which the
programmer may need to have control over these processes.  The
'Externalizable' interface is designed for these sitautions.

   The 'Externalizable' interface defines these two methods:

     void readExternal (ObjectInput inStream) throws IOException, ClassNotFoundException
     void writeExternal (ObjectOutput outStream throws IOException


File: JavaSE9.info,  Node: ObjectOutput,  Next: ObjectOutputStream,  Prev: Externalizable,  Up: Serialization

15.10.3 'ObjectOutput'
----------------------


File: JavaSE9.info,  Node: ObjectOutputStream,  Next: ObjectInput,  Prev: ObjectOutput,  Up: Serialization

15.10.4 'ObjectOutputStream'
----------------------------


File: JavaSE9.info,  Node: ObjectInput,  Next: ObjectInputStream,  Prev: ObjectOutputStream,  Up: Serialization

15.10.5 'ObjectInput'
---------------------


File: JavaSE9.info,  Node: ObjectInputStream,  Next: Serializable Example,  Prev: ObjectInput,  Up: Serialization

15.10.6 'ObjectInputStream'
---------------------------


File: JavaSE9.info,  Node: Serializable Example,  Prev: ObjectInputStream,  Up: Serialization

15.10.7 A Serializable Example
------------------------------


File: JavaSE9.info,  Node: Stream Benefits,  Prev: Serialization,  Up: java.io --- Input/Output

15.11 Stream Benefits
=====================


File: JavaSE9.info,  Node: java.nio --- NIO,  Next: Networking,  Prev: java.io --- Input/Output,  Up: Top

16 Exploring NIO
****************


File: JavaSE9.info,  Node: Networking,  Next: Event Handling,  Prev: java.nio --- NIO,  Up: Top

17 Networking
*************


File: JavaSE9.info,  Node: Event Handling,  Next: AWT,  Prev: Networking,  Up: Top

18 Event Handling
*****************


File: JavaSE9.info,  Node: AWT,  Next: AWT Controls,  Prev: Event Handling,  Up: Top

19 AWT: Working with Windows, Graphics, and Text
************************************************


File: JavaSE9.info,  Node: AWT Controls,  Next: Images,  Prev: AWT,  Up: Top

20 Using AWT Controls, Layout Managers, and Menus
*************************************************


File: JavaSE9.info,  Node: Images,  Next: Concurrency,  Prev: AWT Controls,  Up: Top

21 Images
*********


File: JavaSE9.info,  Node: Concurrency,  Next: Streams API,  Prev: Images,  Up: Top

22 The Concurrency Utilities
****************************


File: JavaSE9.info,  Node: Streams API,  Next: Regular Expressions,  Prev: Concurrency,  Up: Top

23 The Stream API
*****************


File: JavaSE9.info,  Node: Regular Expressions,  Next: Reflection,  Prev: Streams API,  Up: Top

24 Regular Expressions
**********************


File: JavaSE9.info,  Node: Reflection,  Next: Introducing Swing,  Prev: Regular Expressions,  Up: Top

25 Reflection
*************

"Reflection" is the ability of software to analyze or modify itself at
runtime rather than at compile time.  This is provided by the
'java.lang.reflect' package and elements in 'Class'.  Beginning with
JDK 9, 'java.lang.reflect' is part of the 'java.base' module.
Reflection allows you to analyze a software component and describe its
capabilities dynamcically at run-time rather than at compile time.
For example, by using reflection, you can determine what methods,
constructors, and fields a class supports.

Drawbacks of Reflection
=======================

Because reflection is dynamic, the java virtual machine is unable to
make certain optimizations and could therefor run slower.  Also, since
reflection allows code to perform operations that would be illegal in
non-reflective code, such as accessing private fields and methods, the
use of reflection can result in unexpected behavior.  Reflection
breaks abstractions.

* Menu:

* java.lang.reflect Package::
* Classes and Reflection::
* Members and Reflection::
* Arays and Enumerated Types and Reflection::


File: JavaSE9.info,  Node: java.lang.reflect Package,  Next: Classes and Reflection,  Up: Reflection

25.1 'java.lang.reflect' Package
================================

This package provides classes and interfaces for obtaining reflective
information about classes and objects.  Reflection allows programmatic
access to information about the fields, methods and constructors of
loaded classes, and the use of reflected fields, methods, and
constructors to operate on their underlying counterparts, within
encapsulation and security restrictions.

   The package 'java.lang.reflect' includes several interfaces.  Of
special interest is 'Member', which defines methods that allow you to
get information abouta field, constructor, or method of a class.
There are also ten classes in this package.

   Classes in this package, along with java.lang.Class accommodate
applications such as debuggers, interpreters, object inspectors, class
browsers, and services such as Object Serialization and JavaBeans that
need access to either the public members of a target object (based on
its runtime class) or the members declared by a given class.

   Note that none of the classes in 'java.lang.reflect' offer any
public constructors.  All reflection interactions must go through
'java.lang.Class'.  Note also that 'java.lang.Class' does not offer
any public constructors.  Instances of this class are created by the
Java Virtual Machine.

* Menu:

* Classes Defined in java.lang.reflect::
* Interfaces Defined in java.lang.reflect::
* Reflection Demonstration::


File: JavaSE9.info,  Node: Classes Defined in java.lang.reflect,  Next: Interfaces Defined in java.lang.reflect,  Up: java.lang.reflect Package

25.1.1 Classes Defined in 'java.lang.reflect'
---------------------------------------------

AccessibleObject
     Allows you to bypass the default access control checks
Array
     Allows you to dynamically create and manipulate arrays
Constructor
     Provides information about a constructor
Executable
     An abstract superclass extended by 'Member' and 'Constructor'
Field
     Provides information about a field
Method
     Provides information about a method
Modifier
     Provides information about class and member access modifiers
Parameter
     Provides information about parameters
Proxy
     Supports dynamic proxy classes
ReflectPermission
     Allows reflection of private or protected members of a class

Table 25.1: Classes Defined in 'java.lang.reflect'


File: JavaSE9.info,  Node: Interfaces Defined in java.lang.reflect,  Next: Reflection Demonstration,  Prev: Classes Defined in java.lang.reflect,  Up: java.lang.reflect Package

25.1.2 Interfaces Defined in 'java.lang.reflect'
------------------------------------------------

AnnotatedArrayType
     represents the potentially annotated use of an array type, whose
     component type may itself represent the annotated use of a type.
AnnotatedElement
     represents an annotated element of the program currently running
     in this VM.
AnnotatedParameterizedType
     represents the potentially annotated use of a parameterized type,
     whose type arguments may themselves represent annotated uses of
     types.
AnnotatedType
     represents the potentially annotated use of a type in the program
     currently running in this VM.
AnnotatedTypeVariable
     represents the potentially annotated use of a type variable,
     whose declaration may have bounds which themselves represent
     annotated uses of types.
AnnotatedWildcardType
     represents the potentially annotated use of a wildcard type
     argument, whose upper or lower bounds may themselves represent
     annotated uses of types.
GenericArrayType
     represents an array type whose component type is either a
     parameterized type or a type variable.
GenericDeclaration
     A common interface for all entities that declare type variables.
InvocationHandler
     the interface implemented by the invocation handler of a proxy
     instance.
Member
     an interface that reflects identifying information about a single
     member (a field or a method) or a constructor.
ParameterizedType
     ParameterizedType represents a parameterized type such as
     Collection<String>.
Type
     Type is the common superinterface for all types in the Java
     programming language.
TypeVariable<D extends GenericDeclaration>
     the common superinterface for type variables of kinds.
WildcardType
     WildcardType represents a wildcard type expression, such as ?, ?
     extends Number, or ?  super Integer.

Table 25.2: Interfaces Defined in 'java.lang.reflect'


File: JavaSE9.info,  Node: Reflection Demonstration,  Prev: Interfaces Defined in java.lang.reflect,  Up: java.lang.reflect Package

25.1.3 Reflection Demonstration
-------------------------------

The following application illustrates a simple use of the Java
reflection capabilities.  It prints the constructors, fields, and
methods of the class 'java.awt.Dimension'.  The program begins by
using the 'forName()' mthod of 'Class' to get a class object for
'java.awt.Dimension'.  Once this is obtained, 'getConstructors()',
'getFields()', and 'getMethods()' are used to analyze this class
object.  They return arrays of 'Constructor', 'Field', and 'Method'
objects that provide the information about the object.  The
'Constructor', 'Field', and 'Method' classes define several methods
that can be used to obtain information about an object.  Each supports
the 'toString()' method.  Therefore, using these objects as arguments
tot he 'println()' method is straightforward.

ReflectionDemo1.java
....................

{'ReflectionDemo1.java'} ==
     <Import java.lang.reflect>

     public class ReflectionDemo1 {
       public static void main(String[] args) {
         try {
           <ReflectionDemo1--Class forName() Call>
           <ReflectionDemo1--getConstructors() Call>
           <ReflectionDemo1--getFields() Call>
           <ReflectionDemo1--getMethods() Call>
         }
         <Catch Exception>
       }
     }


The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<Catch Exception>         See *note Catch-Exception::.
<Import                   See *note Import-java-lang-reflect::.
java.lang.reflect>
<ReflectionDemo1--Class   See
forName() Call>           *note ReflectionDemo1---Class-forName---Call::.
<ReflectionDemo1--getConstructors()See
Call>                     *note ReflectionDemo1---getConstructors---Call::.
<ReflectionDemo1--getFields()See
Call>                     *note ReflectionDemo1---getFields---Call::.
<ReflectionDemo1--getMethods()See
Call>                     *note ReflectionDemo1---getMethods---Call::.

* Menu:

* Import java.lang.reflect::
* ReflectionDemo1---Class forName() Call::
* ReflectionDemo1---getConstructors() Call::
* ReflectionDemo1---getFields() Call::
* ReflectionDemo1---getMethods() Call::
* Catch Exception::


File: JavaSE9.info,  Node: Import java.lang.reflect,  Next: ReflectionDemo1---Class forName() Call,  Up: Reflection Demonstration

25.1.3.1 Import java.lang.reflect
.................................

<Import java.lang.reflect> ==
     import java.lang.reflect.*;


This chunk is called by {'ReflectionDemo1.java'}; see its first
definition at *note ReflectionDemo1-java::.


File: JavaSE9.info,  Node: ReflectionDemo1---Class forName() Call,  Next: ReflectionDemo1---getConstructors() Call,  Prev: Import java.lang.reflect,  Up: Reflection Demonstration

25.1.3.2 ReflectionDemo1--Class forName() Call
..............................................

<ReflectionDemo1--Class forName() Call> ==
     Class<?> c = Class.forName("java.awt.Dimension");


This chunk is called by {'ReflectionDemo1.java'}; see its first
definition at *note ReflectionDemo1-java::.


File: JavaSE9.info,  Node: ReflectionDemo1---getConstructors() Call,  Next: ReflectionDemo1---getFields() Call,  Prev: ReflectionDemo1---Class forName() Call,  Up: Reflection Demonstration

25.1.3.3 ReflectionDemo1--getConstructors() Call
................................................

<ReflectionDemo1--getConstructors() Call> ==
     System.out.println("Constructors:");
     Constructor<?> constructors[] = c.getConstructors();

     for (int i = 0; i < constructors.length; i++) {
       System.out.println(" " + constructors[i]);
     }


This chunk is called by {'ReflectionDemo1.java'}; see its first
definition at *note ReflectionDemo1-java::.


File: JavaSE9.info,  Node: ReflectionDemo1---getFields() Call,  Next: ReflectionDemo1---getMethods() Call,  Prev: ReflectionDemo1---getConstructors() Call,  Up: Reflection Demonstration

25.1.3.4 ReflectionDemo1--getFields() Call
..........................................

<ReflectionDemo1--getFields() Call> ==
     System.out.println("Fields:");
     Filed fields[] = c.getFields();

     for (int i = 0; i < fields.length; i++) {
       System.out.println(" " + fields[i]);
     }


This chunk is called by {'ReflectionDemo1.java'}; see its first
definition at *note ReflectionDemo1-java::.


File: JavaSE9.info,  Node: ReflectionDemo1---getMethods() Call,  Next: Catch Exception,  Prev: ReflectionDemo1---getFields() Call,  Up: Reflection Demonstration

25.1.3.5 ReflectionDemo1--getMethods() Call
...........................................

<ReflectionDemo1--getMethods() Call> ==
     System.out.println("Methods:");
     Method methods[] = c.getMethods();

     for (int i = 0; i < methods.length; i++) {
       System.out.print.n(" " + methods[i]);
     }


This chunk is called by {'ReflectionDemo1.java'}; see its first
definition at *note ReflectionDemo1-java::.


File: JavaSE9.info,  Node: Catch Exception,  Prev: ReflectionDemo1---getMethods() Call,  Up: Reflection Demonstration

25.1.3.6 Catch Exception
........................

<Catch Exception> ==
     catch (Exception e) {
       System.out.println("Exception: " + e);
     }


This chunk is called by {'ReflectionDemo1.java'}; see its first
definition at *note ReflectionDemo1-java::.


File: JavaSE9.info,  Node: Classes and Reflection,  Next: Members and Reflection,  Prev: java.lang.reflect Package,  Up: Reflection

25.2 Classes and Reflection
===========================

For every type of object, the Java virtual machine instantiates an
immutable instance of 'java.lang.Class' which provides methods to
examine the runtime properties of the object including its members and
type information.

   'Class' also provides the ability to create new classes and
objects.  Most importantly, it is the entry point for all of the
Reflective APIs.

* Menu:

* java.lang.Class::
* Retrieving Class Objects::
* Examining Class Modifiers::
* Discovering Class Members::


File: JavaSE9.info,  Node: java.lang.Class,  Next: Retrieving Class Objects,  Up: Classes and Reflection

25.2.1 'java.lang.Class'
------------------------

Instances of the class 'Class' represent classes and interfaces in a
running Java application.  An 'enum' is a kind of class and an
'annotation' is a kind of interface.  Every array also belongs to a
class that is reflected as a 'Class' object that is shared by all
arrays with the same element type and number of dimensions.  The
primitive Java types ('boolean', 'byte', 'char', 'short', 'int',
'long', 'float', and 'double'), and the keyword 'void' are also
represented as 'Class' objects.

   'Class' has no public constructor.  Instead 'Class' objects are
constructed automatically by the Java Virtual Machine as classes are
loaded and by calls to the 'defineClass' method in the class loader.

   The following example uses a Class object to print the class name
of an object:

     void printClassName(Object obj) {
              System.out.println("The class of " + obj +
                                 " is " + obj.getClass().getName());
          }

   It is also possible to get the 'Class' object for a named type (or
for 'void') using a class literal.

     System.out.println("The name of class Foo is: "+Foo.class.getName());

* Menu:

* Class Constructor::


File: JavaSE9.info,  Node: Class Constructor,  Up: java.lang.Class

25.2.1.1 'Class' getConstructor
...............................

 -- Constructor on Class:
          Constructor<T>
          getConstructor (parameterType)
     Returns a 'Constructor' object that reflects the specified public
     constructor of the class represented by this 'Class' object.

'Class' getConstructors
.......................

 -- Constructor on Class:
          Constructor<?>[]
          getConstructors ()
     Returns an array containing 'Constructor' objects reflecting all
     the public constructors of the class represented by this 'Class'
     object.


File: JavaSE9.info,  Node: Retrieving Class Objects,  Next: Examining Class Modifiers,  Prev: java.lang.Class,  Up: Classes and Reflection

25.2.2 Retrieving Class Objects
-------------------------------

The entry point for all reflection operations is 'java.lang.Class'.
None of the classes in 'java.lang.reflect' have public constructors.
(1) To get to these classes, it is necessary to invoke appropriate
methods on 'Class'.  There are several ways to get a 'Class' depending
on whether the code has access to an object, the name of the class, a
type, or an existing 'Class'.

* Menu:

* Object.getClass::
* .class Syntax::
* Class.forName() and Class.getName() Methods::
* TYPE Field for Primitive Wrappers::
* Methods that Return Classes::

   ---------- Footnotes ----------

   (1) with the exception of 'java.lang.reflect.ReflectPermission'.


File: JavaSE9.info,  Node: Object.getClass,  Next: .class Syntax,  Up: Retrieving Class Objects

25.2.2.1 'Object.getClass()'
............................

If an instance of an object is available, then the simplest way to get
its 'Class' is to invoke 'Object.getClass()'.

String.getClass()
.................

     Class c = "foo".getClass();

returns the 'Class' for 'String';

System.console.getClass()
.........................

     Class c = System.console().getClass();

returns the 'Class' corresponding to 'java.io.Console'.  (1)

Enum.getClass()
...............

     enum E { A, B }
     Class c  = A.getClass();

'A' is an instance of the 'enum' 'E'; thus, 'getClass()' returns the
'Class' corresponding to the enumeration type 'E'.

Array.getClass()
................

Since arrays are 'Object's, it is possible to invoke 'getClass()' on
an instance of an array.  The returned 'Class' corresponds to an array
with component type 'byte'.

     import java.util.HashSet;
     import java.util.Set;

     Set<String> s = new HashSet<String>();
     Class c = s.getClass();

   'java.util.Set' is an interface to an object of type
'java.util.HashSet'.  The value returned by 'getClass()' is the class
corresponding to 'java.util.HashSet'.

   ---------- Footnotes ----------

   (1) There is a unique console associated with the virtual machine
which is returned by the 'static' method 'System.console()'.


File: JavaSE9.info,  Node: .class Syntax,  Next: Class.forName() and Class.getName() Methods,  Prev: Object.getClass,  Up: Retrieving Class Objects

25.2.2.2 The '.class' Syntax
............................

If the type is available, but there is no instance, then it is
possible to obtain a 'Class' by appending '.class' to the name of the
type.  This is also the easiest way to obtain the 'Class' for a
primitive type.

Primitive.class
...............

     boolean b;
     Class c = b.getClass();	 // compile-time error
     Class c = boolean.class; // correct

The statement 'boolean.getClass()' would produce a compile-time error
because a 'boolean' is a primitive type and cannot be dereferenced.
The '.class' syntax returns the 'Class' corresponding to the type
'boolean'.

Type.class
..........

     Class c = java.io.PrintStream.class;

The variable 'c' will be the 'Class' corresponding to the type
'java.io.PrintStream'.

Multi-dimensional Array
.......................

     Class c = int[][].class;

The '.class' syntax may be used to retrieve a 'Class' corresonding to
a multi-dimensional array of a given type.


File: JavaSE9.info,  Node: Class.forName() and Class.getName() Methods,  Next: TYPE Field for Primitive Wrappers,  Prev: .class Syntax,  Up: Retrieving Class Objects

25.2.2.3 'Class.forName()' and 'Class.getName()' Methods
........................................................

If the fully-qualified name of a class is available, it is possible to
get the corresponding 'Class' using the 'static' method
'Class.forName()'.  This cannot be used for primitive types.

   The syntax for names of array classes is described by
'Class.getName()'.  This syntax is applicable to references and
primitive types.

'forName()'
...........

     Class c = Class.forName("com.duke.MyLocalServiceProvider");

This statement will create a class from the given fully-qualified
name.

'getName()'
...........

*FIXME*: should these be 'getName()' instead of 'forName()'?

     Class cDoubleArray = Class.forName("[D");
     Class cStringArray = Class.forName("[[Ljava.lang.String;");

The variable 'cDoubleArray' will contain the 'Class' corresponding to
an array of primitive type 'double' (i.e., the same as
'double[].class'.  The 'cStringArray' variable will contain the
'Class' corresponding to a two-dimensional array of 'String' (i.e.,
identical to String[][].class).


File: JavaSE9.info,  Node: TYPE Field for Primitive Wrappers,  Next: Methods that Return Classes,  Prev: Class.forName() and Class.getName() Methods,  Up: Retrieving Class Objects

25.2.2.4 TYPE Field for Primitive Type Wrappers
...............................................

The '.class' syntax is a more convenient and the preferred way to
obtain the 'Class' for a primitive type; however, there is another way
to acquire the 'Class'.  Each of the primitive types and 'void' has a
wrapper class in 'java.lang' that is used for boxing of primitive
types to reference types.  Each wrapper class contains a field name
'TYPE' which is equal to the 'Class' for the primitive type being
wrapped.

Wrapper TYPE for Primitive
..........................

     Class c = Double.TYPE;

There is a class 'java.lang.Double' which is used to wrap the
primitive type 'double' whenever an 'Object' is required.  The value
of 'Double.TYPE' is identical to that of 'double.class'.

Wrapper TYPE for void
.....................

     Class c = Void.TYPE;

   'Void.TYPE' is identical to 'void.class'.


File: JavaSE9.info,  Node: Methods that Return Classes,  Prev: TYPE Field for Primitive Wrappers,  Up: Retrieving Class Objects

25.2.2.5 Methods that Return Classes
....................................

There are several 'Reflection' APIs which return classes, but these
may only be accessed if a 'Class' has already been obtained, either
directly or indirectly.

'Class.getSuperClass()'
.......................

Returns the super class for the given class.

     Class c = javax.swing.JButton.class.getSuperclass();

'Class.getClasses()'
....................

Returns all the public classes, interfaces, and enums that are members
of the class including inherited members.

     Class<?>[] c = Character.class.getClasses();

'Class.getDeclaredClasses()'
............................

Returns all of the classes interfaces, and enums that are explicitly
declared in this class.

     Class<?>[] c = Character.class.getDeclaredClasses();

'Class.getDeclaringClass()'
...........................

     java.lang.reflect.Field.getDeclaringClass()
     java.lang.reflect.Method.getDeclaringClass()
     java.lang.reflect.Constructor.getDeclaringClass()

Returns the 'Class' in which these members were declared.  'Anonymous
Class Declarations' will not have a declaring class but will have an
enclosing class.

     import java.lang.reflect.Field;

     Field f = System.class.getField("out");
     Class c = f.getDeclaringClass();

The field out is declared in 'System'.

     public class MyClass {
         static Object o = new Object() {
             public void m() {}
         };
         static Class<c> = o.getClass().getEnclosingClass();
     }

   The declaring class of the anonymous class defined by 'o' is 'null'

'Class.getEnclosingClass()'
...........................

Returns the immediately enclosing class of the class.

     Class c = Thread.State.class().getEnclosingClass();

The enclosing class of the enum 'Thread.State' is 'Thread'.

     public class MyClass {
         static Object o = new Object() {
             public void m() {}
         };
         static Class<c> = o.getClass().getEnclosingClass();
     }

   The anonymous class defined by 'o' is enclosed by 'MyClass'.


File: JavaSE9.info,  Node: Examining Class Modifiers,  Next: Discovering Class Members,  Prev: Retrieving Class Objects,  Up: Classes and Reflection

25.2.3 Examing Class Modifiers and Types
----------------------------------------

A class may be declared with one or more modifiers which affect its
runtime behavior:

   * Access modifiers: public, protected, and private
   * Modifier requiring override: abstract
   * Modifier restricting to one instance: static
   * Modifier prohibiting value modification: final
   * Modifier forcing strict floating point behavior: strictfp
   * Annotations

   Not all modifiers are allowed on all classes, for example an
interface cannot be 'final' and an 'enum' cannot be 'abstract'.
'java.lang.reflect.Modifier' contains declarations for all possible
modifiers.  It also contains methods which may be used to decode the
set of modifiers returned by 'Class.getModifiers()'.


File: JavaSE9.info,  Node: Discovering Class Members,  Prev: Examining Class Modifiers,  Up: Classes and Reflection

25.2.4 Discovering Class Members
--------------------------------

There are two categories of methods provided in 'Class' for accessing
fields, methods, and constructors:

  1. methods which enumerate these members; and
  2. methods which search for particular members.

Also there are distinct methods for

   * accessing members declared directly on the class; versus
   * methods which search the superinterfaces and superclasses for
     inherited members.

   The following tables provide a summary of all the member-locating
methods and their characteristics.

                  Class Methods for Locating Fields
'Class' API         List of          Inherited          Private
                    members?         members?           members?
-------------------------------------------------------------------------
getDeclarareField() no               no                 yes
getField()          no               yes                no
getDeclaredFields() yes              no                 yes
getFields()         yes              yes                no



                 Class Methods for Locating Methods
'Class' API         List of          Inherited          Private
                    members?         members?           members?
-------------------------------------------------------------------------
getDeclarareMethod()no               no                 yes
getMethod()         no               yes                no
getDeclaredMethods()yes              no                 yes
getMethods()        yes              yes                no



               Class Methods for Locating Constructors
'Class' API         List of          Inherited          Private
                    members?         members?           members?
-------------------------------------------------------------------------
getDeclarareConstructor()no          N/A(1)             yes
getConstructor()    no               N/A                no
getDeclaredConstructors()yes         N/A                yes
getConstructors()   yes              N/A                no

Table 25.3: Class Methods for Locating Fields, Methods, and
Constructors

   ---------- Footnotes ----------

   (1) Constructors are not inherited


File: JavaSE9.info,  Node: Members and Reflection,  Next: Arays and Enumerated Types and Reflection,  Prev: Classes and Reflection,  Up: Reflection

25.3 Members and Reflection
===========================

Reflection defines an interface 'java.lang.reflect.Member' which is
implemented by

   * 'java.lang.reflect.Field',
   * 'java.lang.reflect.Method', and
   * 'java.lang.reflect.Constructor'.

   For each member, the lesson will describe the associated APIs to
retrieve declaration and type information, any operations unique to
the member (for example, setting the value of a field or invoking a
method), and commonly encountered errors.  Each concept will be
illustrated with code samples and related output which approximate
some expected reflection uses.

Note about Members and the Specification
----------------------------------------

According to The Java Language Specification, Java SE 7 Edition, the
"members of a class" are the inherited components of the class body
including fields, methods, nested classes, interfaces, and enumerated
types.  Since constructors are not inherited, they are not members.
This differs from the implementing classes of
'java.lang.reflect.Member'.

* Menu:

* reflect Fields::
* reflect Methods::
* reflect Constructors::


File: JavaSE9.info,  Node: reflect Fields,  Next: reflect Methods,  Up: Members and Reflection

25.3.1 'reflect.Fields'
-----------------------

Fields have a type and a value.  The 'java.lang.reflect.Field' class
provides methods for accessing type information and setting and
getting values of a field on a given object.


File: JavaSE9.info,  Node: reflect Methods,  Next: reflect Constructors,  Prev: reflect Fields,  Up: Members and Reflection

25.3.2 'reflect.Method'
-----------------------

Methods have return values, parameters, and may throw exceptions.  The
'java.lang.reflect.Method' class provides methods for obtaining the
type information for the parameters and return value.  It may also be
used to invoke methods on a given object.


File: JavaSE9.info,  Node: reflect Constructors,  Prev: reflect Methods,  Up: Members and Reflection

25.3.3 'reflect.Constructors'
-----------------------------

The Reflection APIs for constructors are defined in
'java.lang.reflect.Constructor' and are similar to those for methods,
with two major exceptions: first, constructors have no return values;
second, the invocation of a constructor creates a new instance of an
object for a given class.

   Similar to methods, reflection provides APIs to

   * discover and retrieve the constructors of a class and
   * obtain declaration information such as the modifiers, parameters,
     annotations, and thrown exceptions.
   * New instances of classes may also be created using a specified
     constructor.

   The key classes used when working with constructors are 'Class' and
'java.lang.reflect.Constructor'.  Common operations involving
constructors are covered in the following sections.

* Menu:

* Finding Constructors::
* Constructor Modifiers::
* Creating New Class Instances::


File: JavaSE9.info,  Node: Finding Constructors,  Next: Constructor Modifiers,  Up: reflect Constructors

25.3.3.1 Finding Constructors
.............................

This section illustrates how to retrieve constructors with specific
parameters.

   A constructor declaration includes the name, modifiers, parameters,
and list of throwable exceptions.  The 'java.lang.reflect.Constructor'
class provides a way to obtain this information.


File: JavaSE9.info,  Node: Constructor Modifiers,  Next: Creating New Class Instances,  Prev: Finding Constructors,  Up: reflect Constructors

25.3.3.2 Retrieving and Parsing Constructor Modifiers
.....................................................

This section shows how to obtain the modifiers of a constructor
declaration and other information about the constructor.

   Because of the role of constructors in the language, fewer
modifiers are meaningful than for methods:

   * Access modifiers:
        * 'public',
        * 'protected', and
        * 'private'
   * Annotations


File: JavaSE9.info,  Node: Creating New Class Instances,  Prev: Constructor Modifiers,  Up: reflect Constructors

25.3.3.3 Creating New Class Instances
.....................................

This section shows how to instantiate an instance of an object by
invoking its constructor.

   There are two reflective methods for creating instances of classes:

  1. 'java.lang.reflect.Constructor.newInstance()' and
  2. 'Class.newInstance()'.

   The former is preferred and is thus used in these examples because:

   * 'Class.newInstance()' can only invoke the zero-argument
     constructor, while 'Constructor.newInstance()' may invoke any
     constructor, regardless of the number of parameters.
   * 'Class.newInstance()' throws any exception thrown by the
     constructor, regardless of whether it is checked or unchecked.
     'Constructor.newInstance()' always wraps the thrown exception
     with an 'InvocationTargetException'.
   * 'Class.newInstance()' requires that the constructor be visible;
     'Constructor.newInstance()' may invoke private constructors under
     certain circumstances.


File: JavaSE9.info,  Node: Arays and Enumerated Types and Reflection,  Prev: Members and Reflection,  Up: Reflection

25.4 Arrays and Enumerate Types and Reflection
==============================================

From the Java virtual machine's perspective, arrays and enumerated
types (or 'enums') are just classes.  Many of the methods in 'Class'
may be used on them.  Reflection provides a few specific APIs for
arrays and enums.  This lesson uses a series of code samples to
describe how to distinguish each of these objects from other classes
and operate on them.  Various errors are also be examined.

* Menu:

* Arrays and Reflection::
* Enumerate Types and Reflection::


File: JavaSE9.info,  Node: Arrays and Reflection,  Next: Enumerate Types and Reflection,  Up: Arays and Enumerated Types and Reflection

25.4.1 Arrays and Reflection
----------------------------

Arrays have a component type and a length (which is not part of the
type).  Arrays may be maniuplated either in their entirety or
component by component.  Reflection provides the
'java.lang.reflect.Array' class for the latter purpose.

* Menu:

* Identifying Array Types::
* Creating New Arrays::
* Getting and Setting Arrays::


File: JavaSE9.info,  Node: Identifying Array Types,  Next: Creating New Arrays,  Up: Arrays and Reflection

25.4.1.1 Identifying Array Types
................................

Array types may be identified by invoking 'Class.isArray()'.  To
obtain a 'Class' use one of the methods described in *note Retrieving
Class Objects:: section.


File: JavaSE9.info,  Node: Creating New Arrays,  Next: Getting and Setting Arrays,  Prev: Identifying Array Types,  Up: Arrays and Reflection

25.4.1.2 Creating New Arrays
............................

Just as in non-reflective code, reflection supports the ability to
dynamically create arrays of arbitrary type and dimensions via
'java.lang.reflect.Array.newInstance()'.  Consider ArrayCreator, a
basic interpreter capable of dynamically creating arrays.  The syntax
that will be parsed is as follows:

     fully_qualified_class_name variable_name[] =
     	{ val1, val2, val3, ... }


File: JavaSE9.info,  Node: Getting and Setting Arrays,  Prev: Creating New Arrays,  Up: Arrays and Reflection

25.4.1.3 Getting and Setting Arrays and Their Components
........................................................

Just as in non-reflective code, an array field may be set or retrieved
in its entirety or component by component.  To set the entire array at
once, use 'java.lang.reflect.Field.set(Object obj, Object value)'.  To
retrieve the entire array, use 'Field.get(Object)'.  Individual
components can be set or retrieved using methods in
'java.lang.reflect.Array'.

   'Array' provides methods of the form 'setFoo()' and 'getFoo()' for
setting and getting components of any primitive type.  For example,
the component of an int array may be set with 'Array.setInt(Object
array, int index, int value)' and may be retrieved with
'Array.getInt(Object array, int index)'.

Setting a Field of Type Array
.............................

Accessing Elements of a Multidimensional Array
..............................................


File: JavaSE9.info,  Node: Enumerate Types and Reflection,  Prev: Arrays and Reflection,  Up: Arays and Enumerated Types and Reflection

25.4.2 Enumerated Types and Reflection
--------------------------------------

Enums are treated very much like ordinary classes in reflection code.
'Class.isEnum()' tells whether a 'Class' represents an enum.
'Class.getEnumConstants()' retrieves the enum constants defined in an
enum.  'java.lang.reflect.Field.isEnumConstant()' indicates whether a
field is an enumerated type.

* Menu:

* Enumerated Types Reflection::


File: JavaSE9.info,  Node: Enumerated Types Reflection,  Up: Enumerate Types and Reflection

25.4.2.1 Enumerated Types in Reflection
.......................................

An "enum" is a language construct that is used to define type-safe
enumerations which can be used when a fixed set of named values is
desired.  All 'enums' implicitly extend 'java.lang.Enum'.  'Enums' may
contain one or more 'enum' constants, which define unique instances of
the 'enum' type.  An 'enum' declaration defines an 'enum' type which
is very similar to a class in that it may have members such as fields,
methods, and constructors (with some restrictions).

   Since 'enums' are classes, reflection has no need to define an
explicit java.lang.reflect.Enum class.  The only Reflection APIs that
are specific to 'enums' are 'Class.isEnum()',
'Class.getEnumConstants()', and
'java.lang.reflect.Field.isEnumConstant()'.  Most reflective
operations involving 'enums' are the same as any other class or
member.  For example, 'enum' constants are implemented as 'public
static final' fields on the 'enum'.  The following sections show how
to use 'Class' and 'java.lang.reflect.Field' with 'enums'.

Examining Enums
...............

Illustrates how to retrieve an enum's constants and any other fields,
constructors, and methods

   Reflection provides three enum-specific APIs:

'Class.isEnum()'
     Indicates whether this class represents an enum type
'Class.getEnumConstants()'
     Retrieves the list of enum constants defined by the enum in the
     order they're declared
'java.lang.reflect.Field.isEnumConstant()'
     Indicates whether this field represents an element of an
     enumerated type

   Sometimes it is necessary to dynamically retrieve the list of enum
constants; in non-reflective code this is accomplished by invoking the
implicitly declared static method 'values()' on the enum.  If an
instance of an 'enum' type is not available the only way to get a list
of the possible values is to invoke 'Class.getEnumConstants()' since
it is impossible to instantiate an 'enum' type.

Getting and Setting Fields with Enum Types
..........................................

Shows how to set and get fields with an enum constant value

   Fields which store 'enums' are set and retrieved as any other
reference type, using 'Field.set()' and 'Field.get()'.  For more
information on accessing fields, see the Fields section.  *Note
reflect Fields::


File: JavaSE9.info,  Node: Introducing Swing,  Next: Exploring Swing,  Prev: Reflection,  Up: Top

26 Introducing Swing
********************


File: JavaSE9.info,  Node: Exploring Swing,  Next: Swing Menus,  Prev: Introducing Swing,  Up: Top

27 Exploring Swing
******************


File: JavaSE9.info,  Node: Swing Menus,  Next: Introducing JavaFX,  Prev: Exploring Swing,  Up: Top

28 Introducing Swing Menus
**************************


File: JavaSE9.info,  Node: Introducing JavaFX,  Next: Exploring JavaFX Controls,  Prev: Swing Menus,  Up: Top

29 Introducing JavaFX GUI Programming
*************************************


File: JavaSE9.info,  Node: Exploring JavaFX Controls,  Next: Introducing JavaFX Menus,  Prev: Introducing JavaFX,  Up: Top

30 Exploring JavaFX Controls
****************************


File: JavaSE9.info,  Node: Introducing JavaFX Menus,  Next: Java Beans,  Prev: Exploring JavaFX Controls,  Up: Top

31 Introducing JavaFX Menus
***************************


File: JavaSE9.info,  Node: Java Beans,  Next: Servlets,  Prev: Introducing JavaFX Menus,  Up: Top

32 Java Beans
*************


File: JavaSE9.info,  Node: Servlets,  Next: javadoc,  Prev: Java Beans,  Up: Top

33 Introducing Servlets
***********************


File: JavaSE9.info,  Node: javadoc,  Next: Java Web Start,  Prev: Servlets,  Up: Top

Appendix A Using Java's Documentation Comments
**********************************************

Java supports three types of comments.

   * '//'
   * '/* */'
   * '/** */'

   The third is called a "documwentation comment".  Documentation
comments allow you to embed information about your program into the
program itself.  You can then use the 'javadoc' utility progrm to
extract the information and put it into an HTML file.  Documentation
comments make it convenient to document your programs.  Beginning with
JDK 9,m 'javadoc' includes support for modules.

* Menu:

* javadoc Documentation Tags::
* Documentation Comment General Form::
* What javadoc Outputs::
* Documentation Comments Example::
* javadoc Tool::
* javadoc Command::


File: JavaSE9.info,  Node: javadoc Documentation Tags,  Next: Documentation Comment General Form,  Up: javadoc

A.1 'javadoc' Documentation Tags
================================

The 'javadoc' utility recognizes several tags, including:

@author            Identifies the author.
{@code}            Displays information as-is, without processing HTML
                   styles, in code font.
@deprecated        Specifies that a program element is deprecated.
{@docRoot}         Specifies the path to the root directory of the
                   current documentation.
@exception         Identifies an exception thrown by a method or
                   constructor.
@hidden            Prevents an element from appearing in the
                   documentation.  (Added by JDK 9.)
{@index}           Specifies a term for indexing.  (Added by JDK 9.)
{@inheritDoc}      Inherits a comment from the immediate superclass.
{@link}            Inserts an in-line link to another topic.
{@linkplain}       Inserts an in-line link to another topic, but the
                   link is displayed in a plain-text font.
{@literal}         Displays information as-is without processing HTML
                   styles.
@param             Documents a parameter.
@provides          Documents a service provided by a module.  (Added
                   by JDK 9.)
@return            Doicuments a method's return value.
@see               Specifies a link to another topic.
@serial            Documents a default serializable field.
@serialData        Documents the data written by the 'writeObject()'
                   or 'writeExternal()' methods.
@serialField       Dcouments an 'ObjectStreamField' component.
@since             States the release when a specific change was
                   introduced.
@throws            Same as '@exception'.
@uses              Documents a service needed by a module.  (Added by
                   JDK 9.)
{@value}           Displays the value of a constant, which must be a
                   'static' field.
@version           Specifies the version of a program element.

Table A.1: The 'javadoc' Tags

   Document tags that begin with an "at" sign '@' are called
"stand-alone" tags (also called "block" tags), and they must be used
on their own line.  Tags that begin with a brace, such as '{@code}',
are called "in-line" tags, and they can be used within a larger
description.  You may also use other, standard HTML tags in a
documentation comment.  However, some tags, such as headings, should
not be used because they disrupt the look of the HTML file produced by
'javadoc'.

   You can use documentation comments to document classes, interfaces,
fields, constructors, methods, and modules.  In all cases, the
documentation comment must immediately prcede the item being
documented.  Some tags, such as '@see', '@since', and '@deprecated',
can be used to document any element.  Other tags apply only to the
relevant elements.

* Menu:

* @author::
* @code::
* @deprecated::
* @docRoot::
* @exception::
* @hidden::
* @index::
* @inheritDoc::
* @link::
* @linkplain::
* @literal::
* @provides::
* @return::
* @see::
* @serial::
* @serialData::
* @serialField::
* @since::
* @throws::
* @uses::
* @value::
* @version::


File: JavaSE9.info,  Node: @author,  Next: @code,  Up: javadoc Documentation Tags

A.1.1 '@author'
---------------

The '@author' tag documents the author of a program element.  It has
the following syntax:

     @author 'description'

   The description will usually be the name of the author.  You will
need to specify the '-author' option when executing 'javadoc' in order
for the '@author' field to be included in the HTML documentation.


File: JavaSE9.info,  Node: @code,  Next: @deprecated,  Prev: @author,  Up: javadoc Documentation Tags

A.1.2 '{@code}'
---------------

The '{@code}' tag enables you to embed text, such as a snippet of
code, into comment.  That text is then displayed as-is in code font,
without any furhter processsing, such as HTML rendering.  It has the
following syntax:

     '{@code 'code-snippet'}'


File: JavaSE9.info,  Node: @deprecated,  Next: @docRoot,  Prev: @code,  Up: javadoc Documentation Tags

A.1.3 '@deprecated'
-------------------

The '@deprecated' tag specifies that a program element is deprecated.
It is recommended that you include '@see' or '{@link}' tags to inform
the programmer about available alternatives.  The syntax is:

     @deprecated 'description'


File: JavaSE9.info,  Node: @docRoot,  Next: @exception,  Prev: @deprecated,  Up: javadoc Documentation Tags

A.1.4 '{@docRoot}'
------------------

'{@docRoot}' specifies the path to to the root directory of the
current documentation.


File: JavaSE9.info,  Node: @exception,  Next: @hidden,  Prev: @docRoot,  Up: javadoc Documentation Tags

A.1.5 '@exception'
------------------

The '@exception' tag describes an exception to a method.  It has the
following syntax:

     @exception 'exception-name explanation'

   Here, the fully qualified name of the exception is specified by an
'exception-name' and 'explanation' is a string that describes how the
exception can occur.  It can be used only in documentation for a
method or constructor.


File: JavaSE9.info,  Node: @hidden,  Next: @index,  Prev: @exception,  Up: javadoc Documentation Tags

A.1.6 '@hidden'
---------------

The '@hidden' tag prevents an element from appearing in the
documentation.


File: JavaSE9.info,  Node: @index,  Next: @inheritDoc,  Prev: @hidden,  Up: javadoc Documentation Tags

A.1.7 '{@index}'
----------------

The '{@index}' tag specifies an item that will be indexed and
returned, and thus found when using the search feature added by JDK 9.
It has the following syntax:

     { @index 'term usage-str' }

   Here, 'term' is the item (which can be a quoted string) to be
indexed; 'usage-str' is optional.  Thus, in the following '@exception'
tag, '{@index}' causes the "error" to be added to the index:

     @exception IOException On input {@index error}

   Note that the word "error" is still displayed as part of the
description.  Now it is also indexed.  If you include the optional
'usage-str', then that description will be shown in the index and in
the search box to indicate how the term is used.


File: JavaSE9.info,  Node: @inheritDoc,  Next: @link,  Prev: @index,  Up: javadoc Documentation Tags

A.1.8 '{@inheritDoc}'
---------------------

This tag inherits a comment from the immediate superclass.


File: JavaSE9.info,  Node: @link,  Next: @linkplain,  Prev: @inheritDoc,  Up: javadoc Documentation Tags

A.1.9 '{@link}'
---------------

The '{@link}' tag prvoides an in-line link to additional information.
It has the following syntax:

     {@link 'pkg.class#member text'}

   Here, 'pkg.class#member' specifies the name of a class or method to
which a link is added, and 'text' is the string that is displayed.


File: JavaSE9.info,  Node: @linkplain,  Next: @literal,  Prev: @link,  Up: javadoc Documentation Tags

A.1.10 '{@linkplain}'
---------------------

Inserts an in-line link to another topic.  The link is displayed in
plain-text font.  Otherwise it is similar to '{@link}'.


File: JavaSE9.info,  Node: @literal,  Next: @provides,  Prev: @linkplain,  Up: javadoc Documentation Tags

A.1.11 '{@literal}'
-------------------

The '{@literal}' tag enables you to embed text into a comment.  That
text is then displayed as-is, without any further processing, such as
HTML rendering.  It has the following syntax:

     {@literal 'description'}

   Here, 'description' is the text that is embedded.


File: JavaSE9.info,  Node: @param

'@param'

   The '@param' tag documents a parameter.  It has the following
syntax:

     @param 'parameter-name explanation'

   Here, 'paramter-name' specifies the name of a parameter.  That
meaning of that parameter is described by 'explanation'.  The '@param'
tag can be used only in documentation for a method or constructor, or
a generic class or interface.


File: JavaSE9.info,  Node: @provides,  Next: @return,  Prev: @literal,  Up: javadoc Documentation Tags

A.1.12 '@provides'
------------------

The '@provides' tag documents a service provided by a module.  It has
the following syntax:

     @provides 'type explanation'

   Here, 'type' specifies a service provider type and 'explanation'
describes the service provider.


File: JavaSE9.info,  Node: @return,  Next: @see,  Prev: @provides,  Up: javadoc Documentation Tags

A.1.13 '@return'
----------------

The '@return' tag describes the return value of a method.  It has the
following syntax:

     @return 'explanation'

   Here, 'explanation' describes the type and meaning of the value
returned by a method.  The '@return' tag can be used only in
documentation for a method.


File: JavaSE9.info,  Node: @see,  Next: @serial,  Prev: @return,  Up: javadoc Documentation Tags

A.1.14 '@see'
-------------

The '@see' tag provides a reference to additional information.  Two
commonly used forms are shown here:

     @see 'anchor'
     @see 'pkg.class#member text'

   In the first form, 'anchor' is a link to an absolute or relative
URL. In the second form, 'pkg.class#member' specifies the name of the
item, and 'text' is the text displayed for that item.  The text
parameter is optional and if not used, then the item specified by
'pkg.class#member' is displayed.  The member name, too, is optional.
Thus, you can specify a reference to a package, class, or interface in
addition to a refernce to a specific method or field.  The name can be
fully qualified or partially qualified.  However, the dot that
precedes the member name (if it exists) must be replaced by a hash
character.


File: JavaSE9.info,  Node: @serial,  Next: @serialData,  Prev: @see,  Up: javadoc Documentation Tags

A.1.15 '@serial'
----------------

The '@serial' tag defines the comment for a default serializable
field.  It has the following syntax:

     @serial 'description'

   'description' is the comment for that field.


File: JavaSE9.info,  Node: @serialData,  Next: @serialField,  Prev: @serial,  Up: javadoc Documentation Tags

A.1.16 '@serialData'
--------------------

The '@serialData' tag documents the data written by the
'writeObject()' and 'writeExternal()' methods.  It has the following
syntax:

     @serialData 'description'

   'description' is the comment for that data.


File: JavaSE9.info,  Node: @serialField,  Next: @since,  Prev: @serialData,  Up: javadoc Documentation Tags

A.1.17 '@serialField'
---------------------

For a class that implements 'Serializable', the '@serialField' tag
provides comments for an 'ObjectStreamField' component.  It has the
following syntax:

     @serialField 'name type description'

   'name' is the name of the field, 'type' is its type, and
'description' is the comment for that field.


File: JavaSE9.info,  Node: @since,  Next: @throws,  Prev: @serialField,  Up: javadoc Documentation Tags

A.1.18 '@since'
---------------

The '@since' tag states that an element was introduced in a specific
release.  It has the following syntax:

     @since 'release'

   'release' is a string that designates the release or version in
which this feature became available.


File: JavaSE9.info,  Node: @throws,  Next: @uses,  Prev: @since,  Up: javadoc Documentation Tags

A.1.19 '@throws'
----------------

The '@throws' tag has the same meaning as the '@exception' tag.


File: JavaSE9.info,  Node: @uses,  Next: @value,  Prev: @throws,  Up: javadoc Documentation Tags

A.1.20 '@uses'
--------------

The '@uses' tag documents a service provider neede by a module.  It
has the following syntax:

     @uses 'type explanation'

   'type' specifies a service provider type and 'explanation'
describes the service.


File: JavaSE9.info,  Node: @value,  Next: @version,  Prev: @uses,  Up: javadoc Documentation Tags

A.1.21 '{@value}'
-----------------

'{@value}' has two forms.  The first displays the value of the
constant that it precedes, which must be a 'static' field.  It has
this form:

     {@value}

   The second form displays the value of a specified 'static' field.
It has the form:

     {@value 'pkg.class#field'}

   'pkg.class#field' specifies the name of the 'static' field.


File: JavaSE9.info,  Node: @version,  Prev: @value,  Up: javadoc Documentation Tags

A.1.22 '@version'
-----------------

The '@version' tag specifies the version information, typically a
version number, such as 2.2.  You will need to specify the '-version'
option when executing 'javadoc' in order for the '@version' field to
be included in the HTML documentation.


File: JavaSE9.info,  Node: Documentation Comment General Form,  Next: What javadoc Outputs,  Prev: javadoc Documentation Tags,  Up: javadoc

A.2 The General Form of a Documentation Comment
===============================================

After the beginning '/**', the first line or lines become the main
description of your class, interface, field, constructor, method, or
module.  After that, you can include one or more the various @ tags.
Each @ tag must start at the beginning of a new line or follow one or
more asterisks ('**') that are at the start of a line.  Multiple tags
of the same type should be grouped together.  In-line tags (thse that
being with a brace ('{') can be used within any description.


File: JavaSE9.info,  Node: What javadoc Outputs,  Next: Documentation Comments Example,  Prev: Documentation Comment General Form,  Up: javadoc

A.3 What 'javadoc' Outputs
==========================

The 'javadoc' program takes as input your Java program's source file
and outputs several HTML files that contain the program's
documentation.  Information about each class will be in its own HTML
file.  'javadoc' will also output an index and a hierarchy tree.
Other HTML files can be generated.  Beginning with JDK 9, a search box
feature is also included.


File: JavaSE9.info,  Node: Documentation Comments Example,  Next: javadoc Tool,  Prev: What javadoc Outputs,  Up: javadoc

A.4 An Example that Uses Documentatation Comments
=================================================

Following is a sample program that uses documentation comments.
Notice the way each comment immediately precedes the item that it
describes.  After begin processed by 'javadoc', the documentation
about the 'SquareNum' class will be found in 'SquareNum.html'.

'SquareNum.java'
----------------

{'SquareNum.java'} ==
     <Import java.io>

     <SquareNum--SquareNum Class>

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<Import java.io>          See *note Import-java-io::.
<SquareNum--SquareNum     See *note SquareNum---SquareNum-Class::.
Class>

* Menu:

* SquareNum---SquareNum Class::
* SquareNum---square() Method::
* SquareNum---getNumber() Method::
* SquareNum---main() Method::


File: JavaSE9.info,  Node: SquareNum---SquareNum Class,  Next: SquareNum---square() Method,  Up: Documentation Comments Example

A.4.1 SquareNum--SquareNum Class
--------------------------------

<SquareNum--SquareNum Class> ==
     <SquareNum--SquareNum Class-Documentation>
     <SquareNum--SquareNum Class-Body>


This chunk is called by {'SquareNum.java'}; see its first definition
at *note SquareNum-java::.

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<SquareNum--SquareNum     See
Class-Body>               *note SquareNum---SquareNum-Class--Body::.
<SquareNum--SquareNum     See
Class-Documentation>      *note SquareNum---SquareNum-Class--Documentation::.

* Menu:

* SquareNum---SquareNum Class--Documentation::


File: JavaSE9.info,  Node: SquareNum---SquareNum Class--Documentation,  Up: SquareNum---SquareNum Class

A.4.1.1 SquareNum--SquareNum Class-Documentation
................................................

<SquareNum--SquareNum Class-Documentation> ==
     /**
        This class demonstrates documentation comments.
        @author Herbert Schildt
        @version 1.2
      */

This chunk is called by <SquareNum--SquareNum Class>; see its first
definition at *note SquareNum---SquareNum-Class::.

SquareNum--SquareNum Class-Body
...............................

<SquareNum--SquareNum Class-Body> ==
     public class SquareNum {
       <SquareNum--square() Method>
       <SquareNum--getNumber() Method>
       <SquareNum--main() Method>
     }

This chunk is called by <SquareNum--SquareNum Class>; see its first
definition at *note SquareNum---SquareNum-Class::.

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<SquareNum--getNumber()   See *note SquareNum---getNumber---Method::.
Method>
<SquareNum--main()        See *note SquareNum---main---Method::.
Method>
<SquareNum--square()      See *note SquareNum---square---Method::.
Method>


File: JavaSE9.info,  Node: SquareNum---square() Method,  Next: SquareNum---getNumber() Method,  Prev: SquareNum---SquareNum Class,  Up: Documentation Comments Example

A.4.2 SquareNum--square() Method
--------------------------------

<SquareNum--square() Method> ==
       <SquareNum--square() Method-Documentation>
       <SquareNum--square() Method-Body>

This chunk is called by <SquareNum--SquareNum Class-Body>; see its
first definition at *note SquareNum---SquareNum-Class--Body::.

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<SquareNum--square()      See
Method-Body>              *note SquareNum---square---Method--Body::.
<SquareNum--square()      See
Method-Documentation>     *note SquareNum---square---Method--Documentation::.

* Menu:

* SquareNum---square() Method Doc and Body::


File: JavaSE9.info,  Node: SquareNum---square() Method Doc and Body,  Up: SquareNum---square() Method

SquareNum--square() Method Doc and Body
.......................................

SquareNum--square() Method-Documentation 
.........................................

<SquareNum--square() Method-Documentation> ==
     /**
        This method returns the square of num.
        This is a multiline description.  You can use
        as many lines as you like.
        @param num The value to be squared.
        @return num squared.
      */

This chunk is called by <SquareNum--square() Method>; see its first
definition at *note SquareNum---square---Method::.

SquareNum--square() Method-Body
...............................

<SquareNum--square() Method-Body> ==
       public double square(double num) {
         return num * num;
       }


This chunk is called by <SquareNum--square() Method>; see its first
definition at *note SquareNum---square---Method::.


File: JavaSE9.info,  Node: SquareNum---getNumber() Method,  Next: SquareNum---main() Method,  Prev: SquareNum---square() Method,  Up: Documentation Comments Example

A.4.3 SquareNum--getNumber() Method
-----------------------------------

<SquareNum--getNumber() Method> ==
       <SquareNum--getNumber() Method-Documentation>
       <SquareNum--getNumber() Method-Body>

This chunk is called by <SquareNum--SquareNum Class-Body>; see its
first definition at *note SquareNum---SquareNum-Class--Body::.

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<SquareNum--getNumber()   See
Method-Body>              *note SquareNum---getNumber---Method--Body::.
<SquareNum--getNumber()   See
Method-Documentation>     *note SquareNum---getNumber---Method--Documentation::.

* Menu:

* SquareNum---getNumber() Method Doc and Body::


File: JavaSE9.info,  Node: SquareNum---getNumber() Method Doc and Body,  Up: SquareNum---getNumber() Method

A.4.3.1 SquareNum--getNumber() Method Doc and Body
..................................................

SquareNum--getNumber() Method-Documentation
...........................................

<SquareNum--getNumber() Method-Documentation> ==
     /**
        This method inputs a number from the user.
        @return The value input as a double.
        @exception IOException On input error.
        @see IOException
      */

This chunk is called by <SquareNum--getNumber() Method>; see its first
definition at *note SquareNum---getNumber---Method::.

SquareNum--getNumber() Method-Body
..................................

<SquareNum--getNumber() Method-Body> ==
     public double getNumber() throws IOException {
       // create a BufferedReader using System.in
       InputStreamReader isr = new InputStreamReader (System.in);
       BufferedReader inData = new BufferedReader(isr);
       String str;

       str = inData.readline();
       return (new Double(str)).doubleValue();
     }


This chunk is called by <SquareNum--getNumber() Method>; see its first
definition at *note SquareNum---getNumber---Method::.


File: JavaSE9.info,  Node: SquareNum---main() Method,  Prev: SquareNum---getNumber() Method,  Up: Documentation Comments Example

A.4.4 SquareNum--main() Method
------------------------------

<SquareNum--main() Method> ==
       <SquareNum--main() Method-Documentation>
       <SquareNum--main() Method-Body>

This chunk is called by <SquareNum--SquareNum Class-Body>; see its
first definition at *note SquareNum---SquareNum-Class--Body::.

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<SquareNum--main()        See *note SquareNum---main---Method--Body::.
Method-Body>
<SquareNum--main()        See
Method-Documentation>     *note SquareNum---main---Method--Documentation::.

SquareNum--main() Method-Documentation
......................................

<SquareNum--main() Method-Documentation> ==
     /**
        This method demonstrates square().
        @param args Unused.
        @exception IOException On input error.
        @see IOException
      */

This chunk is called by <SquareNum--main() Method>; see its first
definition at *note SquareNum---main---Method::.

SquareNum--main() Method-Body
.............................

<SquareNum--main() Method-Body> ==
     public static void main(String[] args) {
       SquareNum ob = new SquareNum();
       double val;

       System.out.println("Enter value to be squared: ");
       val = ob.getNumber();
       val = ob.square(val);

       System.out.println("Square value is " + val);
     }

This chunk is called by <SquareNum--main() Method>; see its first
definition at *note SquareNum---main---Method::.


File: JavaSE9.info,  Node: javadoc Tool,  Next: javadoc Command,  Prev: Documentation Comments Example,  Up: javadoc

A.5 'javadoc' Tool
==================

The javadoc tool is a program that reads a collection of source files
into an internal form.  The structure is:

     (source-files)->[javadoc-tool:doclet]->(generated files)

Doclet
------

The Javadoc doclet is like a pluggable back end that analyzes this
internal form with some goal in mind.  It can generate HTML, MIF, or
XML files, depending on the doclet.  The content of the generated
files is specific to the doclet.  The standard doclet generates HTML
documentation, but a different doclet, for example, could generate a
report of misspelled words or grammatical errors.

Using the 'javadoc' Tool
------------------------

To use the javadoc tool, you must:

   * Write source code, containing documentation comments.
     Documentation comments are formatted in HTML and are interspersed
     with the 'javadoc' tool.
   * Run the javadoc tool.  You need to specify a doclet to analyze
     the documentation comments and any other special tags.  However,
     if you don’t specify any doclet, by default, the 'Standard
     Doclet' is included.  You specify a number of command-line
     options, some of which are directed at the javadoc tool itself,
     and some of which are specific to the selected doclet.  When the
     standard doclet is used, the output generated by the standard
     doclet consists of a series of HTML pages.

Javadoc Features
----------------

Javadoc features include the following:
   * Javadoc search,
   * support for generating HTML5 output,
   * support for documentation comments in module systems, and
   * simplified Doclet API.

* Menu:

* Javadoc Search::
* Javadoc Module System::
* Simplified Doclet API::


File: JavaSE9.info,  Node: Javadoc Search,  Next: Javadoc Module System,  Up: javadoc Tool

A.5.1 Javadoc Search
--------------------

The 'javadoc' tool runs the doclet that may generate output.  The
standard doclet generates output that lets you search the generated
documentation.  A search box is available on the generated APIs and
provides the following:

   * You can search for elements and additional key phrases defined in
     the API
   * Results, including results that exactly match the entered
     characters followed by results that contains the entered
     characters anywhere in the string.  Multiple results with
     different program element names are displayed if the search term
     or a phrase is inherited using the @inheritDoc tag.  Results are
     categorized as follows, for easier classification and appropriate
     user selection:
        * Modules
        * Packages
        * Types
        * Members
        * Search Tags
   * Page redirection based on user selection.

   You can search for the following:

   * Declared names of modules, packages, types, and members.  Because
     methods can be overloaded, the simple names of method parameter
     types are also indexed and can be searched for.  The method
     parameter names can’t be indexed.
   * A search term or a phrase indexed using a new inline tag, @index.
     You can only search a phrase or search term marked with @index
     within a declaration's 'javadoc' comment.  Tagging is achieved
     using {@index ulps}.


File: JavaSE9.info,  Node: Javadoc Module System,  Next: Simplified Doclet API,  Prev: Javadoc Search,  Up: javadoc Tool

A.5.2 Javadoc Module System
---------------------------

The 'javadoc' tool supports documentation comments in module
declarations.  Some Javadoc command-line options enable you to specify
the set of modules to document and generate a new summary page for any
modules being documented.  It has new command-line options to
configure the set of modules to be documented and generates a new
summary page for any modules being documented.  See 'javadoc' Doclet
Options.


File: JavaSE9.info,  Node: Simplified Doclet API,  Prev: Javadoc Module System,  Up: javadoc Tool

A.5.3 Simplified Doclet API
---------------------------

The Doclet API uses powerful APIs that can better represent all the
language features.  *Note Standard Doclet Options: Standard Doclet.


File: JavaSE9.info,  Node: javadoc Command,  Prev: javadoc Tool,  Up: javadoc

A.6 'javadoc' Command
=====================

The 'javadoc' command-line synopsis is

javadoc [options] [packagenames] [sourcefiles] [@files]

   The options can either be 'Doclet' options or 'Standard Doclet'
options.  The 'javadoc' command can also be run programmatically.

* Menu:

* Javadoc Doclets::
* Standard Doclet::
* Examples Javadoc Command::


File: JavaSE9.info,  Node: Javadoc Doclets,  Next: Standard Doclet,  Up: javadoc Command

A.6.1 Javadoc Doclets
---------------------

You use the 'javadoc' tool and its options to generate HTML pages of
API documentation from Java source files.

   The 'javadoc' command uses doclets to determine its output and the
default Standard Doclet unless a custom doclet is specified with the
'-doclet' option.  While option names are not case-sensitive, their
arguments are.

Synopsis
--------

     javadoc  [packages|source-files] [options][@files]

packages
........

Names of packages that you want to document, separated by spaces, for
example 'java.lang java.lang.reflect java.awt'.  If you want to also
document the subpackages, then use the '-subpackages' option to
specify them.

   By default, the 'javadoc' command looks for the specified packages
in the current directory and subdirectories.  Use the '-sourcepath'
option to specify the list of directories where to look for packages.

source-files
............

Names of Java source files that you want to document, separated by
spaces, for example, 'Class.java Object.java Button.java'.  By
default, the 'javadoc' command looks for the specified classes in the
current directory.  However, you can specify the full path to the
class file and use wildcard characters, for example
'/home/src/java/awt/Graphics*.java'.  You can also specify the path
relative to the current directory.

options
.......

Command-line options, separated by spaces.

@files
......

Names of files that contain a list of 'javadoc' command options,
package names, and source file names in any order.

* Menu:

* Description::
* Conformance::
* Process Source Files::
* Processing Links::
* Processing Details::
* Customizing javadoc Output with Doclets::
* Doclet Core Options::


File: JavaSE9.info,  Node: Description,  Next: Conformance,  Up: Javadoc Doclets

A.6.1.1 Description
...................

The 'javadoc' command parses the declarations and documentation
comments in a set of Java source files and produces a corresponding
set of HTML pages that describe (by default)

   * the public and protected classes,
   * nested classes (but not anonymous inner classes),
   * interfaces,
   * constructors,
   * methods, and
   * fields.

   You can use the 'javadoc' command to generate the
   * API documentation or
   * the implementation documentation

   for a set of source files.

   You can run the 'javadoc' command on entire packages, individual
source files, or both.  When documenting entire packages, you can use
either the '-subpackages' option to recursively traverse a directory
and its subdirectories, or to pass in an explicit list of package
names.  When you document individual source files, pass in a list of
Java source file names.


File: JavaSE9.info,  Node: Conformance,  Next: Process Source Files,  Prev: Description,  Up: Javadoc Doclets

A.6.1.2 Conformance
...................

The Standard Doclet does not validate the content of documentation
comments for conformance, nor does it attempt to correct any errors in
documentation comments.

   The Standard Doclet does provide the 'doclint' feature to help
developers detect common problems in documentation comments.


File: JavaSE9.info,  Node: Process Source Files,  Next: Processing Links,  Prev: Conformance,  Up: Javadoc Doclets

A.6.1.3 Process Source Files
............................

The 'javadoc' command processes files that end in the source file
extension and other files described in Source Files.  If you run the
javadoc command by passing in individual source file names, then you
can determine exactly which source files are processed.  However, that
isn't how most developers want to work because it's simpler to pass in
package names.

   The 'javadoc' command can be run three ways, without explicitly
specifying the source file names.

  1. You can pass in package names,
  2. use the '-subpackages' option, or
  3. use wild cards with source file names.

   In these cases, the 'javadoc' command processes a source file only
when the file fulfills all of the following requirements:

   * The file name prefix (with '.java' removed) is a valid class
     name.
   * The path name relative to the root of the source tree is a valid
     package name after the separators are converted to dots.
   * The package statement contains the valid package name.


File: JavaSE9.info,  Node: Processing Links,  Next: Processing Details,  Prev: Process Source Files,  Up: Javadoc Doclets

A.6.1.4 Processing Links
........................

During a run, the 'javadoc' command adds cross-reference links to
package, class, and member names that are being documented as part of
that run.  Links appear in the following places:

   * Declarations (return types, argument types, and field types)
   * See Also sections that are generated from @see tags
   * Inline text generated from {@link} tags
   * Exception names generated from @throws tags
   * 'Specified by' links to interface members and 'Overrides' links
     to class members
   * Summary tables listing packages, classes, and members
   * Package and class inheritance trees
   * The index


File: JavaSE9.info,  Node: Processing Details,  Next: Customizing javadoc Output with Doclets,  Prev: Processing Links,  Up: Javadoc Doclets

A.6.1.5 Processing Details
..........................

The 'javadoc' command produces one complete document every time it
runs.  It doesn't perform incremental builds that modify or directly
incorporate the results from earlier runs.  However, the 'javadoc'
command can link to results from other runs.

Reliance Upon 'javac' Compiler
..............................

   * The 'javadoc' command implementation requires and relies on the
     Java compiler.
   * The 'javadoc' command calls part of the 'javac' command to
     compile the declarations and ignore the member implementations.
   * The 'javadoc' command builds a rich internal representation of
     the classes that includes the class hierarchy and use
     relationships to generate the HTML documentation.
   * The 'javadoc' command also picks up user-supplied documentation
     from documentation comments in the source code.
   * The 'javadoc' command can run on source files that are pure stub
     files with no method bodies.  This means that you can write
     documentation comments and run the javadoc command in the early
     stages of design before API implementation.

   Relying on the compiler ensures that the HTML output corresponds
exactly with the actual implementation, which may rely on implicit,
rather than explicit, source code.  For example, the javadoc command
documents default constructors that are present in the compiled class
files but not in the source code.

   In many cases, the 'javadoc' command lets you generate
documentation for source files with incomplete or erroneous code.  You
can generate documentation before any debugging and troubleshooting is
done.  The 'javadoc' command does primitive checking of documentation
comments.

   When the 'javadoc' command builds its internal structure for the
documentation, it loads all referenced classes.  Because of this, the
'javadoc' command must be able to find all referenced classes, and
whether they're bootstrap classes, extensions, or user classes.


File: JavaSE9.info,  Node: Customizing javadoc Output with Doclets,  Next: Doclet Core Options,  Prev: Processing Details,  Up: Javadoc Doclets

A.6.1.6 Customizing 'javadoc' Output with Doclets
.................................................

You can customize the content and format of the 'javadoc' command
output with 'doclets'.  The 'javadoc' command has a default built-in
'doclet', called the 'Standard Doclet', that generates HTML-formatted
API documentation.  You can write your own 'doclet' to generate HTML,
XML, MIF, RTF or whatever output format you want.

   When a custom 'doclet' isn't specified with the '-doclet' option,
the 'javadoc' command uses the default 'Standard Doclet'.  The
'javadoc' command has several options that are available regardless of
which 'doclet' is being used.  The 'Standard Doclet' adds a
supplementary set of command-line options.

   The 'javadoc' tool supports documentation comments in module
declarations.  It has command-line options, such as

   * '--module-path',
   * '--upgrade-module-path', or
   * '--module-source-path'

to configure the set of modules to be documented, and generates a new
summary page for any modules being documented.  The module-related
options are available for generating documentation.


File: JavaSE9.info,  Node: Doclet Core Options,  Prev: Customizing javadoc Output with Doclets,  Up: Javadoc Doclets

A.6.1.7 Doclet Core Options
...........................

The following options are the "core options" that are available to all
doclets:

'--add-modules module(,module)*'
     Specifies the root modules to resolve in addition to the initial
     modules, or all modules on the module path if '<module>' is
     'ALL-MODULE-PATH'.
'--add-exports module/package=other-module(,other-module)*'
     Specifies a package that's to be considered as exported from its
     defining module to additional modules, or to all unnamed modules
     if 'other-module' is 'ALL-UNNAMED'.
'--add-reads module/package=other-module(,other-module)'
     Specifies additional modules to be considered as required by a
     given module.  'other-module' is 'ALL-UNNAMED' to require the
     unnamed module.
'-bootclasspath classpathlist'
     Specifies the paths where the boot classes reside.  These are
     typically the Java platform classes.  The 'bootclasspath' is part
     of the search path that the 'javadoc' command uses to look up
     source and class files.(1)

     To separate directories in the classpathlist parameters, use one
     of the following delimiters:

     'Oracle Solaris, Linux, and macOS:'
          colon (':')
     'Windows'
          semicolon (';')

'-breakiterator'
     Uses the internationalized sentence boundary of
     'java.text.BreakIterator' to determine the end of the first
     sentence in the main description of a package, class, or member
     for English.  All other locales already use the 'BreakIterator'
     class, rather than an English language, locale-specific
     algorithm.  The first sentence is copied to the package, class,
     or member summary and to the alphabetic index.  The
     'BreakIterator' class is used to determine the end of a sentence
     for all languages except for English as follows:
        * English default sentence-break algorithm: Stops at a period
          followed by a space or an HTML block tag, such as '<P>'.
        * Break iterator sentence-break algorithm: Stops at a period,
          question mark, or exclamation point followed by a space when
          the next word starts with a capital letter.  This is meant
          to handle most abbreviations (such as "The serial no.  is
          valid", but won't handle "Mr.  Smith").  The
          '-breakiterator' option doesn't stop at HTML tags or
          sentences that begin with numbers or symbols.  The algorithm
          stops at the last period in '../filename', even when it's
          embedded in an HTML tag.
        * A question mark always ends the first sentence: If a double
          quotation mark follows the question mark, then the double
          quotation mark also gets included in the first sentence, but
          that character then ends the sentence.
'-classpath path or --class-path path or -cp path'
     Specifies the paths where the 'javadoc' command searches for
     referenced classes.  These are the documented classes plus any
     classes referenced by those classes.

     'CLASSPATH' is the environment variable that provides the path
     that the 'javadoc' command uses to find user class files.  This
     environment variable is overridden by the '-classpath' option.
     To separate directories, use one of the following delimiters: a
     semicolon for Windows or a colon for Oracle Solaris.

     The 'javadoc' command searches all subdirectories of the
     specified paths.

     If you omit '-sourcepath', then the 'javadoc' command uses
     '-classpath' to find the source files and class files (for
     backward compatibility).  If you want to search for source and
     class files in separate paths, then use both '-sourcepath' and
     '-classpath'.

     For example, if you want to document 'com.mypackage', whose
     source files reside in the directory
     '/home/user/src/com/mypackage', and if this package relies on a
     library in '/home/user/lib', then you use the following command:

          javadoc -sourcepath /home/user/src -classpath /home/user/lib com.mypackage

     Similar to other tools, if you don't specify '-classpath', then
     the 'javadoc' command uses the 'CLASSPATH' environment variable
     when it's set.  If both aren't set, then the 'javadoc' command
     searches for classes from the current directory.

     A class path element that contains a base name of '*' is
     considered equivalent to specifying a list of all the files in
     the directory with the extension '.jar' or '.JAR'.

     For example, if the directory 'mydir' contains 'a.jar' and
     'b.jar', then the class path element 'foo/*' is expanded to a
     'a.jar:b.JAR', except that the order of JAR files is unspecified.
     All JAR files in the specified directory including hidden files
     are included in the list.  A class path entry that consists of
     '*' expands to a list of all the JAR files in the current
     directory.  The 'CLASSPATH' environment variable is similarly
     expanded.  Any class path wildcard expansion occurs before the
     Java Virtual Machine (JVM) starts.  No Java program ever sees
     unexpanded wild cards except by querying the environment, for
     example, by calling 'System.getenv ("CLASSPATH")'.

'-doclet class'
'-docletpath path'
'-encoding name'
'-exclude pkglist'
'--expand-requires value'
'-extdirs dirlist'
'-help OR --help'
'-J flag'
'--limit-modules module(,module)*'
'-locale name'
'--module module(,module)*'
'--module-path path OR -p path'
'--module-source-path path'
'-package'
'--patch-module module=file(file*)'
'-private'
'-protected'
'-public'
'-quiet'
'--release release'
'--show-members value'
'--show-module-contents value'
'--show-packages value'
'--show-types value'
'-source release'
'--source-path path OR -sourcepath path'
'-subpackages subpkglist'
'--system jdk'
'--upgrade-module-path path'
'-verbose'
'—X'
'-Xmaxerrs number'
'-Xmaxwarns number'
'-Xold'
'-javafx'

   ---------- Footnotes ----------

   (1) The '-bootclasspath' option is only allowed if you are working
to generate documentation for older versions of the Java platform,
such as using JDK 6, 7, or 8 for '-source', '-target', or '--release'.


File: JavaSE9.info,  Node: Standard Doclet,  Next: Examples Javadoc Command,  Prev: Javadoc Doclets,  Up: javadoc Command

A.6.2 Standard Doclet
---------------------


File: JavaSE9.info,  Node: Examples Javadoc Command,  Prev: Standard Doclet,  Up: javadoc Command

A.6.3 Examples of Running the Javadoc Command
---------------------------------------------


File: JavaSE9.info,  Node: Java Web Start,  Next: JShell,  Prev: javadoc,  Up: Top

Appendix B An Overview of Java Web Start
****************************************


File: JavaSE9.info,  Node: JShell,  Next: Applet Basics,  Prev: Java Web Start,  Up: Top

Appendix C Introducing JShell
*****************************


File: JavaSE9.info,  Node: Applet Basics,  Next: The Makefile,  Prev: JShell,  Up: Top

Appendix D Applet Basics
************************


File: JavaSE9.info,  Node: The Makefile,  Next: Code Chunk Summaries,  Prev: Applet Basics,  Up: Top

Appendix E The Makefile
***********************

{'Makefile'} ==
     <Makefile CONSTANTS>
     <Makefile DEFAULTS>
     <Makefile TANGLE WEAVE>
     <Makefile PDF>
     <Makefile HTML>
     <Makefile CLEAN Targets>
     <Makefile MAKEFILE Target>

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<Makefile CLEAN           See *note Makefile-CLEAN-Targets::.
Targets>
<Makefile CONSTANTS>      See *note Makefile-CONSTANTS::.
<Makefile DEFAULTS>       See *note Makefile-DEFAULTS::.
<Makefile HTML>           See *note Makefile-HTML::.
<Makefile MAKEFILE        See *note Makefile-MAKEFILE-Target::.
Target>
<Makefile PDF>            See *note Makefile-PDF::.
<Makefile TANGLE WEAVE>   See *note Makefile-TANGLE-WEAVE::.

* Menu:

* Makefile Constants::
* Makefile Defaults::
* Make the Makefile::
* Makefile Tangle Weave::
* Makefile PDF::
* Makefile HTML::
* Makefile Clean Targets::


File: JavaSE9.info,  Node: Makefile Constants,  Next: Makefile Defaults,  Up: The Makefile

E.1 Makefile Constants
======================

*FIXME*: Relativize ROOT

<Makefile CONSTANTS> ==
     ROOT := /usr/local/dev/programming/Java/JavaSE9
     FILENAME := JavaSE9
     AUX := {aux,cps,fns,log,toc}

This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.


File: JavaSE9.info,  Node: Makefile Defaults,  Next: Make the Makefile,  Prev: Makefile Constants,  Up: The Makefile

E.2 Makefile Default Targets
============================

<Makefile DEFAULTS> ==
     .PHONY: all
     all: tangle weave


This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.


File: JavaSE9.info,  Node: Make the Makefile,  Next: Makefile Tangle Weave,  Prev: Makefile Defaults,  Up: The Makefile

E.3 Make the Makefile
=====================

<Makefile MAKEFILE Target> ==
     .PHONY : makefile
     makefile : jrtangle worldclean


This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.


File: JavaSE9.info,  Node: Makefile Tangle Weave,  Next: Makefile PDF,  Prev: Make the Makefile,  Up: The Makefile

E.4 Makefile Tangle Weave Targets
=================================

<Makefile TANGLE WEAVE> ==
     .PHONY: tangle weave jrtangle jrweave texi

     tangle: jrtangle
     weave: jrweave

     jrtangle: $(FILENAME).twjr
         jrtangle $(FILENAME).twjr

     jrweave: texi

     texi: $(FILENAME).texi

     $(FILENAME).texi: $(FILENAME).twjr
         jrweave $(FILENAME).twjr > $(FILENAME).texi

This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.


File: JavaSE9.info,  Node: Makefile PDF,  Next: Makefile HTML,  Prev: Makefile Tangle Weave,  Up: The Makefile

E.5 Makefile PDF
================

<Makefile PDF> ==
     <Makefile MAKEPDF>
     <Makefile OPENPDF>


This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<Makefile MAKEPDF>        See *note Makefile-MAKEPDF::.
<Makefile OPENPDF>        See *note Makefile-OPENPDF::.

* Menu:

* Makefile MAKEPDF::


File: JavaSE9.info,  Node: Makefile MAKEPDF,  Up: Makefile PDF

E.5.1 Makefile MAKEPDF
----------------------

<Makefile MAKEPDF> ==
     .PHONY : makepdf
     makepdf : ${FILENAME}.pdf

     ${FILENAME}.pdf : ${FILENAME}.texi
         pdftexi2dvi ${FILENAME}.texi


This chunk is called by <Makefile PDF>; see its first definition at
*note Makefile-PDF::.

* Menu:

* Makefile OPENPDF::


File: JavaSE9.info,  Node: Makefile OPENPDF,  Up: Makefile MAKEPDF

E.5.1.1 Makefile OPENPDF
........................

<Makefile OPENPDF> ==
     .PHONY : pdf
     pdf : makepdf
         open ${FILENAME}.pdf


This chunk is called by <Makefile PDF>; see its first definition at
*note Makefile-PDF::.


File: JavaSE9.info,  Node: Makefile HTML,  Next: Makefile Clean Targets,  Prev: Makefile PDF,  Up: The Makefile

E.6 Makefile HTML
=================

<Makefile HTML> ==
     .PHONY: html
     html : ${FILENAME}.texi
         makeinfo --html ${FILENAME}.texi


This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.


File: JavaSE9.info,  Node: Makefile Clean Targets,  Prev: Makefile HTML,  Up: The Makefile

E.7 Makefile Clean Targets
==========================

<Makefile CLEAN Targets> ==
     <Makefile CLEAN>
     <Makefile DISTCLEAN>
     <Makefile WORLDCLEAN>


This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<Makefile CLEAN>          See *note Makefile-CLEAN::.
<Makefile DISTCLEAN>      See *note Makefile-DISTCLEAN::.
<Makefile WORLDCLEAN>     See *note Makefile-WORLDCLEAN::.

* Menu:

* Makefile Clean ::
* Makefile DistClean::
* Makefile WorldClean::


File: JavaSE9.info,  Node: Makefile Clean,  Next: Makefile DistClean,  Up: Makefile Clean Targets

E.7.1 Makefile Clean
--------------------

<Makefile CLEAN> ==
     .PHONY: clean
     clean:
         rm -f *~
         rm -f $(FILENAME).??


This chunk is called by <Makefile CLEAN Targets>; see its first
definition at *note Makefile-CLEAN-Targets::.


File: JavaSE9.info,  Node: Makefile DistClean,  Next: Makefile WorldClean,  Prev: Makefile Clean,  Up: Makefile Clean Targets

E.7.2 Makefile DistClean
------------------------

<Makefile DISTCLEAN> ==
     .PHONY : distclean
     distclean : clean
         rm -fv ${FILENAME}.${AUX}


This chunk is called by <Makefile CLEAN Targets>; see its first
definition at *note Makefile-CLEAN-Targets::.


File: JavaSE9.info,  Node: Makefile WorldClean,  Prev: Makefile DistClean,  Up: Makefile Clean Targets

E.7.3 Makefile WorldClean
-------------------------

<Makefile WORLDCLEAN> ==
     .PHONY: worldclean
     worldclean :
         for file in ${ROOT}/*; do \
           [ \
             $${file} != "${ROOT}/${FILENAME}.twjr" -a \
             $$file != "${ROOT}/Makefile" -a \
             $$file != ".git" \
           ] \
           && rm -rfv "$${file}" || :; \
         done


This chunk is called by <Makefile CLEAN Targets>; see its first
definition at *note Makefile-CLEAN-Targets::.


File: JavaSE9.info,  Node: Code Chunk Summaries,  Next: List of Tables,  Prev: The Makefile,  Up: Top

Appendix F Code Chunk Summaries
*******************************

This major node presents alphabetical lists of all the file
definitions, the code chunk definitions, and the code chunk
references.

* Menu:

* File Definitions::            Source files by definition.
* Code Chunk Definitions::      Code chunks by definition.
* Code Chunk References::       Code chunks by reference.


File: JavaSE9.info,  Node: File Definitions,  Next: Code Chunk Definitions,  Up: Code Chunk Summaries

F.1 Source File Definitions
===========================

{'AbstractAreas.java '}
     This chunk is defined in *note AbstractAreas-java-::.
{'BRRead.java'}
     This chunk is defined in *note BRRead-java::.
{'BRReadLines.java'}
     This chunk is defined in *note BRReadLines-java::.
{'BufferedInputStreamDemo.java'}
     This chunk is defined in *note BufferedInputStreamDemo-java::.
{'BufferedReaderDemo.java'}
     This chunk is defined in *note BufferedReaderDemo-java::.
{'CopyFile.java'}
     This chunk is defined in *note CopyFile-java::.
{'CopyFileMultTryWR.java'}
     This chunk is defined in *note CopyFileMultTryWR-java::.
{'DirList.java'}
     This chunk is defined in *note DirList-java::.
{'DirListOnly'}
     This chunk is defined in *note DirListOnly::.
{'FileReaderDemo.java'}
     This chunk is defined in *note FileReaderDemo-java::.
{'FindAreas.java '}
     This chunk is defined in *note FindAreas-java-::.
{'ForEachDemo.java'}
     This chunk is defined in *note ForEachDemo-java::.
{'GenMethDemo.java'}
     This chunk is defined in *note GenMethDemo-java::.
{'IteratorDemo.java'}
     This chunk is defined in *note IteratorDemo-java::.
{'Makefile'}
     This chunk is defined in *note Makefile::.
{'OnlyExt.java'}
     This chunk is defined in *note OnlyExt-java::.
{'PrinterWriterDemo.java'}
     This chunk is defined in *note PrinterWriterDemo-java::.
{'ReflectionDemo1.java'}
     This chunk is defined in *note ReflectionDemo1-java::.
{'ShowFile.java'}
     This chunk is defined in *note ShowFile-java::.
{'ShowFileAlt.java'}
     This chunk is defined in *note ShowFileAlt-java::.
{'ShowFileSingleTry'}
     This chunk is defined in *note ShowFileSingleTry::.
{'ShowFileTryWR.java'}
     This chunk is defined in *note ShowFileTryWR-java::.
{'SimpleGenerics.java'}
     This chunk is defined in *note SimpleGenerics-java::.
{'SpliteratorDemo.java'}
     This chunk is defined in *note SpliteratorDemo-java::.
{'SquareNum.java'}
     This chunk is defined in *note SquareNum-java::.
{'Stack.java'}
     This chunk is defined in *note Stack-java::.
{'StackImproved.java'}
     This chunk is defined in *note StackImproved-java::.
{'TestStack.java'}
     This chunk is defined in *note TestStack-java::.
{'TwoTypeParameters.java'}
     This chunk is defined in *note TwoTypeParameters-java::.


File: JavaSE9.info,  Node: Code Chunk Definitions,  Next: Code Chunk References,  Prev: File Definitions,  Up: Code Chunk Summaries

F.2 Code Chunk Definitions
==========================

<AbstractAreas Abstract Area Method Declaration >
     This chunk is defined in *note
     AbstractAreas-Abstract-Area-Method-Declaration-::.
<AbstractAreas Abstract Class Figure >
     This chunk is defined in *note
     AbstractAreas-Abstract-Class-Figure-::.
<AbstractAreas Main Class >
     This chunk is defined in *note AbstractAreas-Main-Class-::.
<AbstractAreas Main Method Declaration >
     This chunk is defined in *note
     AbstractAreas-Main-Method-Declaration-::.
<BRRead BufferedReader Constructor>
     This chunk is defined in *note
     BRRead-BufferedReader-Constructor::.
<BRRead Enter Characters>
     This chunk is defined in *note BRRead-Enter-Characters::.
<BRReadLines BufferedReader Constructor>
     This chunk is defined in *note
     BRReadLines-BufferedReader-Constructor::.
<BRReadLines Enter Lines>
     This chunk is defined in *note BRReadLines-Enter-Lines::.
<BufferedInputStreamDemo Buffer>
     This chunk is defined in *note BufferedInputStreamDemo-Buffer::.
<BufferedInputStreamDemo ByteArrayInputStream>
     This chunk is defined in *note
     BufferedInputStreamDemo-ByteArrayInputStream::.
<BufferedInputStreamDemo Instance Variables>
     This chunk is defined in *note
     BufferedInputStreamDemo-Instance-Variables::.
<BufferedInputStreamDemo String>
     This chunk is defined in *note BufferedInputStreamDemo-String::.
<BufferedInputStreamDemo Switch on Character>
     This chunk is defined in *note
     BufferedInputStreamDemo-Switch-on-Character::.
<BufferedInputStreamDemo TryWithResources BufferedInputStream>
     This chunk is defined in *note
     BufferedInputStreamDemo-TryWithResources-BufferedInputStream::.
<BufferedInputStreamDemo Utility Variables>
     This chunk is defined in *note
     BufferedInputStreamDemo-Utility-Variables::.
<BufferedInputStreamDemo While Loop>
     This chunk is defined in *note
     BufferedInputStreamDemo-While-Loop::.
<BufferedReaderDemo Buffer>
     This chunk is defined in *note BufferedReaderDemo-Buffer::.
<BufferedReaderDemo Instance Variables>
     This chunk is defined in *note
     BufferedReaderDemo-Instance-Variables::.
<BufferedReaderDemo TryWithResources BufferedReader>
     This chunk is defined in *note
     BufferedReaderDemo-TryWithResources-BufferedReader::.
<Call Overridden Methods One By One >
     This chunk is defined in *note
     Call-Overridden-Methods-One-By-One-::.
<Call Overridden Methods One By One Except Figure >
     This chunk is defined in *note
     Call-Overridden-Methods-One-By-One-Except-Figure-::.
<Catch Exception>
     This chunk is defined in *note Catch-Exception::.
<Catch IOException>
     This chunk is defined in *note Catch-IOException::.
<Class Declaration>
     This chunk is defined in *note Class-Declaration::.
<Class Gen>
     This chunk is defined in *note Class-Gen::.
<Class GenDemo>
     This chunk is defined in *note Class-GenDemo::.
<Class SimpGen>
     This chunk is defined in *note Class-SimpGen::.
<Class TwoGen>
     This chunk is defined in *note Class-TwoGen::.
<Constructor of Two Parameters>
     This chunk is defined in *note Constructor-of-Two-Parameters::.
<Constructor taking parameter of Type T>
     This chunk is defined in *note
     Constructor-taking-parameter-of-Type-T::.
<CopyFile Check For 2 Files>
     This chunk is defined in *note CopyFile-Check-For-2-Files::.
<CopyFile Copy a File>
     This chunk is defined in *note CopyFile-Copy-a-File::.
<CopyFile Initial Comments>
     This chunk is defined in *note CopyFile-Initial-Comments::.
<CopyFile Instance Variable Declarations>
     This chunk is defined in *note
     CopyFile-Instance-Variable-Declarations::.
<CopyFileMultTryWR Initial Comments>
     This chunk is defined in *note
     CopyFileMultTryWR-Initial-Comments::.
<CopyFileMultTryWR Manage Two Files>
     This chunk is defined in *note
     CopyFileMultTryWR-Manage-Two-Files::.
<Create Basic Figure Objects >
     This chunk is defined in *note Create-Basic-Figure-Objects-::.
<Create Basic Figure Objects Except Figure >
     This chunk is defined in *note
     Create-Basic-Figure-Objects-Except-Figure-::.
<Create Basic Figure Reference Variable >
     This chunk is defined in *note
     Create-Basic-Figure-Reference-Variable-::.
<Create a Gen object for Integers>
     This chunk is defined in *note
     Create-a-Gen-object-for-Integers::.
<Create a Gen object for Strings>
     This chunk is defined in *note Create-a-Gen-object-for-Strings::.
<DirList Examine Directory Contents>
     This chunk is defined in *note
     DirList-Examine-Directory-Contents::.
<DirList Examine Directory Contents For-Loop>
     This chunk is defined in *note
     DirList-Examine-Directory-Contents-For-Loop::.
<DirList Instance Variable Declarations>
     This chunk is defined in *note
     DirList-Instance-Variable-Declarations::.
<DirList Obtain Directory From Command-Line Args>
     This chunk is defined in *note
     DirList-Obtain-Directory-From-Command-Line-Args::.
<DirListOnly FilenameFilter Object>
     This chunk is defined in *note
     DirListOnly-FilenameFilter-Object::.
<DirListOnly FilenameFilter Object List>
     This chunk is defined in *note
     DirListOnly-FilenameFilter-Object-List::.
<DirListOnly Print List>
     This chunk is defined in *note DirListOnly-Print-List::.
<Figure Area Method Declaration >
     This chunk is defined in *note Figure-Area-Method-Declaration-::.
<Figure Constructor >
     This chunk is defined in *note Figure-Constructor-::.
<Figure Instance Variable Declarations >
     This chunk is defined in *note
     Figure-Instance-Variable-Declarations-::.
<FileReaderDemo TryWithResources FileReader>
     This chunk is defined in *note
     FileReaderDemo-TryWithResources-FileReader::.
<FindAreas Main Class >
     This chunk is defined in *note FindAreas-Main-Class-::.
<FindAreas Main Method Declaration >
     This chunk is defined in *note
     FindAreas-Main-Method-Declaration-::.
<FindAreas SubClass Rectangle >
     This chunk is defined in *note FindAreas-SubClass-Rectangle-::.
<FindAreas SubClass Triangle >
     This chunk is defined in *note FindAreas-SubClass-Triangle-::.
<FindAreas SuperClass Figure >
     This chunk is defined in *note FindAreas-SuperClass-Figure-::.
<ForEachDemo--Create an Array List For Integers>
     This chunk is defined in *note
     ForEachDemo---Create-an-Array-List-For-Integers::.
<ForEachDemo--Sum the Values by Using a for Loop>
     This chunk is defined in *note
     ForEachDemo---Sum-the-Values-by-Using-a-for-Loop::.
<ForEachDemo--Use for Loop to Display the Values>
     This chunk is defined in *note
     ForEachDemo---Use-for-Loop-to-Display-the-Values::.
<GenMethDemo Main>
     This chunk is defined in *note GenMethDemo-Main::.
<Get Value>
     This chunk is defined in *note Get-Value::.
<Import java.io>
     This chunk is defined in *note Import-java-io::.
<Import java.io.File>
     This chunk is defined in *note Import-java-io-File::.
<Import java.lang.reflect>
     This chunk is defined in *note Import-java-lang-reflect::.
<Import java.util>
     This chunk is defined in *note Import-java-util::.
<Instance Methods Show and Get>
     This chunk is defined in *note Instance-Methods-Show-and-Get::.
<Instance Variable ob of Type T>
     This chunk is defined in *note Instance-Variable-ob-of-Type-T::.
<Integer Type Parameter>
     This chunk is defined in *note Integer-Type-Parameter::.
<IteratorDemo--Create an Array List>
     This chunk is defined in *note
     IteratorDemo---Create-an-Array-List::.
<IteratorDemo--Display the List Backwards>
     This chunk is defined in *note
     IteratorDemo---Display-the-List-Backwards::.
<IteratorDemo--Modify Objects Being Iterated>
     This chunk is defined in *note
     IteratorDemo---Modify-Objects-Being-Iterated::.
<IteratorDemo--Use Iterator To Display Contents of Array List>
     This chunk is defined in *note
     IteratorDemo---Use-Iterator-To-Display-Contents-of-Array-List::.
<IteratorDemo--Use ListIterator to Display Modified Contents>
     This chunk is defined in *note
     IteratorDemo---Use-ListIterator-to-Display-Modified-Contents::.
<Makefile CLEAN>
     This chunk is defined in *note Makefile-CLEAN::.
<Makefile CLEAN Targets>
     This chunk is defined in *note Makefile-CLEAN-Targets::.
<Makefile CONSTANTS>
     This chunk is defined in *note Makefile-CONSTANTS::.
<Makefile DEFAULTS>
     This chunk is defined in *note Makefile-DEFAULTS::.
<Makefile DISTCLEAN>
     This chunk is defined in *note Makefile-DISTCLEAN::.
<Makefile HTML>
     This chunk is defined in *note Makefile-HTML::.
<Makefile MAKEFILE Target>
     This chunk is defined in *note Makefile-MAKEFILE-Target::.
<Makefile MAKEPDF>
     This chunk is defined in *note Makefile-MAKEPDF::.
<Makefile OPENPDF>
     This chunk is defined in *note Makefile-OPENPDF::.
<Makefile PDF>
     This chunk is defined in *note Makefile-PDF::.
<Makefile TANGLE WEAVE>
     This chunk is defined in *note Makefile-TANGLE-WEAVE::.
<Makefile WORLDCLEAN>
     This chunk is defined in *note Makefile-WORLDCLEAN::.
<Method returning object of type T>
     This chunk is defined in *note
     Method-returning-object-of-type-T::.
<Method showing type of T>
     This chunk is defined in *note Method-showing-type-of-T::.
<Number 1>
     This chunk is defined in *note Number-1::.
<Number 2>
     This chunk is defined in *note Number-2::.
<OnlyExt Accept Method Implementation>
     This chunk is defined in *note
     OnlyExt-Accept-Method-Implementation::.
<OnlyExt Constructor>
     This chunk is defined in *note OnlyExt-Constructor::.
<OnlyExt Instance Variable Declarations>
     This chunk is defined in *note
     OnlyExt-Instance-Variable-Declarations::.
<PrintWriterDemo PrintWriter Constructor>
     This chunk is defined in *note
     PrintWriterDemo-PrintWriter-Constructor::.
<PrintWriterDemo Printing To Console>
     This chunk is defined in *note
     PrintWriterDemo-Printing-To-Console::.
<Rectangle Area Method Declaration >
     This chunk is defined in *note
     Rectangle-Area-Method-Declaration-::.
<Rectangle Constructor >
     This chunk is defined in *note Rectangle-Constructor-::.
<Reference to Integer Instance>
     This chunk is defined in *note Reference-to-Integer-Instance::.
<ReflectionDemo1--Class forName() Call>
     This chunk is defined in *note
     ReflectionDemo1---Class-forName---Call::.
<ReflectionDemo1--getConstructors() Call>
     This chunk is defined in *note
     ReflectionDemo1---getConstructors---Call::.
<ReflectionDemo1--getFields() Call>
     This chunk is defined in *note
     ReflectionDemo1---getFields---Call::.
<ReflectionDemo1--getMethods() Call>
     This chunk is defined in *note
     ReflectionDemo1---getMethods---Call::.
<Show Type>
     This chunk is defined in *note Show-Type::.
<ShowFile Close a File>
     This chunk is defined in *note ShowFile-Close-a-File::.
<ShowFile Initial Comments>
     This chunk is defined in *note ShowFile-Initial-Comments::.
<ShowFile Instance Variable Declarations>
     This chunk is defined in *note
     ShowFile-Instance-Variable-Declarations::.
<ShowFile Open a File>
     This chunk is defined in *note ShowFile-Open-a-File::.
<ShowFile Read a File>
     This chunk is defined in *note ShowFile-Read-a-File::.
<ShowFileAlt Read a File>
     This chunk is defined in *note ShowFileAlt-Read-a-File::.
<ShowFileSingleTry Additional Initial Comment>
     This chunk is defined in *note
     ShowFileSingleTry-Additional-Initial-Comment::.
<ShowFileSingleTry Read a File>
     This chunk is defined in *note ShowFileSingleTry-Read-a-File::.
<ShowFileTryWR Check CL Args>
     This chunk is defined in *note ShowFileTryWR-Check-CL-Args::.
<ShowFileTryWR Check CL Args End>
     This chunk is defined in *note ShowFileTryWR-Check-CL-Args-End::.
<ShowFileTryWR Initial Comments>
     This chunk is defined in *note ShowFileTryWR-Initial-Comments::.
<ShowFileTryWR Instance Variable Declaration>
     This chunk is defined in *note
     ShowFileTryWR-Instance-Variable-Declaration::.
<ShowFileTryWR Open a File TryWR>
     This chunk is defined in *note ShowFileTryWR-Open-a-File-TryWR::.
<SpliteratorDemo--Create New List>
     This chunk is defined in *note
     SpliteratorDemo---Create-New-List::.
<SpliteratorDemo--Create an Array List for Doubles>
     This chunk is defined in *note
     SpliteratorDemo---Create-an-Array-List-for-Doubles::.
<SpliteratorDemo--Use forEachRemaining() to Display Contents>
     This chunk is defined in *note
     SpliteratorDemo---Use-forEachRemaining---to-Display-Contents::.
<SpliteratorDemo--Use tryAdvance() to Display Contents>
     This chunk is defined in *note
     SpliteratorDemo---Use-tryAdvance---to-Display-Contents::.
<SquareNum--SquareNum Class>
     This chunk is defined in *note SquareNum---SquareNum-Class::.
<SquareNum--SquareNum Class-Body>
     This chunk is defined in *note
     SquareNum---SquareNum-Class--Body::.
<SquareNum--SquareNum Class-Documentation>
     This chunk is defined in *note
     SquareNum---SquareNum-Class--Documentation::.
<SquareNum--getNumber() Method>
     This chunk is defined in *note SquareNum---getNumber---Method::.
<SquareNum--getNumber() Method-Body>
     This chunk is defined in *note
     SquareNum---getNumber---Method--Body::.
<SquareNum--getNumber() Method-Documentation>
     This chunk is defined in *note
     SquareNum---getNumber---Method--Documentation::.
<SquareNum--main() Method>
     This chunk is defined in *note SquareNum---main---Method::.
<SquareNum--main() Method-Body>
     This chunk is defined in *note SquareNum---main---Method--Body::.
<SquareNum--main() Method-Documentation>
     This chunk is defined in *note
     SquareNum---main---Method--Documentation::.
<SquareNum--square() Method>
     This chunk is defined in *note SquareNum---square---Method::.
<SquareNum--square() Method-Body>
     This chunk is defined in *note
     SquareNum---square---Method--Body::.
<SquareNum--square() Method-Documentation>
     This chunk is defined in *note
     SquareNum---square---Method--Documentation::.
<Stack Constructor>
     This chunk is defined in *note Stack-Constructor::.
<Stack Instance Methods>
     This chunk is defined in *note Stack-Instance-Methods::.
<Stack Instance Variables>
     This chunk is defined in *note Stack-Instance-Variables::.
<Stack Pop>
     This chunk is defined in *note Stack-Pop::.
<Stack Private Instance Variables>
     This chunk is defined in *note
     Stack-Private-Instance-Variables::.
<Stack Push>
     This chunk is defined in *note Stack-Push::.
<Static Method isIn>
     This chunk is defined in *note Static-Method-isIn::.
<TestStack Main Method>
     This chunk is defined in *note TestStack-Main-Method::.
<Triangle Area Method Declaration >
     This chunk is defined in *note
     Triangle-Area-Method-Declaration-::.
<Triangle Constructor >
     This chunk is defined in *note Triangle-Constructor-::.
<Two Instance Variables Declarations>
     This chunk is defined in *note
     Two-Instance-Variables-Declarations::.


File: JavaSE9.info,  Node: Code Chunk References,  Prev: Code Chunk Definitions,  Up: Code Chunk Summaries

F.3 Code Chunk References
=========================

<AbstractAreas Abstract Area Method Declaration >

     This chunk is called by <AbstractAreas Abstract Class Figure >;
     see its first definition at *note
     AbstractAreas-Abstract-Class-Figure-::.
<AbstractAreas Abstract Class Figure >

     This chunk is called by {'AbstractAreas.java '}; see its first
     definition at *note AbstractAreas-java-::.
<AbstractAreas Main Class >

     This chunk is called by {'AbstractAreas.java '}; see its first
     definition at *note AbstractAreas-java-::.
<AbstractAreas Main Method Declaration >

     This chunk is called by <AbstractAreas Main Class >; see its
     first definition at *note AbstractAreas-Main-Class-::.
<BRRead BufferedReader Constructor>

     This chunk is called by {'BRRead.java'}; see its first definition
     at *note BRRead-java::.
<BRRead Enter Characters>

     This chunk is called by {'BRRead.java'}; see its first definition
     at *note BRRead-java::.
<BRReadLines BufferedReader Constructor>

     This chunk is called by {'BRReadLines.java'}; see its first
     definition at *note BRReadLines-java::.
<BRReadLines Enter Lines>

     This chunk is called by {'BRReadLines.java'}; see its first
     definition at *note BRReadLines-java::.
<BufferedInputStreamDemo Buffer>

     This chunk is called by <BufferedInputStreamDemo Instance
     Variables>; see its first definition at *note
     BufferedInputStreamDemo-Instance-Variables::.
<BufferedInputStreamDemo ByteArrayInputStream>

     This chunk is called by <BufferedInputStreamDemo Instance
     Variables>; see its first definition at *note
     BufferedInputStreamDemo-Instance-Variables::.
<BufferedInputStreamDemo Instance Variables>

     This chunk is called by {'BufferedInputStreamDemo.java'}; see its
     first definition at *note BufferedInputStreamDemo-java::.
<BufferedInputStreamDemo String>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     <BufferedInputStreamDemo  See
     Instance Variables>       *note BufferedInputStreamDemo-Instance-Variables::.
     <BufferedReaderDemo       See
     Instance Variables>       *note BufferedReaderDemo-Instance-Variables::.
<BufferedInputStreamDemo Switch on Character>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     <BufferedInputStreamDemo  See
     While Loop>               *note BufferedInputStreamDemo-While-Loop::.
     <BufferedReaderDemo       See
     TryWithResources          *note BufferedReaderDemo-TryWithResources-BufferedReader::.
     BufferedReader>
<BufferedInputStreamDemo TryWithResources BufferedInputStream>

     This chunk is called by {'BufferedInputStreamDemo.java'}; see its
     first definition at *note BufferedInputStreamDemo-java::.
<BufferedInputStreamDemo Utility Variables>

     This chunk is called by <BufferedInputStreamDemo Instance
     Variables>; see its first definition at *note
     BufferedInputStreamDemo-Instance-Variables::.
<BufferedInputStreamDemo While Loop>

     This chunk is called by <BufferedInputStreamDemo TryWithResources
     BufferedInputStream>; see its first definition at *note
     BufferedInputStreamDemo-TryWithResources-BufferedInputStream::.
<BufferedReaderDemo Buffer>

     This chunk is called by <BufferedReaderDemo Instance Variables>;
     see its first definition at *note
     BufferedReaderDemo-Instance-Variables::.
<BufferedReaderDemo Instance Variables>

     This chunk is called by {'BufferedReaderDemo.java'}; see its
     first definition at *note BufferedReaderDemo-java::.
<BufferedReaderDemo TryWithResources BufferedReader>

     This chunk is called by {'BufferedReaderDemo.java'}; see its
     first definition at *note BufferedReaderDemo-java::.
<Call Overridden Methods One By One >

     This chunk is called by <FindAreas Main Method Declaration >; see
     its first definition at *note
     FindAreas-Main-Method-Declaration-::.
<Call Overridden Methods One By One Except Figure >

     This chunk is called by <AbstractAreas Main Method Declaration >;
     see its first definition at *note
     AbstractAreas-Main-Method-Declaration-::.
<Catch Exception>

     This chunk is called by {'ReflectionDemo1.java'}; see its first
     definition at *note ReflectionDemo1-java::.
<Catch IOException>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'BufferedInputStreamDemo.java'}See *note BufferedInputStreamDemo-java::.
     {'BufferedReaderDemo.java'}See *note BufferedReaderDemo-java::.
     {'FileReaderDemo.java'}   See *note FileReaderDemo-java::.
<Class Declaration>

     This chunk is called by <Class TwoGen>; see its first definition
     at *note Class-TwoGen::.
<Class Gen>

     This chunk is called by {'SimpleGenerics.java'}; see its first
     definition at *note SimpleGenerics-java::.
<Class GenDemo>

     This chunk is called by {'SimpleGenerics.java'}; see its first
     definition at *note SimpleGenerics-java::.
<Class SimpGen>

     This chunk is called by {'TwoTypeParameters.java'}; see its first
     definition at *note TwoTypeParameters-java::.
<Class TwoGen>

     This chunk is called by {'TwoTypeParameters.java'}; see its first
     definition at *note TwoTypeParameters-java::.
<Constructor of Two Parameters>

     This chunk is called by <Class TwoGen>; see its first definition
     at *note Class-TwoGen::.
<Constructor taking parameter of Type T>

     This chunk is called by <Class Gen>; see its first definition at
     *note Class-Gen::.
<CopyFile Check For 2 Files>

     This chunk is called by {'CopyFile.java'}; see its first
     definition at *note CopyFile-java::.
<CopyFile Copy a File>

     This chunk is called by {'CopyFile.java'}; see its first
     definition at *note CopyFile-java::.
<CopyFile Initial Comments>

     This chunk is called by {'CopyFile.java'}; see its first
     definition at *note CopyFile-java::.
<CopyFile Instance Variable Declarations>

     This chunk is called by {'CopyFile.java'}; see its first
     definition at *note CopyFile-java::.
<CopyFileMultTryWR Initial Comments>

     This chunk is called by {'CopyFileMultTryWR.java'}; see its first
     definition at *note CopyFileMultTryWR-java::.
<CopyFileMultTryWR Manage Two Files>

     This chunk is called by {'CopyFileMultTryWR.java'}; see its first
     definition at *note CopyFileMultTryWR-java::.
<Create Basic Figure Objects >

     This chunk is called by <FindAreas Main Method Declaration >; see
     its first definition at *note
     FindAreas-Main-Method-Declaration-::.
<Create Basic Figure Objects Except Figure >

     This chunk is called by <AbstractAreas Main Method Declaration >;
     see its first definition at *note
     AbstractAreas-Main-Method-Declaration-::.
<Create Basic Figure Reference Variable >

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     <AbstractAreas Main       See
     Method Declaration >      *note AbstractAreas-Main-Method-Declaration-::.
     <FindAreas Main Method    See
     Declaration >             *note FindAreas-Main-Method-Declaration-::.
<Create a Gen object for Integers>

     This chunk is called by <Class GenDemo>; see its first definition
     at *note Class-GenDemo::.
<Create a Gen object for Strings>

     This chunk is called by <Class GenDemo>; see its first definition
     at *note Class-GenDemo::.
<DirList Examine Directory Contents>

     This chunk is called by {'DirList.java'}; see its first
     definition at *note DirList-java::.
<DirList Examine Directory Contents For-Loop>

     This chunk is called by <DirList Examine Directory Contents>; see
     its first definition at *note
     DirList-Examine-Directory-Contents::.
<DirList Instance Variable Declarations>

     This chunk is called by {'DirList.java'}; see its first
     definition at *note DirList-java::.
<DirList Obtain Directory From Command-Line Args>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     <DirList Instance         See
     Variable Declarations>    *note DirList-Instance-Variable-Declarations::.
     {'DirListOnly'}           See *note DirListOnly::.
<DirListOnly FilenameFilter Object>

     This chunk is called by {'DirListOnly'}; see its first definition
     at *note DirListOnly::.
<DirListOnly FilenameFilter Object List>

     This chunk is called by {'DirListOnly'}; see its first definition
     at *note DirListOnly::.
<DirListOnly Print List>

     This chunk is called by {'DirListOnly'}; see its first definition
     at *note DirListOnly::.
<Figure Area Method Declaration >

     This chunk is called by <FindAreas SuperClass Figure >; see its
     first definition at *note FindAreas-SuperClass-Figure-::.
<Figure Constructor >

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     <AbstractAreas Abstract   See
     Class Figure >            *note AbstractAreas-Abstract-Class-Figure-::.
     <FindAreas SuperClass     See *note FindAreas-SuperClass-Figure-::.
     Figure >
<Figure Instance Variable Declarations >

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     <AbstractAreas Abstract   See
     Class Figure >            *note AbstractAreas-Abstract-Class-Figure-::.
     <FindAreas SuperClass     See *note FindAreas-SuperClass-Figure-::.
     Figure >
<FileReaderDemo TryWithResources FileReader>

     This chunk is called by {'FileReaderDemo.java'}; see its first
     definition at *note FileReaderDemo-java::.
<FindAreas Main Class >

     This chunk is called by {'FindAreas.java '}; see its first
     definition at *note FindAreas-java-::.
<FindAreas Main Method Declaration >

     This chunk is called by <FindAreas Main Class >; see its first
     definition at *note FindAreas-Main-Class-::.
<FindAreas SubClass Rectangle >

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'AbstractAreas.java '}   See *note AbstractAreas-java-::.
     {'FindAreas.java '}       See *note FindAreas-java-::.
<FindAreas SubClass Triangle >

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'AbstractAreas.java '}   See *note AbstractAreas-java-::.
     {'FindAreas.java '}       See *note FindAreas-java-::.
<FindAreas SuperClass Figure >

     This chunk is called by {'FindAreas.java '}; see its first
     definition at *note FindAreas-java-::.
<ForEachDemo--Create an Array List For Integers>

     This chunk is called by {'ForEachDemo.java'}; see its first
     definition at *note ForEachDemo-java::.
<ForEachDemo--Sum the Values by Using a for Loop>

     This chunk is called by {'ForEachDemo.java'}; see its first
     definition at *note ForEachDemo-java::.
<ForEachDemo--Use for Loop to Display the Values>

     This chunk is called by {'ForEachDemo.java'}; see its first
     definition at *note ForEachDemo-java::.
<GenMethDemo Main>

     This chunk is called by {'GenMethDemo.java'}; see its first
     definition at *note GenMethDemo-java::.
<Get Value>

     This chunk is called by <Create a Gen object for Integers>; see
     its first definition at *note Create-a-Gen-object-for-Integers::.
<Import java.io>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'BRRead.java'}           See *note BRRead-java::.
     {'BRReadLines.java'}      See *note BRReadLines-java::.
     {'BufferedInputStreamDemo.java'}See *note BufferedInputStreamDemo-java::.
     {'BufferedReaderDemo.java'}See *note BufferedReaderDemo-java::.
     {'CopyFile.java'}         See *note CopyFile-java::.
     {'CopyFileMultTryWR.java'}See *note CopyFileMultTryWR-java::.
     {'DirListOnly'}           See *note DirListOnly::.
     {'FileReaderDemo.java'}   See *note FileReaderDemo-java::.
     {'OnlyExt.java'}          See *note OnlyExt-java::.
     {'PrinterWriterDemo.java'}See *note PrinterWriterDemo-java::.
     {'ShowFile.java'}         See *note ShowFile-java::.
     {'ShowFileAlt.java'}      See *note ShowFileAlt-java::.
     {'ShowFileSingleTry'}     See *note ShowFileSingleTry::.
     {'ShowFileTryWR.java'}    See *note ShowFileTryWR-java::.
     {'SquareNum.java'}        See *note SquareNum-java::.
<Import java.io.File>

     This chunk is called by {'DirList.java'}; see its first
     definition at *note DirList-java::.
<Import java.lang.reflect>

     This chunk is called by {'ReflectionDemo1.java'}; see its first
     definition at *note ReflectionDemo1-java::.
<Import java.util>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'ForEachDemo.java'}      See *note ForEachDemo-java::.
     {'IteratorDemo.java'}     See *note IteratorDemo-java::.
     {'SpliteratorDemo.java'}  See *note SpliteratorDemo-java::.
<Instance Methods Show and Get>

     This chunk is called by <Class TwoGen>; see its first definition
     at *note Class-TwoGen::.
<Instance Variable ob of Type T>

     This chunk is called by <Class Gen>; see its first definition at
     *note Class-Gen::.
<Integer Type Parameter>

     This chunk is called by <Create a Gen object for Integers>; see
     its first definition at *note Create-a-Gen-object-for-Integers::.
<IteratorDemo--Create an Array List>

     This chunk is called by {'IteratorDemo.java'}; see its first
     definition at *note IteratorDemo-java::.
<IteratorDemo--Display the List Backwards>

     This chunk is called by {'IteratorDemo.java'}; see its first
     definition at *note IteratorDemo-java::.
<IteratorDemo--Modify Objects Being Iterated>

     This chunk is called by {'IteratorDemo.java'}; see its first
     definition at *note IteratorDemo-java::.
<IteratorDemo--Use Iterator To Display Contents of Array List>

     This chunk is called by {'IteratorDemo.java'}; see its first
     definition at *note IteratorDemo-java::.
<IteratorDemo--Use ListIterator to Display Modified Contents>

     This chunk is called by {'IteratorDemo.java'}; see its first
     definition at *note IteratorDemo-java::.
<Makefile CLEAN>

     This chunk is called by <Makefile CLEAN Targets>; see its first
     definition at *note Makefile-CLEAN-Targets::.
<Makefile CLEAN Targets>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile CONSTANTS>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile DEFAULTS>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile DISTCLEAN>

     This chunk is called by <Makefile CLEAN Targets>; see its first
     definition at *note Makefile-CLEAN-Targets::.
<Makefile HTML>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile MAKEFILE Target>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile MAKEPDF>

     This chunk is called by <Makefile PDF>; see its first definition
     at *note Makefile-PDF::.
<Makefile OPENPDF>

     This chunk is called by <Makefile PDF>; see its first definition
     at *note Makefile-PDF::.
<Makefile PDF>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile TANGLE WEAVE>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile WORLDCLEAN>

     This chunk is called by <Makefile CLEAN Targets>; see its first
     definition at *note Makefile-CLEAN-Targets::.
<Method returning object of type T>

     This chunk is called by <Class Gen>; see its first definition at
     *note Class-Gen::.
<Method showing type of T>

     This chunk is called by <Class Gen>; see its first definition at
     *note Class-Gen::.
<Number 1>

     This chunk is called by {'ShowFileTryWR.java'}; see its first
     definition at *note ShowFileTryWR-java::.
<Number 2>

     This chunk is called by {'CopyFileMultTryWR.java'}; see its first
     definition at *note CopyFileMultTryWR-java::.
<OnlyExt Accept Method Implementation>

     This chunk is called by {'OnlyExt.java'}; see its first
     definition at *note OnlyExt-java::.
<OnlyExt Constructor>

     This chunk is called by {'OnlyExt.java'}; see its first
     definition at *note OnlyExt-java::.
<OnlyExt Instance Variable Declarations>

     This chunk is called by {'OnlyExt.java'}; see its first
     definition at *note OnlyExt-java::.
<PrintWriterDemo PrintWriter Constructor>

     This chunk is called by {'PrinterWriterDemo.java'}; see its first
     definition at *note PrinterWriterDemo-java::.
<PrintWriterDemo Printing To Console>

     This chunk is called by {'PrinterWriterDemo.java'}; see its first
     definition at *note PrinterWriterDemo-java::.
<Rectangle Area Method Declaration >

     This chunk is called by <FindAreas SubClass Rectangle >; see its
     first definition at *note FindAreas-SubClass-Rectangle-::.
<Rectangle Constructor >

     This chunk is called by <FindAreas SubClass Rectangle >; see its
     first definition at *note FindAreas-SubClass-Rectangle-::.
<Reference to Integer Instance>

     This chunk is called by <Create a Gen object for Integers>; see
     its first definition at *note Create-a-Gen-object-for-Integers::.
<ReflectionDemo1--Class forName() Call>

     This chunk is called by {'ReflectionDemo1.java'}; see its first
     definition at *note ReflectionDemo1-java::.
<ReflectionDemo1--getConstructors() Call>

     This chunk is called by {'ReflectionDemo1.java'}; see its first
     definition at *note ReflectionDemo1-java::.
<ReflectionDemo1--getFields() Call>

     This chunk is called by {'ReflectionDemo1.java'}; see its first
     definition at *note ReflectionDemo1-java::.
<ReflectionDemo1--getMethods() Call>

     This chunk is called by {'ReflectionDemo1.java'}; see its first
     definition at *note ReflectionDemo1-java::.
<Show Type>

     This chunk is called by <Create a Gen object for Integers>; see
     its first definition at *note Create-a-Gen-object-for-Integers::.
<ShowFile Close a File>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'ShowFile.java'}         See *note ShowFile-java::.
     {'ShowFileAlt.java'}      See *note ShowFileAlt-java::.
<ShowFile Initial Comments>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'ShowFile.java'}         See *note ShowFile-java::.
     {'ShowFileAlt.java'}      See *note ShowFileAlt-java::.
     {'ShowFileSingleTry'}     See *note ShowFileSingleTry::.
<ShowFile Instance Variable Declarations>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'ShowFile.java'}         See *note ShowFile-java::.
     {'ShowFileAlt.java'}      See *note ShowFileAlt-java::.
     {'ShowFileSingleTry'}     See *note ShowFileSingleTry::.
<ShowFile Open a File>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'ShowFile.java'}         See *note ShowFile-java::.
     {'ShowFileAlt.java'}      See *note ShowFileAlt-java::.
     {'ShowFileSingleTry'}     See *note ShowFileSingleTry::.
<ShowFile Read a File>

     This chunk is called by {'ShowFile.java'}; see its first
     definition at *note ShowFile-java::.
<ShowFileAlt Read a File>

     This chunk is called by {'ShowFileAlt.java'}; see its first
     definition at *note ShowFileAlt-java::.
<ShowFileSingleTry Additional Initial Comment>

     This chunk is called by {'ShowFileSingleTry'}; see its first
     definition at *note ShowFileSingleTry::.
<ShowFileSingleTry Read a File>

     This chunk is called by {'ShowFileSingleTry'}; see its first
     definition at *note ShowFileSingleTry::.
<ShowFileTryWR Check CL Args>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'CopyFileMultTryWR.java'}See *note CopyFileMultTryWR-java::.
     {'ShowFileTryWR.java'}    See *note ShowFileTryWR-java::.
<ShowFileTryWR Check CL Args End>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'CopyFileMultTryWR.java'}See *note CopyFileMultTryWR-java::.
     {'ShowFileTryWR.java'}    See *note ShowFileTryWR-java::.
<ShowFileTryWR Initial Comments>

     This chunk is called by {'ShowFileTryWR.java'}; see its first
     definition at *note ShowFileTryWR-java::.
<ShowFileTryWR Instance Variable Declaration>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'CopyFileMultTryWR.java'}See *note CopyFileMultTryWR-java::.
     {'ShowFileTryWR.java'}    See *note ShowFileTryWR-java::.
<ShowFileTryWR Open a File TryWR>

     This chunk is called by {'ShowFileTryWR.java'}; see its first
     definition at *note ShowFileTryWR-java::.
<SpliteratorDemo--Create New List>

     This chunk is called by {'SpliteratorDemo.java'}; see its first
     definition at *note SpliteratorDemo-java::.
<SpliteratorDemo--Create an Array List for Doubles>

     This chunk is called by {'SpliteratorDemo.java'}; see its first
     definition at *note SpliteratorDemo-java::.
<SpliteratorDemo--Use forEachRemaining() to Display Contents>

     This chunk is called by {'SpliteratorDemo.java'}; see its first
     definition at *note SpliteratorDemo-java::.
<SpliteratorDemo--Use tryAdvance() to Display Contents>

     This chunk is called by {'SpliteratorDemo.java'}; see its first
     definition at *note SpliteratorDemo-java::.
<SquareNum--SquareNum Class>

     This chunk is called by {'SquareNum.java'}; see its first
     definition at *note SquareNum-java::.
<SquareNum--SquareNum Class-Body>

     This chunk is called by <SquareNum--SquareNum Class>; see its
     first definition at *note SquareNum---SquareNum-Class::.
<SquareNum--SquareNum Class-Documentation>

     This chunk is called by <SquareNum--SquareNum Class>; see its
     first definition at *note SquareNum---SquareNum-Class::.
<SquareNum--getNumber() Method>

     This chunk is called by <SquareNum--SquareNum Class-Body>; see
     its first definition at *note
     SquareNum---SquareNum-Class--Body::.
<SquareNum--getNumber() Method-Body>

     This chunk is called by <SquareNum--getNumber() Method>; see its
     first definition at *note SquareNum---getNumber---Method::.
<SquareNum--getNumber() Method-Documentation>

     This chunk is called by <SquareNum--getNumber() Method>; see its
     first definition at *note SquareNum---getNumber---Method::.
<SquareNum--main() Method>

     This chunk is called by <SquareNum--SquareNum Class-Body>; see
     its first definition at *note
     SquareNum---SquareNum-Class--Body::.
<SquareNum--main() Method-Body>

     This chunk is called by <SquareNum--main() Method>; see its first
     definition at *note SquareNum---main---Method::.
<SquareNum--main() Method-Documentation>

     This chunk is called by <SquareNum--main() Method>; see its first
     definition at *note SquareNum---main---Method::.
<SquareNum--square() Method>

     This chunk is called by <SquareNum--SquareNum Class-Body>; see
     its first definition at *note
     SquareNum---SquareNum-Class--Body::.
<SquareNum--square() Method-Body>

     This chunk is called by <SquareNum--square() Method>; see its
     first definition at *note SquareNum---square---Method::.
<SquareNum--square() Method-Documentation>

     This chunk is called by <SquareNum--square() Method>; see its
     first definition at *note SquareNum---square---Method::.
<Stack Constructor>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'Stack.java'}            See *note Stack-java::.
     {'StackImproved.java'}    See *note StackImproved-java::.
<Stack Instance Methods>

     This chunk is called by the following chunks:

     Chunk name                First definition point
     -------------------------------------------------------------------------
     {'Stack.java'}            See *note Stack-java::.
     {'StackImproved.java'}    See *note StackImproved-java::.
<Stack Instance Variables>

     This chunk is called by {'Stack.java'}; see its first definition
     at *note Stack-java::.
<Stack Pop>

     This chunk is called by <Stack Instance Methods>; see its first
     definition at *note Stack-Instance-Methods::.
<Stack Private Instance Variables>

     This chunk is called by {'StackImproved.java'}; see its first
     definition at *note StackImproved-java::.
<Stack Push>

     This chunk is called by <Stack Instance Methods>; see its first
     definition at *note Stack-Instance-Methods::.
<Static Method isIn>

     This chunk is called by {'GenMethDemo.java'}; see its first
     definition at *note GenMethDemo-java::.
<TestStack Main Method>

     This chunk is called by {'TestStack.java'}; see its first
     definition at *note TestStack-java::.
<Triangle Area Method Declaration >

     This chunk is called by <FindAreas SubClass Triangle >; see its
     first definition at *note FindAreas-SubClass-Triangle-::.
<Triangle Constructor >

     This chunk is called by <FindAreas SubClass Triangle >; see its
     first definition at *note FindAreas-SubClass-Triangle-::.
<Two Instance Variables Declarations>

     This chunk is called by <Class TwoGen>; see its first definition
     at *note Class-TwoGen::.


File: JavaSE9.info,  Node: List of Tables,  Next: List of General Forms,  Prev: Code Chunk Summaries,  Up: Top

List of Tables
**************

* Menu:

* Table 5.1: PackageAccess.              Package Access Table
* Table 7.1: ByteStreamClasses.          The Byte Stream Classes ...
* Table 7.2: CharacterStreamClasses.     The Character Stream I/O ...
* Table 13.1: CollectionsInterfaces.     Summary of 'Collection' ...
* Table 13.2: CollectionsCoreMethods.    The Methods Declared by ...
* Table 13.3: CollectionCoreClasses.     Collection Core Classes
* Table 13.4: IteratorMethods.           The Methods Provided by ...
* Table 13.5: ListIteratorMethods.       The Methods Declared by ...
* Table 13.6: SpliteratorMethods.        The Methods Declared by ...
* Table 15.1: 'File'-Methods.            'File' Property Methods
* Table 15.2: 'File'-Utility-Methods.    File Utility Methods
* Table 15.3: InputStreamMethods.        The Methods Defined by ...
* Table 15.4: OutputStreamMethods.       The Methods Defined by ...
* Table 15.5: ReaderMethods.             The Methods Defined by ...
* Table 15.6: WriterMethods.             The Methods Defined by ...
* Table 25.1: java.lang-reflect-Classes. Classes Defined in ...
* Table 25.2: java.lang.reflect_Interfaces.
                                         Interfaces Defined in ...
* Table 25.3: ClassMethodsLocating.      Class Methods Locating
* Table A.1: JavaDocTags.                The 'javadoc' Tags


File: JavaSE9.info,  Node: List of General Forms,  Next: Bibliography,  Prev: List of Tables,  Up: Top

List of General Forms
*********************

* Menu:

* GeneralForm 2.1: ClassDeclaration.     Class Declaration -- ...
* GeneralForm 2.2: MethodDeclaration.    Method Declaration -- ...
* GeneralForm 4.1: Subclass.             Subclass General Form
* GeneralForm 4.2: SuperCallingConstructor.
                                         'super' Calling a ...
* GeneralForm 4.3: SuperReferencingSuperclass.
                                         'super' Referencing its ...
* GeneralForm 4.4: AbstractMethodDeclaration.
                                         Abstract Method ...
* GeneralForm 5.1: PackageStatement.     Package Statement -- ...
* GeneralForm 5.2: PackageStatementMulti.Package Statement -- ...
* GeneralForm 5.3: Import.               Import Statement -- ...
* GeneralForm 6.1: InterfaceSimple.      Interface Definition -- ...
* GeneralForm 6.2: ClassImplementsInterface.
                                         Class Implementing ...
* GeneralForm 6.3: InterfaceStaticMethod.Interface Static Method, ...
* GeneralForm 7.1: AutomaticResourceManagement.
                                         General Form Automatic ...
* GeneralForm 9.1: GenericClass.         General Form Generic Class
* GeneralForm 9.2: UpperBoundedWildcard. Upper Bounded Wildcard
* GeneralForm 9.3: LowerBoundedWildcard. Lower Bounded Wildcard
* GeneralForm 9.4: GenericMethod.        Generic Method Declaration
* GeneralForm 15.1: Directory-List.      Obtaining a list of files ...
* GeneralForm 15.2: Directory-List-With-Filter.
                                         Obtaining a filtered list ...
* GeneralForm 15.3: FilenameFilter.Accept.
                                         'accept()' Form to be ...
* GeneralForm 15.4: listFiles.           'File.listFiles()' Form
* GeneralForm 15.5: FileFilter-accept(). FileFilter.accept() Method
* GeneralForm 15.6: CloseStreamWithClose.Traditional Stream Close
* GeneralForm 15.7: TryWithResourcesClose.
                                         'try-with-resources' ...


File: JavaSE9.info,  Node: Bibliography,  Next: Concept Index,  Prev: List of General Forms,  Up: Top

Bibliography
************


File: JavaSE9.info,  Node: Concept Index,  Next: Function Index,  Prev: Bibliography,  Up: Top

Index
*****

 [index ]
* Menu:

* .class syntax:                         .class Syntax.     (line   6)
* <AbstractAreas Abstract Area Method Declaration >, definition: AbstractAreas Abstract Class Figure Node.
                                                            (line  34)
* <AbstractAreas Abstract Area Method Declaration >, use: AbstractAreas Abstract Class Figure Node.
                                                            (line  10)
* <AbstractAreas Abstract Class Figure >, definition: AbstractAreas Abstract Class Figure Node.
                                                            (line  10)
* <AbstractAreas Abstract Class Figure >, use: Improved Figure Class.
                                                            (line  12)
* <AbstractAreas Main Class >, definition: AbstractAreas Main Class.
                                                            (line   6)
* <AbstractAreas Main Class >, use:      Improved Figure Class.
                                                            (line  12)
* <AbstractAreas Main Method Declaration >, definition: AbstractAreas Main Class.
                                                            (line  21)
* <AbstractAreas Main Method Declaration >, use: AbstractAreas Main Class.
                                                            (line   6)
* <BRRead BufferedReader Constructor>, definition: BRRead BufferedReader Constructor Node.
                                                            (line   6)
* <BRRead BufferedReader Constructor>, use: Reading Characters.
                                                            (line  24)
* <BRRead Enter Characters>, definition: BRRead Enter Characters Node.
                                                            (line   6)
* <BRRead Enter Characters>, use:        Reading Characters.
                                                            (line  24)
* <BRReadLines BufferedReader Constructor>, definition: BRReadLines BufferedReader Constructor.
                                                            (line   6)
* <BRReadLines BufferedReader Constructor>, use: Reading Strings.
                                                            (line  20)
* <BRReadLines Enter Lines>, definition: BRReadLines Enter Lines.
                                                            (line   6)
* <BRReadLines Enter Lines>, use:        Reading Strings.   (line  20)
* <BufferedInputStreamDemo Buffer>, definition: BufferedInputStreamDemo Buffer.
                                                            (line   6)
* <BufferedInputStreamDemo Buffer>, use: BufferedInputStreamDemo Instance Variables.
                                                            (line   6)
* <BufferedInputStreamDemo ByteArrayInputStream>, definition: BufferedInputStreamDemo ByteArrayInputStream.
                                                            (line   6)
* <BufferedInputStreamDemo ByteArrayInputStream>, use: BufferedInputStreamDemo Instance Variables.
                                                            (line   6)
* <BufferedInputStreamDemo Instance Variables>, definition: BufferedInputStreamDemo Instance Variables.
                                                            (line   6)
* <BufferedInputStreamDemo Instance Variables>, use: Buffered Input Example.
                                                            (line  16)
* <BufferedInputStreamDemo String>, definition: BufferedInputStreamDemo String Into Buffer.
                                                            (line   6)
* <BufferedInputStreamDemo String>, use: BufferedInputStreamDemo Instance Variables.
                                                            (line   6)
* <BufferedInputStreamDemo String>, use <1>: BufferedReaderDemo Instance Variables.
                                                            (line  10)
* <BufferedInputStreamDemo Switch on Character>, definition: BufferedInputStreamDemo Switch on Character.
                                                            (line   6)
* <BufferedInputStreamDemo Switch on Character>, use: BufferedInputStreamDemo While Loop.
                                                            (line   6)
* <BufferedInputStreamDemo Switch on Character>, use <1>: BufferedReaderDemo TryWithResources BufferedReader.
                                                            (line  10)
* <BufferedInputStreamDemo TryWithResources BufferedInputStream>, definition: BufferedInputStreamDemo TryWithResources BufferedInputStream.
                                                            (line   6)
* <BufferedInputStreamDemo TryWithResources BufferedInputStream>, use: Buffered Input Example.
                                                            (line  16)
* <BufferedInputStreamDemo Utility Variables>, definition: BufferedInputStreamDemo Utility Variables.
                                                            (line   6)
* <BufferedInputStreamDemo Utility Variables>, use: BufferedInputStreamDemo Instance Variables.
                                                            (line   6)
* <BufferedInputStreamDemo While Loop>, definition: BufferedInputStreamDemo While Loop.
                                                            (line   6)
* <BufferedInputStreamDemo While Loop>, use: BufferedInputStreamDemo TryWithResources BufferedInputStream.
                                                            (line   6)
* <BufferedReaderDemo Buffer>, definition: BufferedReaderDemo Buffer.
                                                            (line  14)
* <BufferedReaderDemo Buffer>, use:      BufferedReaderDemo Instance Variables.
                                                            (line  10)
* <BufferedReaderDemo Instance Variables>, definition: BufferedReaderDemo Instance Variables.
                                                            (line  10)
* <BufferedReaderDemo Instance Variables>, use: Buffered Reader Demo.
                                                            (line  17)
* <BufferedReaderDemo TryWithResources BufferedReader>, definition: BufferedReaderDemo TryWithResources BufferedReader.
                                                            (line  10)
* <BufferedReaderDemo TryWithResources BufferedReader>, use: Buffered Reader Demo.
                                                            (line  17)
* <Call Overridden Methods One By One >, definition: FindAreas Main Class Node.
                                                            (line  78)
* <Call Overridden Methods One By One >, use: FindAreas Main Class Node.
                                                            (line  21)
* <Call Overridden Methods One By One Except Figure >, definition: AbstractAreas Main Class.
                                                            (line  70)
* <Call Overridden Methods One By One Except Figure >, use: AbstractAreas Main Class.
                                                            (line  21)
* <Catch Exception>, definition:         Catch Exception.   (line   6)
* <Catch Exception>, use:                Reflection Demonstration.
                                                            (line  22)
* <Catch IOException>, definition:       Catch IOException. (line   6)
* <Catch IOException>, use:              Buffered Input Example.
                                                            (line  16)
* <Catch IOException>, use <1>:          FileReader.        (line  23)
* <Catch IOException>, use <2>:          Buffered Reader Demo.
                                                            (line  17)
* <Class Declaration>, definition:       Class TwoGen.      (line  34)
* <Class Declaration>, use:              Class TwoGen.      (line   6)
* <Class Gen>, definition:               Class Gen<T>.      (line  33)
* <Class Gen>, use:                      Simple Generics Example.
                                                            (line   9)
* <Class GenDemo>, definition:           Class GenDemo.     (line  22)
* <Class GenDemo>, use:                  Simple Generics Example.
                                                            (line   9)
* <Class SimpGen>, definition:           Class SimpGen.     (line   9)
* <Class SimpGen>, use:                  Two Types Example Code.
                                                            (line   6)
* <Class TwoGen>, definition:            Class TwoGen.      (line   6)
* <Class TwoGen>, use:                   Two Types Example Code.
                                                            (line   6)
* <Constructor of Two Parameters>, definition: Class TwoGen.
                                                            (line  54)
* <Constructor of Two Parameters>, use:  Class TwoGen.      (line   6)
* <Constructor taking parameter of Type T>, definition: Class Gen<T>.
                                                            (line  79)
* <Constructor taking parameter of Type T>, use: Class Gen<T>.
                                                            (line  33)
* <CopyFile Check For 2 Files>, definition: CopyFile Check for 2 Files.
                                                            (line   6)
* <CopyFile Check For 2 Files>, use:     Demonstration Writing to a File.
                                                            (line  14)
* <CopyFile Copy a File>, definition:    CopyFile Copy a File.
                                                            (line  10)
* <CopyFile Copy a File>, use:           Demonstration Writing to a File.
                                                            (line  14)
* <CopyFile Initial Comments>, definition: CopyFile Initial Comments.
                                                            (line   6)
* <CopyFile Initial Comments>, use:      Demonstration Writing to a File.
                                                            (line  14)
* <CopyFile Instance Variable Declarations>, definition: CopyFile Instance Variable Declarations.
                                                            (line   6)
* <CopyFile Instance Variable Declarations>, use: Demonstration Writing to a File.
                                                            (line  14)
* <CopyFileMultTryWR Initial Comments>, definition: CopyFileMultTryWR Initial Comments.
                                                            (line   6)
* <CopyFileMultTryWR Initial Comments>, use: Demonstration of Multiple Resources.
                                                            (line  11)
* <CopyFileMultTryWR Manage Two Files>, definition: CopyFileMultTryWR Manage Two Files.
                                                            (line  13)
* <CopyFileMultTryWR Manage Two Files>, use: Demonstration of Multiple Resources.
                                                            (line  11)
* <Create a Gen object for Integers>, definition: GenDemo as Integer.
                                                            (line   6)
* <Create a Gen object for Integers>, use: Class GenDemo.   (line  22)
* <Create a Gen object for Strings>, definition: GenDemo as String.
                                                            (line   6)
* <Create a Gen object for Strings>, use: Class GenDemo.    (line  22)
* <Create Basic Figure Objects >, definition: FindAreas Main Class Node.
                                                            (line  45)
* <Create Basic Figure Objects >, use:   FindAreas Main Class Node.
                                                            (line  21)
* <Create Basic Figure Objects Except Figure >, definition: AbstractAreas Main Class.
                                                            (line  53)
* <Create Basic Figure Objects Except Figure >, use: AbstractAreas Main Class.
                                                            (line  21)
* <Create Basic Figure Reference Variable >, definition: FindAreas Main Class Node.
                                                            (line  62)
* <Create Basic Figure Reference Variable >, use: FindAreas Main Class Node.
                                                            (line  21)
* <Create Basic Figure Reference Variable >, use <1>: AbstractAreas Main Class.
                                                            (line  21)
* <DirList Examine Directory Contents For-Loop>, definition: Examine Directory Contents For-Loop.
                                                            (line   6)
* <DirList Examine Directory Contents For-Loop>, use: DirList Examine Directory Contents.
                                                            (line   6)
* <DirList Examine Directory Contents>, definition: DirList Examine Directory Contents.
                                                            (line   6)
* <DirList Examine Directory Contents>, use: Examine Directory Contents.
                                                            (line   9)
* <DirList Instance Variable Declarations>, definition: DirList Instance Variable Declarations.
                                                            (line   6)
* <DirList Instance Variable Declarations>, use: Examine Directory Contents.
                                                            (line   9)
* <DirList Obtain Directory From Command-Line Args>, definition: DirList Obtain Directory From Command-Line Args.
                                                            (line   6)
* <DirList Obtain Directory From Command-Line Args>, use: DirList Instance Variable Declarations.
                                                            (line   6)
* <DirList Obtain Directory From Command-Line Args>, use <1>: Example Using FilenameFilter Interface.
                                                            (line  39)
* <DirListOnly FilenameFilter Object List>, definition: DirListOnly FilenameFilter Object List.
                                                            (line   9)
* <DirListOnly FilenameFilter Object List>, use: Example Using FilenameFilter Interface.
                                                            (line  39)
* <DirListOnly FilenameFilter Object>, definition: DirListOnly FilenameFilter Object.
                                                            (line   6)
* <DirListOnly FilenameFilter Object>, use: Example Using FilenameFilter Interface.
                                                            (line  39)
* <DirListOnly Print List>, definition:  DirListOnly Print List.
                                                            (line   6)
* <DirListOnly Print List>, use:         Example Using FilenameFilter Interface.
                                                            (line  39)
* <Figure Area Method Declaration >, definition: FindAreas SuperClass Figure Node.
                                                            (line  71)
* <Figure Area Method Declaration >, use: FindAreas SuperClass Figure Node.
                                                            (line   6)
* <Figure Constructor >, definition:     FindAreas SuperClass Figure Node.
                                                            (line  46)
* <Figure Constructor >, use:            FindAreas SuperClass Figure Node.
                                                            (line   6)
* <Figure Constructor >, use <1>:        AbstractAreas Abstract Class Figure Node.
                                                            (line  10)
* <Figure Instance Variable Declarations >, definition: FindAreas SuperClass Figure Node.
                                                            (line  29)
* <Figure Instance Variable Declarations >, use: FindAreas SuperClass Figure Node.
                                                            (line   6)
* <Figure Instance Variable Declarations >, use <1>: AbstractAreas Abstract Class Figure Node.
                                                            (line  10)
* <FileReaderDemo TryWithResources FileReader>, definition: FileReaderDemo TryWithResources FileReader.
                                                            (line   6)
* <FileReaderDemo TryWithResources FileReader>, use: FileReader.
                                                            (line  23)
* <FindAreas Main Class >, definition:   FindAreas Main Class Node.
                                                            (line   6)
* <FindAreas Main Class >, use:          Applying Method Overriding.
                                                            (line  15)
* <FindAreas Main Method Declaration >, definition: FindAreas Main Class Node.
                                                            (line  21)
* <FindAreas Main Method Declaration >, use: FindAreas Main Class Node.
                                                            (line   6)
* <FindAreas SubClass Rectangle >, definition: FindAreas SubClass Rectangle Node.
                                                            (line   6)
* <FindAreas SubClass Rectangle >, use:  Applying Method Overriding.
                                                            (line  15)
* <FindAreas SubClass Rectangle >, use <1>: Improved Figure Class.
                                                            (line  12)
* <FindAreas SubClass Triangle >, definition: FindAreas SubClass Triangle Node.
                                                            (line   6)
* <FindAreas SubClass Triangle >, use:   Applying Method Overriding.
                                                            (line  15)
* <FindAreas SubClass Triangle >, use <1>: Improved Figure Class.
                                                            (line  12)
* <FindAreas SuperClass Figure >, definition: FindAreas SuperClass Figure Node.
                                                            (line   6)
* <FindAreas SuperClass Figure >, use:   Applying Method Overriding.
                                                            (line  15)
* <ForEachDemo--Create an Array List For Integers>, definition: ForEachDemo---Create an Array List For Integers.
                                                            (line   6)
* <ForEachDemo--Create an Array List For Integers>, use: ForEach Alternative to Iterators.
                                                            (line  20)
* <ForEachDemo--Sum the Values by Using a for Loop>, definition: ForEachDemo---Sum the Values by Using a for Loop.
                                                            (line   6)
* <ForEachDemo--Sum the Values by Using a for Loop>, use: ForEach Alternative to Iterators.
                                                            (line  20)
* <ForEachDemo--Use for Loop to Display the Values>, definition: ForEachDemo---Use for Loop to Display the Values.
                                                            (line   6)
* <ForEachDemo--Use for Loop to Display the Values>, use: ForEach Alternative to Iterators.
                                                            (line  20)
* <GenMethDemo Main>, definition:        GenMethDemo Main.  (line   6)
* <GenMethDemo Main>, use:               Example of Generic Method.
                                                            (line  13)
* <Get Value>, definition:               GenDemo as Integer.
                                                            (line  91)
* <Get Value>, use:                      GenDemo as Integer.
                                                            (line   6)
* <Import java.io.File>, definition:     Import java.io.File.
                                                            (line   6)
* <Import java.io.File>, use:            Examine Directory Contents.
                                                            (line   9)
* <Import java.io>, definition:          Import java.io.    (line   6)
* <Import java.io>, use:                 Reading Characters.
                                                            (line  24)
* <Import java.io>, use <1>:             Reading Strings.   (line  20)
* <Import java.io>, use <2>:             Demonstration Using PrintWriter.
                                                            (line   6)
* <Import java.io>, use <3>:             Demonstration Reading From a File.
                                                            (line  10)
* <Import java.io>, use <4>:             close() Within finally.
                                                            (line  19)
* <Import java.io>, use <5>:             Demonstration Reading From File with Single try.
                                                            (line  12)
* <Import java.io>, use <6>:             Demonstration Writing to a File.
                                                            (line  14)
* <Import java.io>, use <7>:             Demonstration of Automatically Closing a File.
                                                            (line   9)
* <Import java.io>, use <8>:             Demonstration of Multiple Resources.
                                                            (line  11)
* <Import java.io>, use <9>:             Example Using FilenameFilter Interface.
                                                            (line  14)
* <Import java.io>, use <10>:            Example Using FilenameFilter Interface.
                                                            (line  39)
* <Import java.io>, use <11>:            Buffered Input Example.
                                                            (line  16)
* <Import java.io>, use <12>:            FileReader.        (line  23)
* <Import java.io>, use <13>:            Buffered Reader Demo.
                                                            (line  17)
* <Import java.io>, use <14>:            Documentation Comments Example.
                                                            (line  14)
* <Import java.lang.reflect>, definition: Import java.lang.reflect.
                                                            (line   6)
* <Import java.lang.reflect>, use:       Reflection Demonstration.
                                                            (line  22)
* <Import java.util>, definition:        Import java.util.  (line   6)
* <Import java.util>, use:               Using an Iterator. (line  34)
* <Import java.util>, use <1>:           ForEach Alternative to Iterators.
                                                            (line  20)
* <Import java.util>, use <2>:           Using Spliterator for Iteration.
                                                            (line  30)
* <Instance Methods Show and Get>, definition: Class TwoGen.
                                                            (line  67)
* <Instance Methods Show and Get>, use:  Class TwoGen.      (line   6)
* <Instance Variable ob of Type T>, definition: Class Gen<T>.
                                                            (line  63)
* <Instance Variable ob of Type T>, use: Class Gen<T>.      (line  33)
* <Integer Type Parameter>, definition:  GenDemo as Integer.
                                                            (line  36)
* <Integer Type Parameter>, use:         GenDemo as Integer.
                                                            (line   6)
* <IteratorDemo--Create an Array List>, definition: IteratorDemo---Create an Array List.
                                                            (line   6)
* <IteratorDemo--Create an Array List>, use: Using an Iterator.
                                                            (line  34)
* <IteratorDemo--Display the List Backwards>, definition: IteratorDemo---Display the List Backwards.
                                                            (line   6)
* <IteratorDemo--Display the List Backwards>, use: Using an Iterator.
                                                            (line  34)
* <IteratorDemo--Modify Objects Being Iterated>, definition: IteratorDemo---Modify Objects Being Iterated.
                                                            (line   6)
* <IteratorDemo--Modify Objects Being Iterated>, use: Using an Iterator.
                                                            (line  34)
* <IteratorDemo--Use Iterator To Display Contents of Array List>, definition: IteratorDemo---Use Iterator To Display Contents of Array List.
                                                            (line   6)
* <IteratorDemo--Use Iterator To Display Contents of Array List>, use: Using an Iterator.
                                                            (line  34)
* <IteratorDemo--Use ListIterator to Display Modified Contents>, definition: IteratorDemo---Use ListIterator to Display Modified Contents.
                                                            (line   6)
* <IteratorDemo--Use ListIterator to Display Modified Contents>, use: Using an Iterator.
                                                            (line  34)
* <Makefile CLEAN Targets>, definition:  Makefile Clean Targets.
                                                            (line   6)
* <Makefile CLEAN Targets>, use:         The Makefile.      (line   6)
* <Makefile CLEAN>, definition:          Makefile Clean.    (line   6)
* <Makefile CLEAN>, use:                 Makefile Clean Targets.
                                                            (line   6)
* <Makefile CONSTANTS>, definition:      Makefile Constants.
                                                            (line   8)
* <Makefile CONSTANTS>, use:             The Makefile.      (line   6)
* <Makefile DEFAULTS>, definition:       Makefile Defaults. (line   6)
* <Makefile DEFAULTS>, use:              The Makefile.      (line   6)
* <Makefile DISTCLEAN>, definition:      Makefile DistClean.
                                                            (line   6)
* <Makefile DISTCLEAN>, use:             Makefile Clean Targets.
                                                            (line   6)
* <Makefile HTML>, definition:           Makefile HTML.     (line   6)
* <Makefile HTML>, use:                  The Makefile.      (line   6)
* <Makefile MAKEFILE Target>, definition: Make the Makefile.
                                                            (line   6)
* <Makefile MAKEFILE Target>, use:       The Makefile.      (line   6)
* <Makefile MAKEPDF>, definition:        Makefile MAKEPDF.  (line   6)
* <Makefile MAKEPDF>, use:               Makefile PDF.      (line   6)
* <Makefile OPENPDF>, definition:        Makefile OPENPDF.  (line   6)
* <Makefile OPENPDF>, use:               Makefile PDF.      (line   6)
* <Makefile PDF>, definition:            Makefile PDF.      (line   6)
* <Makefile PDF>, use:                   The Makefile.      (line   6)
* <Makefile TANGLE WEAVE>, definition:   Makefile Tangle Weave.
                                                            (line   6)
* <Makefile TANGLE WEAVE>, use:          The Makefile.      (line   6)
* <Makefile WORLDCLEAN>, definition:     Makefile WorldClean.
                                                            (line   6)
* <Makefile WORLDCLEAN>, use:            Makefile Clean Targets.
                                                            (line   6)
* <Method returning object of type T>, definition: Class Gen<T>.
                                                            (line  97)
* <Method returning object of type T>, use: Class Gen<T>.   (line  33)
* <Method showing type of T>, definition: Class Gen<T>.     (line 115)
* <Method showing type of T>, use:       Class Gen<T>.      (line  33)
* <Number 1>, definition:                ShowFileTryWR Check CL Args.
                                                            (line  31)
* <Number 1>, use:                       Demonstration of Automatically Closing a File.
                                                            (line   9)
* <Number 2>, definition:                Demonstration of Multiple Resources.
                                                            (line  39)
* <Number 2>, use:                       Demonstration of Multiple Resources.
                                                            (line  11)
* <OnlyExt Accept Method Implementation>, definition: OnlyExt Accept Method Implementation.
                                                            (line   6)
* <OnlyExt Accept Method Implementation>, use: Example Using FilenameFilter Interface.
                                                            (line  14)
* <OnlyExt Constructor>, definition:     OnlyExt Constructor.
                                                            (line   6)
* <OnlyExt Constructor>, use:            Example Using FilenameFilter Interface.
                                                            (line  14)
* <OnlyExt Instance Variable Declarations>, definition: OnlyExt Instance Variable Declarations.
                                                            (line   6)
* <OnlyExt Instance Variable Declarations>, use: Example Using FilenameFilter Interface.
                                                            (line  14)
* <PrintWriterDemo Printing To Console>, definition: PrintWriterDemo Printing To Console.
                                                            (line   6)
* <PrintWriterDemo Printing To Console>, use: Demonstration Using PrintWriter.
                                                            (line   6)
* <PrintWriterDemo PrintWriter Constructor>, definition: PrintWriterDemo PrintWriter Constructor.
                                                            (line   6)
* <PrintWriterDemo PrintWriter Constructor>, use: Demonstration Using PrintWriter.
                                                            (line   6)
* <Rectangle Area Method Declaration >, definition: FindAreas SubClass Rectangle Node.
                                                            (line  43)
* <Rectangle Area Method Declaration >, use: FindAreas SubClass Rectangle Node.
                                                            (line   6)
* <Rectangle Constructor >, definition:  FindAreas SubClass Rectangle Node.
                                                            (line  31)
* <Rectangle Constructor >, use:         FindAreas SubClass Rectangle Node.
                                                            (line   6)
* <Reference to Integer Instance>, definition: GenDemo as Integer.
                                                            (line  58)
* <Reference to Integer Instance>, use:  GenDemo as Integer.
                                                            (line   6)
* <ReflectionDemo1--Class forName() Call>, definition: ReflectionDemo1---Class forName() Call.
                                                            (line   6)
* <ReflectionDemo1--Class forName() Call>, use: Reflection Demonstration.
                                                            (line  22)
* <ReflectionDemo1--getConstructors() Call>, definition: ReflectionDemo1---getConstructors() Call.
                                                            (line   6)
* <ReflectionDemo1--getConstructors() Call>, use: Reflection Demonstration.
                                                            (line  22)
* <ReflectionDemo1--getFields() Call>, definition: ReflectionDemo1---getFields() Call.
                                                            (line   6)
* <ReflectionDemo1--getFields() Call>, use: Reflection Demonstration.
                                                            (line  22)
* <ReflectionDemo1--getMethods() Call>, definition: ReflectionDemo1---getMethods() Call.
                                                            (line   6)
* <ReflectionDemo1--getMethods() Call>, use: Reflection Demonstration.
                                                            (line  22)
* <Show Type>, definition:               GenDemo as Integer.
                                                            (line  76)
* <Show Type>, use:                      GenDemo as Integer.
                                                            (line   6)
* <ShowFile Close a File>, definition:   ShowFile Close a File.
                                                            (line   6)
* <ShowFile Close a File>, use:          Demonstration Reading From a File.
                                                            (line  10)
* <ShowFile Close a File>, use <1>:      close() Within finally.
                                                            (line  19)
* <ShowFile Initial Comments>, definition: ShowFile Initial Comments.
                                                            (line   6)
* <ShowFile Initial Comments>, use:      Demonstration Reading From a File.
                                                            (line  10)
* <ShowFile Initial Comments>, use <1>:  close() Within finally.
                                                            (line  19)
* <ShowFile Initial Comments>, use <2>:  Demonstration Reading From File with Single try.
                                                            (line  12)
* <ShowFile Instance Variable Declarations>, definition: ShowFile Instance Variable Declarations.
                                                            (line   6)
* <ShowFile Instance Variable Declarations>, use: Demonstration Reading From a File.
                                                            (line  10)
* <ShowFile Instance Variable Declarations>, use <1>: close() Within finally.
                                                            (line  19)
* <ShowFile Instance Variable Declarations>, use <2>: Demonstration Reading From File with Single try.
                                                            (line  12)
* <ShowFile Open a File>, definition:    ShowFile Open a File.
                                                            (line  10)
* <ShowFile Open a File>, use:           Demonstration Reading From a File.
                                                            (line  10)
* <ShowFile Open a File>, use <1>:       close() Within finally.
                                                            (line  19)
* <ShowFile Open a File>, use <2>:       Demonstration Reading From File with Single try.
                                                            (line  12)
* <ShowFile Read a File>, definition:    ShowFile Read a File.
                                                            (line   6)
* <ShowFile Read a File>, use:           Demonstration Reading From a File.
                                                            (line  10)
* <ShowFileAlt Read a File>, definition: close() Within finally.
                                                            (line  48)
* <ShowFileAlt Read a File>, use:        close() Within finally.
                                                            (line  19)
* <ShowFileSingleTry Additional Initial Comment>, definition: ShowFileSingleTry Additional Initial Comment.
                                                            (line   6)
* <ShowFileSingleTry Additional Initial Comment>, use: Demonstration Reading From File with Single try.
                                                            (line  12)
* <ShowFileSingleTry Read a File>, definition: ShowFileSingleTry Read a File.
                                                            (line  12)
* <ShowFileSingleTry Read a File>, use:  Demonstration Reading From File with Single try.
                                                            (line  12)
* <ShowFileTryWR Check CL Args End>, definition: ShowFileTryWR Check CL Args.
                                                            (line  17)
* <ShowFileTryWR Check CL Args End>, use: Demonstration of Automatically Closing a File.
                                                            (line   9)
* <ShowFileTryWR Check CL Args End>, use <1>: Demonstration of Multiple Resources.
                                                            (line  11)
* <ShowFileTryWR Check CL Args>, definition: ShowFileTryWR Check CL Args.
                                                            (line   6)
* <ShowFileTryWR Check CL Args>, use:    Demonstration of Automatically Closing a File.
                                                            (line   9)
* <ShowFileTryWR Check CL Args>, use <1>: Demonstration of Multiple Resources.
                                                            (line  11)
* <ShowFileTryWR Initial Comments>, definition: ShowFileTryWR Initial Comments.
                                                            (line   6)
* <ShowFileTryWR Initial Comments>, use: Demonstration of Automatically Closing a File.
                                                            (line   9)
* <ShowFileTryWR Instance Variable Declaration>, definition: ShowFileTryWR Instance Variable Declarations.
                                                            (line   6)
* <ShowFileTryWR Instance Variable Declaration>, use: Demonstration of Automatically Closing a File.
                                                            (line   9)
* <ShowFileTryWR Instance Variable Declaration>, use <1>: Demonstration of Multiple Resources.
                                                            (line  11)
* <ShowFileTryWR Open a File TryWR>, definition: ShowFileTryWR Open a File TryWR.
                                                            (line  18)
* <ShowFileTryWR Open a File TryWR>, use: Demonstration of Automatically Closing a File.
                                                            (line   9)
* <SpliteratorDemo--Create an Array List for Doubles>, definition: SpliteratorDemo---Create an Array List for Doubles.
                                                            (line   6)
* <SpliteratorDemo--Create an Array List for Doubles>, use: Using Spliterator for Iteration.
                                                            (line  30)
* <SpliteratorDemo--Create New List>, definition: SpliteratorDemo---Create New List.
                                                            (line   6)
* <SpliteratorDemo--Create New List>, use: Using Spliterator for Iteration.
                                                            (line  30)
* <SpliteratorDemo--Use forEachRemaining() to Display Contents>, definition: SpliteratorDemo---Use forEachRemaining() to Display Contents.
                                                            (line   6)
* <SpliteratorDemo--Use forEachRemaining() to Display Contents>, use: Using Spliterator for Iteration.
                                                            (line  30)
* <SpliteratorDemo--Use tryAdvance() to Display Contents>, definition: SpliteratorDemo---Use tryAdvance() to Display Contents.
                                                            (line   6)
* <SpliteratorDemo--Use tryAdvance() to Display Contents>, use: Using Spliterator for Iteration.
                                                            (line  30)
* <SquareNum--getNumber() Method-Body>, definition: SquareNum---getNumber() Method Doc and Body.
                                                            (line  23)
* <SquareNum--getNumber() Method-Body>, use: SquareNum---getNumber() Method.
                                                            (line   6)
* <SquareNum--getNumber() Method-Documentation>, definition: SquareNum---getNumber() Method Doc and Body.
                                                            (line   9)
* <SquareNum--getNumber() Method-Documentation>, use: SquareNum---getNumber() Method.
                                                            (line   6)
* <SquareNum--getNumber() Method>, definition: SquareNum---getNumber() Method.
                                                            (line   6)
* <SquareNum--getNumber() Method>, use:  SquareNum---SquareNum Class--Documentation.
                                                            (line  19)
* <SquareNum--main() Method-Body>, definition: SquareNum---main() Method.
                                                            (line  38)
* <SquareNum--main() Method-Body>, use:  SquareNum---main() Method.
                                                            (line   6)
* <SquareNum--main() Method-Documentation>, definition: SquareNum---main() Method.
                                                            (line  24)
* <SquareNum--main() Method-Documentation>, use: SquareNum---main() Method.
                                                            (line   6)
* <SquareNum--main() Method>, definition: SquareNum---main() Method.
                                                            (line   6)
* <SquareNum--main() Method>, use:       SquareNum---SquareNum Class--Documentation.
                                                            (line  19)
* <SquareNum--square() Method-Body>, definition: SquareNum---square() Method Doc and Body.
                                                            (line  24)
* <SquareNum--square() Method-Body>, use: SquareNum---square() Method.
                                                            (line   6)
* <SquareNum--square() Method-Documentation>, definition: SquareNum---square() Method Doc and Body.
                                                            (line   9)
* <SquareNum--square() Method-Documentation>, use: SquareNum---square() Method.
                                                            (line   6)
* <SquareNum--square() Method>, definition: SquareNum---square() Method.
                                                            (line   6)
* <SquareNum--square() Method>, use:     SquareNum---SquareNum Class--Documentation.
                                                            (line  19)
* <SquareNum--SquareNum Class-Body>, definition: SquareNum---SquareNum Class--Documentation.
                                                            (line  19)
* <SquareNum--SquareNum Class-Body>, use: SquareNum---SquareNum Class.
                                                            (line   6)
* <SquareNum--SquareNum Class-Documentation>, definition: SquareNum---SquareNum Class--Documentation.
                                                            (line   6)
* <SquareNum--SquareNum Class-Documentation>, use: SquareNum---SquareNum Class.
                                                            (line   6)
* <SquareNum--SquareNum Class>, definition: SquareNum---SquareNum Class.
                                                            (line   6)
* <SquareNum--SquareNum Class>, use:     Documentation Comments Example.
                                                            (line  14)
* <Stack Constructor>, definition:       Stack Constructor Node.
                                                            (line   6)
* <Stack Constructor>, use:              Stack Class.       (line  22)
* <Stack Constructor>, use <1>:          Improved Stack Class.
                                                            (line  11)
* <Stack Instance Methods>, definition:  Stack Instance Methods Node.
                                                            (line   6)
* <Stack Instance Methods>, use:         Stack Class.       (line  22)
* <Stack Instance Methods>, use <1>:     Improved Stack Class.
                                                            (line  11)
* <Stack Instance Variables>, definition: Stack Instance Variables.
                                                            (line   6)
* <Stack Instance Variables>, use:       Stack Class.       (line  22)
* <Stack Pop>, definition:               Stack Push and Pop Node.
                                                            (line  19)
* <Stack Pop>, use:                      Stack Instance Methods Node.
                                                            (line   6)
* <Stack Private Instance Variables>, definition: Improved Stack Class.
                                                            (line  31)
* <Stack Private Instance Variables>, use: Improved Stack Class.
                                                            (line  11)
* <Stack Push>, definition:              Stack Push and Pop Node.
                                                            (line   6)
* <Stack Push>, use:                     Stack Instance Methods Node.
                                                            (line   6)
* <Static Method isIn>, definition:      Method isIn.       (line   9)
* <Static Method isIn>, use:             Example of Generic Method.
                                                            (line  13)
* <TestStack Main Method>, definition:   Stack TestStack Node.
                                                            (line   6)
* <TestStack Main Method>, use:          Stack Class.       (line  42)
* <Triangle Area Method Declaration >, definition: FindAreas SubClass Triangle Node.
                                                            (line  42)
* <Triangle Area Method Declaration >, use: FindAreas SubClass Triangle Node.
                                                            (line   6)
* <Triangle Constructor >, definition:   FindAreas SubClass Triangle Node.
                                                            (line  30)
* <Triangle Constructor >, use:          FindAreas SubClass Triangle Node.
                                                            (line   6)
* <Two Instance Variables Declarations>, definition: Class TwoGen.
                                                            (line  43)
* <Two Instance Variables Declarations>, use: Class TwoGen. (line   6)
* ==:                                    Enumeration Basics.
                                                            (line  38)
* @author:                               @author.           (line   6)
* @deprecated:                           @deprecated.       (line   6)
* @exception:                            @exception.        (line   6)
* @hidden:                               @hidden.           (line   6)
* @param:                                @param.            (line   3)
* @provides:                             @provides.         (line   6)
* @return:                               @return.           (line   6)
* @see:                                  @see.              (line   6)
* @serial:                               @serial.           (line   6)
* @serialData:                           @serialData.       (line   6)
* @serialField:                          @serialField.      (line   6)
* @since:                                @since.            (line   6)
* @throws:                               @throws.           (line   6)
* @uses:                                 @uses.             (line   6)
* @version:                              @version.          (line   6)
* {@code}:                               @code.             (line   6)
* {@docRoot}:                            @docRoot.          (line   6)
* {@index}:                              @index.            (line   6)
* {@inheritDoc}:                         @inheritDoc.       (line   6)
* {@linkplain}:                          @linkplain.        (line   6)
* {@link}:                               @link.             (line   6)
* {@literal}:                            @literal.          (line   6)
* {@value}:                              @value.            (line   6)
* {AbstractAreas.java }, definition:     Improved Figure Class.
                                                            (line  12)
* {BRRead.java}, definition:             Reading Characters.
                                                            (line  24)
* {BRReadLines.java}, definition:        Reading Strings.   (line  20)
* {BufferedInputStreamDemo.java}, definition: Buffered Input Example.
                                                            (line  16)
* {BufferedReaderDemo.java}, definition: Buffered Reader Demo.
                                                            (line  17)
* {CopyFile.java}, definition:           Demonstration Writing to a File.
                                                            (line  14)
* {CopyFileMultTryWR.java}, definition:  Demonstration of Multiple Resources.
                                                            (line  11)
* {DirList.java}, definition:            Examine Directory Contents.
                                                            (line   9)
* {DirListOnly}, definition:             Example Using FilenameFilter Interface.
                                                            (line  39)
* {FileReaderDemo.java}, definition:     FileReader.        (line  23)
* {FindAreas.java }, definition:         Applying Method Overriding.
                                                            (line  15)
* {ForEachDemo.java}, definition:        ForEach Alternative to Iterators.
                                                            (line  20)
* {GenMethDemo.java}, definition:        Example of Generic Method.
                                                            (line  13)
* {IteratorDemo.java}, definition:       Using an Iterator. (line  34)
* {Makefile}, definition:                The Makefile.      (line   6)
* {OnlyExt.java}, definition:            Example Using FilenameFilter Interface.
                                                            (line  14)
* {PrinterWriterDemo.java}, definition:  Demonstration Using PrintWriter.
                                                            (line   6)
* {ReflectionDemo1.java}, definition:    Reflection Demonstration.
                                                            (line  22)
* {ShowFile.java}, definition:           Demonstration Reading From a File.
                                                            (line  10)
* {ShowFileAlt.java}, definition:        close() Within finally.
                                                            (line  19)
* {ShowFileSingleTry}, definition:       Demonstration Reading From File with Single try.
                                                            (line  12)
* {ShowFileTryWR.java}, definition:      Demonstration of Automatically Closing a File.
                                                            (line   9)
* {SimpleGenerics.java}, definition:     Simple Generics Example.
                                                            (line   9)
* {SpliteratorDemo.java}, definition:    Using Spliterator for Iteration.
                                                            (line  30)
* {SquareNum.java}, definition:          Documentation Comments Example.
                                                            (line  14)
* {Stack.java}, definition:              Stack Class.       (line  22)
* {StackImproved.java}, definition:      Improved Stack Class.
                                                            (line  11)
* {TestStack.java}, definition:          Stack Class.       (line  42)
* {TwoTypeParameters.java}, definition:  Two Types Example Code.
                                                            (line   6)
* abstract class:                        Interfaces.        (line   6)
* abstract class, inheritance:           Using Abstract Classes.
                                                            (line   6)
* abstract method:                       Using Abstract Classes.
                                                            (line   6)
* abstract methods, interface:           Defining Interfaces.
                                                            (line  22)
* abstract methods, interface <1>:       Default Interface Methods.
                                                            (line   6)
* abstract over types:                   Generics.          (line   6)
* abstract type modifier:                Using Abstract Classes.
                                                            (line   6)
* accept():                              FilenameFilter.    (line   6)
* access control table:                  Member Access.     (line  27)
* access control, packages:              Member Access.     (line   6)
* access control, single class:          Access Control.    (line   6)
* access modifiers:                      Access Control.    (line   6)
* access, member:                        Member Access.     (line   6)
* accessibility:                         Packages Intro.    (line   6)
* add():                                 Collection Interface.
                                                            (line  54)
* addAll():                              Collection Interface.
                                                            (line  54)
* Algorithms, Collections Framework:     Collections Overview.
                                                            (line  46)
* anonymous inner classes:               Nested and Inner Classes.
                                                            (line   6)
* API, Stream:                           Streams API.       (line   5)
* Applet:                                Applet Basics.     (line   5)
* argument passing:                      Argument Passing.  (line   6)
* arguments, command-line:               Command-Line Arguments.
                                                            (line   6)
* arguments, varargs:                    Varargs.           (line   6)
* ARM:                                   Automatically Closing Files.
                                                            (line   6)
* Arrays:                                Arrays 2.          (line   6)
* arrays as objects:                     Arrays 2.          (line   6)
* Arrays Class:                          Arrays Class.      (line   5)
* arrays, creating new:                  Creating New Arrays.
                                                            (line   6)
* arrays, getting and setting:           Getting and Setting Arrays.
                                                            (line   6)
* Arrays, reflection:                    Arays and Enumerated Types and Reflection.
                                                            (line   6)
* Arrays, reflection <1>:                Arrays and Reflection.
                                                            (line   6)
* assert:                                Miscellaneous Java Keywords.
                                                            (line   6)
* auto-boxing, generics:                 Reference Types.   (line   6)
* auto-unboxing, generics:               Reference Types.   (line   6)
* autoboxing in generic reference:       GenDemo as Integer.
                                                            (line  46)
* AutoClosable interface:                FileInputStream and FileOutputStream.
                                                            (line  42)
* AutoCloseable:                         AutoCloseable Closeable Flushable Interfaces.
                                                            (line   6)
* automatic resource management:         Automatically Closing Files.
                                                            (line   6)
* AWT:                                   AWT.               (line   6)
* AWT Controls:                          AWT Controls.      (line   6)
* AWT Layout Managers, Menus:            AWT Controls.      (line   5)
* basic iteration using Spliterator:     Using Spliterator for Iteration.
                                                            (line   6)
* binary data, reading and writing:      Byte Streams Character Streams.
                                                            (line   6)
* binding, late, early:                  final to Prevent Overriding.
                                                            (line   6)
* block tags:                            javadoc Documentation Tags.
                                                            (line  45)
* bounded types:                         Bounded Types.     (line   6)
* bounded wildcards:                     Bounded Wildcards. (line   6)
* bounded wildcards, lower bound:        Bounded Wildcards. (line  32)
* bounded wildcards, upper bound:        Bounded Wildcards. (line  18)
* bounded wildcards, upper bound <1>:    Bounded Wildcards. (line  20)
* BRRead BufferedReader Constructor:     BRRead BufferedReader Constructor Node.
                                                            (line   6)
* BRRead Enter Characters:               BRRead Enter Characters Node.
                                                            (line   6)
* BRReadLines BufferedReader Constructor: BRReadLines BufferedReader Constructor.
                                                            (line   6)
* BRReadLines Enter Lines:               BRReadLines Enter Lines.
                                                            (line   6)
* Buffered Byte Streams:                 Buffered Byte Streams.
                                                            (line   6)
* buffered stream:                       Buffered Byte Streams.
                                                            (line   6)
* BufferedInputStream:                   Buffered Byte Streams.
                                                            (line   6)
* BufferedInputStream <1>:               BufferedInputStream.
                                                            (line   6)
* BufferedInputStream constructors:      BufferedInputStream.
                                                            (line   6)
* BufferedOutputStream:                  Buffered Byte Streams.
                                                            (line   6)
* BufferedOutputStream <1>:              BufferedOutputStream.
                                                            (line   5)
* BufferedReader:                        Reading Console Input.
                                                            (line  13)
* BufferedReader <1>:                    BufferedReader.    (line   6)
* BufferedReader constructors:           BufferedReader.    (line   6)
* BufferedReader.lines() method:         BufferedReader.    (line   6)
* BufferedWriter:                        BufferedWriter.    (line   6)
* BufferedWriter constructors:           BufferedWriter.    (line   6)
* Byte Stream Class:                     Byte Stream Class. (line   6)
* Byte Streams:                          Byte Streams.      (line   6)
* Byte Streams, buffered:                Buffered Byte Streams.
                                                            (line   6)
* Byte Streams, definition:              Byte Streams Character Streams.
                                                            (line   6)
* Byte Streams, filtered:                Filtered Byte Streams.
                                                            (line   6)
* byte-oriented I/O:                     Byte Streams.      (line   6)
* ByteArrayInputStream:                  ByteArrayInputStream.
                                                            (line   5)
* ByteArrayOutputStream:                 ByteArrayOutputStream.
                                                            (line   5)
* casts, eliminated in generics:         Type Safety.       (line   6)
* casts, generics, automatic, implicit:  What are Generics. (line   6)
* catch exception:                       I/O Exceptions.    (line   6)
* Character Stream Class:                Character Stream Class.
                                                            (line   6)
* Character Streams:                     Character Streams. (line   6)
* Character Streams, definition:         Byte Streams Character Streams.
                                                            (line   6)
* character streams, Unicode:            Character Stream Class.
                                                            (line   6)
* character-based stream:                Reading Console Input.
                                                            (line   6)
* character-based stream class, PrintWriter: PrintWriter Class.
                                                            (line   6)
* Characteristics, Spliterator:          Spliterator Characteristics.
                                                            (line   6)
* characters, reading:                   Reading Characters.
                                                            (line   6)
* CharArrayReader:                       CharArrayReader.   (line   5)
* CharArrayWriter:                       CharArrayWriter.   (line   5)
* charAT():                              String Class.      (line  33)
* Class:                                 Class Gen<T>.      (line 107)
* Class <1>:                             Reflection.        (line   6)
* Class <2>:                             java.lang.Class.   (line   6)
* Class <3>:                             Retrieving Class Objects.
                                                            (line   6)
* Class fundamentals:                    Class Fundamentals.
                                                            (line   6)
* class instance, creating new:          Creating New Class Instances.
                                                            (line   6)
* class members, discovering:            Discovering Class Members.
                                                            (line   6)
* class modifiers, examining:            Examining Class Modifiers.
                                                            (line   6)
* class name, from getName():            Class Gen<T>.      (line 107)
* class namespace, compartmentalize:     Packages.          (line   6)
* Class object, from getClass():         Class Gen<T>.      (line 107)
* class String:                          String Class.      (line   6)
* class types, examing:                  Examining Class Modifiers.
                                                            (line   6)
* class, general form:                   General Form.      (line   6)
* class, new data type:                  Class Fundamentals.
                                                            (line   6)
* Class.forName():                       Class.forName() and Class.getName() Methods.
                                                            (line   6)
* Class.getClasses():                    Methods that Return Classes.
                                                            (line  20)
* Class.getEnumConstants():              Enumerate Types and Reflection.
                                                            (line   6)
* Class.getEnumConstants() <1>:          Enumerated Types Reflection.
                                                            (line   6)
* Class.getName():                       Class.forName() and Class.getName() Methods.
                                                            (line   6)
* Class.isEnum():                        Enumerate Types and Reflection.
                                                            (line   6)
* Class.isEnum() <1>:                    Enumerated Types Reflection.
                                                            (line   6)
* Class.newInstance():                   Creating New Class Instances.
                                                            (line   6)
* classed in java.lang:                  java.lang.         (line  14)
* Classes:                               Classes.           (line   6)
* Classes and Reflection:                Classes and Reflection.
                                                            (line   6)
* classes, nested and inner:             Nested and Inner Classes.
                                                            (line   6)
* CLASSPATH -classpath:                  Classpath.         (line   6)
* clear():                               Collection Interface.
                                                            (line  54)
* close():                               FileInputStream and FileOutputStream.
                                                            (line  29)
* close() <1>:                           Closing a Stream.  (line   6)
* close() Within finally:                close() Within finally.
                                                            (line   6)
* Closeable:                             AutoCloseable Closeable Flushable Interfaces.
                                                            (line   6)
* closing a stream:                      Closing a Stream.  (line   6)
* Collection Algorithms:                 Collection Algorithms.
                                                            (line   5)
* Collection Classes:                    Collection Classes.
                                                            (line   6)
* Collection interface:                  Collection Interface.
                                                            (line   6)
* Collection Interfaces:                 Collection Interfaces.
                                                            (line   6)
* collection-view of a map:              Collections Overview.
                                                            (line  79)
* Collections Framekwork goals:          Collections Overview.
                                                            (line  20)
* Collections Framework:                 Generics.          (line   6)
* Collections Framework <1>:             java.util Part 1 --- Collections Framework.
                                                            (line  20)
* Collections overview:                  Collections Overview.
                                                            (line   6)
* collections, generics:                 Generics.          (line   6)
* collisions, prevention:                Packages.          (line   6)
* command-line arguments:                Command-Line Arguments.
                                                            (line   6)
* Comparators:                           Comparators.       (line   5)
* compartmentalized:                     Packages.          (line   6)
* compile time:                          Interfaces.        (line  19)
* compile-time type check:               Motivation.        (line  31)
* Concurrency Utilities:                 Concurrency.       (line   5)
* Console Class:                         Console Class.     (line   5)
* console I/O:                           I/O Basics.        (line   6)
* console input, reading:                Reading Console Input.
                                                            (line   6)
* constant, final variable:              final Keyword.     (line   6)
* Constants:                             Makefile Constants.
                                                            (line   6)
* constructor:                           Declaring Objects. (line   6)
* constructor modifiers, retrieving and parsing: Constructor Modifiers.
                                                            (line   6)
* Constructor, reflection:               reflect Constructors.
                                                            (line   6)
* Constructors:                          Constructors.      (line   6)
* constructors for FileInputStream:      FileInputStream.   (line   6)
* constructors, finding:                 Finding Constructors.
                                                            (line   6)
* constructors, overloading:             Overloading Constructors.
                                                            (line   6)
* Consumer:                              Iterable Interface.
                                                            (line  32)
* containers, packages as:               Packages.          (line   6)
* contains():                            Collection Interface.
                                                            (line  69)
* containsAll():                         Collection Interface.
                                                            (line  69)
* Creating Directories:                  Creating Directories.
                                                            (line   6)
* creating generic method:               Generic Methods.   (line   6)
* custom doclets:                        Customizing javadoc Output with Doclets.
                                                            (line   6)
* customizing javadoc output, Doclets:   Customizing javadoc Output with Doclets.
                                                            (line   6)
* data type, enumeration:                Enumerations.      (line   6)
* DataInputStream:                       DataOutputStream DataInputStream.
                                                            (line   5)
* DataOutputStream:                      DataOutputStream DataInputStream.
                                                            (line   6)
* default access level:                  Access Control.    (line  28)
* default method, interface, motivation: Default Interface Methods.
                                                            (line  15)
* default methods, interface:            Default Interface Methods.
                                                            (line   6)
* default package:                       Defining Packages. (line   6)
* demonstration using PrintWriter:       Demonstration Using PrintWriter.
                                                            (line   6)
* Dequeue Interface:                     Dequeue Interface. (line   5)
* Dictionary:                            Collections Overview.
                                                            (line   6)
* difference between class and interface: Default Interface Methods.
                                                            (line  32)
* directed graph:                        Serialization.     (line   6)
* directories:                           File.              (line  17)
* Directories:                           Directories.       (line   6)
* directories, creating:                 Creating Directories.
                                                            (line   6)
* directory contents, examine using list(): Examine Directory Contents.
                                                            (line   6)
* dispatch through an interface:         Interface References.
                                                            (line   6)
* Doclet API, simplified:                Simplified Doclet API.
                                                            (line   6)
* doclet core options:                   Doclet Core Options.
                                                            (line   6)
* Doclets:                               Javadoc Doclets.   (line   6)
* doclint:                               Conformance.       (line   6)
* Documentation Comment general form:    Documentation Comment General Form.
                                                            (line   6)
* Documentation comments:                javadoc.           (line   6)
* documentation comments example:        Documentation Comments Example.
                                                            (line   6)
* documentation tags:                    javadoc Documentation Tags.
                                                            (line   6)
* dot operator:                          General Form.      (line  48)
* dynamic allocation, run time:          Declaring Objects. (line   6)
* dynamic dispatch, interface method look-ups: Interface References.
                                                            (line   6)
* dynamic method dispatch:               Dynamic Method Dispatch.
                                                            (line   6)
* dynamic method resolution:             Interfaces.        (line  19)
* early binding:                         final to Prevent Overriding.
                                                            (line   6)
* encapsulation, access control:         Access Control.    (line   6)
* enum valueOf():                        Enum Methods.      (line   6)
* enum values():                         Enum Methods.      (line   6)
* enum variable, declare:                Enumeration Basics.
                                                            (line  25)
* Enumerate types, reflection:           Arays and Enumerated Types and Reflection.
                                                            (line   6)
* enumerate types, reflection:           Enumerated Types Reflection.
                                                            (line   6)
* Enumerated types, refelction:          Enumerate Types and Reflection.
                                                            (line   6)
* enumeration capabilities:              Enumerations.      (line   6)
* enumeration comparison:                Enumeration Basics.
                                                            (line  38)
* enumeration constants:                 Enumeration Basics.
                                                            (line  15)
* enumeration constants <1>:             Enumerations as Class Types.
                                                            (line   6)
* enumeration constructor:               Enumerations as Class Types.
                                                            (line   6)
* enumeration instance variables:        Enumerations as Class Types.
                                                            (line   6)
* enumeration methods:                   Enum Methods.      (line   6)
* enumeration methods <1>:               Enumerations as Class Types.
                                                            (line   6)
* enumeration object:                    Enumerations.      (line   6)
* enumeration restrictions:              Enumerations as Class Types.
                                                            (line  41)
* enumeration variable:                  Enumeration Basics.
                                                            (line  25)
* Enumeration, basics:                   Enumeration Basics.
                                                            (line   6)
* Enumerations:                          Enumerations.      (line   6)
* enumerations as class types:           Enumerations as Class Types.
                                                            (line   6)
* enumerations inherit Enum:             Inherit Enum.      (line   6)
* enums, printing:                       Enumeration Basics.
                                                            (line  51)
* equality, enum types:                  Enumeration Basics.
                                                            (line  38)
* equals():                              String Class.      (line  33)
* equals() <1>:                          Object Class.      (line  49)
* equals() <2>:                          Collection Interface.
                                                            (line  94)
* erasure:                               Class GenDemo.     (line   6)
* err:                                   Predefined Streams.
                                                            (line   6)
* Event Handling:                        Event Handling.    (line   5)
* example generic method:                Example of Generic Method.
                                                            (line   6)
* example, generics:                     Simple Generics Example.
                                                            (line   6)
* examples javadoc command:              Examples Javadoc Command.
                                                            (line   6)
* exceptions for I/O errors:             Demonstration Writing to a File.
                                                            (line   6)
* Exceptions, I/O:                       I/O Exceptions.    (line   6)
* exposure of code:                      Packages Intro.    (line   6)
* extending interfaces:                  Extending Interfaces.
                                                            (line   6)
* extends clause:                        Bounded Types.     (line   6)
* extends keyword:                       Inheritance Basics.
                                                            (line   6)
* extents, with interfaces:              Extending Interfaces.
                                                            (line   6)
* Externalizable:                        Externalizable.    (line   6)
* Field.get(Object):                     Getting and Setting Arrays.
                                                            (line   6)
* Fields, reflection:                    reflect Fields.    (line   6)
* File class:                            File.              (line   6)
* File constructors:                     File.              (line  26)
* File methods:                          File Methods.      (line   6)
* file properties:                       File.              (line   6)
* File utility methods:                  File Utility Methods.
                                                            (line   6)
* file, close:                           FileInputStream and FileOutputStream.
                                                            (line  29)
* file, open:                            FileInputStream and FileOutputStream.
                                                            (line  16)
* file, read from:                       FileInputStream and FileOutputStream.
                                                            (line  63)
* file, write to:                        FileInputStream and FileOutputStream.
                                                            (line  75)
* FileFilter.accept() method:            listFiles() Alternative.
                                                            (line  33)
* FileInputStream:                       FileInputStream and FileOutputStream.
                                                            (line   6)
* FileInputStream <1>:                   FileInputStream.   (line   6)
* FilenameFilter:                        FilenameFilter.    (line   6)
* FilenameFilter interface:              FilenameFilter.    (line   6)
* FileNotFoundException:                 I/O Exceptions.    (line   6)
* FileNotFoundException <1>:             FileInputStream.   (line   6)
* FileOutputStream:                      FileInputStream and FileOutputStream.
                                                            (line   6)
* FileOutputStream <1>:                  FileOutputStream.  (line   5)
* FileReader:                            FileReader.        (line   6)
* FileReader constructors:               FileReader.        (line   6)
* files:                                 File.              (line  17)
* Files, Reading and Writing:            Reading and Writing Files.
                                                            (line   6)
* FileWriter:                            FileWriter.        (line   6)
* FileWriter constructors:               FileWriter.        (line   6)
* filter directory contents:             FilenameFilter.    (line   6)
* filtered byte streams:                 Filtered Byte Streams.
                                                            (line   6)
* FilterInputStream:                     Filtered Byte Streams.
                                                            (line   6)
* FilterOutputStream:                    Filtered Byte Streams.
                                                            (line   6)
* final Keyword:                         final Keyword.     (line   6)
* final to prevent inheritance:          final to Prevent Inheritance.
                                                            (line   6)
* final to prevent overriding:           final to Prevent Overriding.
                                                            (line   6)
* final with inheritance:                final with Inheritance.
                                                            (line   6)
* final, traditional enums:              Enumerations.      (line   6)
* finally used to close a stream:        Closing a Stream.  (line   6)
* finding packages:                      Classpath.         (line   6)
* Flushable:                             AutoCloseable Closeable Flushable Interfaces.
                                                            (line   5)
* flushing:                              PrinterWriter Constructors.
                                                            (line   6)
* flushingOn:                            PrinterWriter Constructors.
                                                            (line   6)
* for loop:                              ForEach Alternative to Iterators.
                                                            (line   6)
* for loop, for-each version:            Iterable Interface.
                                                            (line   6)
* for-each alternative to iterators:     ForEach Alternative to Iterators.
                                                            (line   6)
* for-each version of for loop:          Iterable Interface.
                                                            (line   6)
* fully qualified name:                  Importing.         (line  39)
* fully-qualified name and reflection:   Class.forName() and Class.getName() Methods.
                                                            (line   6)
* generic class:                         Simple Generics Example.
                                                            (line   6)
* generic class <1>:                     Class Gen<T>.      (line   6)
* generic class, general form:           Generic Class General Form.
                                                            (line   6)
* generic class, method:                 What are Generics. (line   6)
* generic class, two type parameters:    Two Type Parameters.
                                                            (line   6)
* generic code, demonstrating an implementation: Class GenDemo.
                                                            (line   6)
* generic constructors:                  Generic Constructors.
                                                            (line   6)
* generic interface:                     Motivation.        (line  31)
* generic method, creating:              Generic Methods.   (line   6)
* generic method, example:               Example of Generic Method.
                                                            (line   6)
* generic method, static:                Method isIn.       (line  28)
* generic methods, including type arguments: Method isIn.   (line  34)
* generic reference assignment to Integer: GenDemo as Integer.
                                                            (line  46)
* generic reference to Integer:          GenDemo as Integer.
                                                            (line  28)
* generic reference, creating:           GenDemo as Integer.
                                                            (line   6)
* generic type argument, reference type: Reference Types.   (line   6)
* generic type checking:                 GenDemo as Integer.
                                                            (line  46)
* generic types differ, type arguments:  Type Arguments.    (line   6)
* Generics (chapter):                    Generics.          (line   6)
* generics eliminate casts:              Type Safety.       (line   6)
* generics ensure type safety:           Type Safety.       (line   6)
* generics example:                      Simple Generics Example.
                                                            (line   6)
* generics improve type safety:          Type Safety.       (line   6)
* generics, bounded types:               Bounded Types.     (line   6)
* generics, casts:                       What are Generics. (line   6)
* generics, compile-time error, mismatched types: GenDemo as Integer.
                                                            (line  46)
* generics, generic constructors:        Generic Constructors.
                                                            (line   6)
* generics, interface as bound:          Bounded Types.     (line  22)
* generics, introduction:                Generics.          (line   6)
* generics, motivation:                  Motivation.        (line   6)
* generics, motivation, readability and robustness: Motivation.
                                                            (line  31)
* generics, only reference types:        Reference Types.   (line   6)
* generics, subtyping:                   Subtyping.         (line   6)
* generics, two type arguments:          Class TwoGen.      (line  29)
* generics, two type parameters, declaration: Class TwoGen. (line  29)
* generics, type safety benefit:         GenDemo as Integer.
                                                            (line  46)
* generics, what they are:               What are Generics. (line   6)
* generics, wildcard arguments:          Wildcard Arguments.
                                                            (line   6)
* getClass(), defined in Object:         Class Gen<T>.      (line 107)
* getDeclaredClasses():                  Methods that Return Classes.
                                                            (line  28)
* getDeclaringClass():                   Methods that Return Classes.
                                                            (line  36)
* getEnclosingClass():                   Methods that Return Classes.
                                                            (line  63)
* getName(), defined in Class:           Class Gen<T>.      (line 107)
* getSuperClass():                       Methods that Return Classes.
                                                            (line  13)
* global members:                        static Keyword.    (line  55)
* Graphics:                              AWT.               (line   6)
* GUI Programming with JavaFX:           Introducing JavaFX.
                                                            (line   5)
* GUI Programming with Swing:            Introducing Swing. (line   5)
* hasNext():                             Using an Iterator. (line  15)
* hiding, instance variables:            Instance Variable Hiding.
                                                            (line   6)
* hierarchical classifications:          Inheritance.       (line   6)
* hierarchical structure, packages:      Packages.          (line   6)
* hierarchy of packages:                 Defining Packages. (line  41)
* hierarchy, constructors executed:      Constructors Executed.
                                                            (line   6)
* hierarchy, files:                      Multilevel Hierarchy.
                                                            (line   6)
* hierarchy, multilevel, creating:       Multilevel Hierarchy.
                                                            (line   6)
* HTML pages, generate with javadoc:     Javadoc Doclets.   (line   6)
* I/O:                                   I/O.               (line   6)
* I/O abstract classes:                  Stream Classes.    (line   6)
* I/O Basics:                            I/O Basics.        (line   6)
* I/O Classes and Interfaces:            I/O Classes and Interfaces.
                                                            (line   6)
* I/O Classes, java.io:                  I/O Classes.       (line   6)
* I/O Exceptions:                        I/O Exceptions.    (line   6)
* I/O Interfaces, java.io:               I/O Interfaces.    (line   6)
* I/O, byte-oriented:                    Byte Streams.      (line   6)
* Images:                                Images.            (line   5)
* implements clause:                     Implementing Interfaces.
                                                            (line   6)
* import is optional:                    Importing.         (line  39)
* import java.io:                        Import java.io.    (line   6)
* import java.io.File:                   Import java.io.File.
                                                            (line   6)
* import packages:                       Packages.          (line   6)
* import statement, general form and example: Importing.    (line  14)
* imported packages must be public:      Importing.         (line  43)
* importing packages:                    Importing.         (line   6)
* in:                                    Predefined Streams.
                                                            (line   6)
* in-line tags:                          javadoc Documentation Tags.
                                                            (line  45)
* index interface, default methods:      Default Interface Methods.
                                                            (line   6)
* Inheritance:                           Inheritance.       (line   6)
* inheritance basics:                    Inheritance Basics.
                                                            (line   6)
* inheritance, member access:            Member Access and Inheritance.
                                                            (line   6)
* inheriting interfaces:                 Extending Interfaces.
                                                            (line   6)
* inline, inlining:                      final to Prevent Overriding.
                                                            (line   6)
* inner classes:                         Nested and Inner Classes.
                                                            (line   6)
* inner classes, anonymous:              Nested and Inner Classes.
                                                            (line   6)
* inner classes, event handling:         Nested and Inner Classes.
                                                            (line   6)
* input stream:                          Streams.           (line   6)
* input/output system:                   I/O.               (line   6)
* InputStream:                           Reading Console Input.
                                                            (line  13)
* InputStream <1>:                       InputStream.       (line   6)
* InputStream abstract class:            Stream Classes.    (line   6)
* InputStream methods:                   InputStream Methods.
                                                            (line   6)
* InputStreamReader concrete subclass:   Reading Console Input.
                                                            (line  13)
* instance variables:                    General Form.      (line  32)
* instance, class:                       Class Fundamentals.
                                                            (line   6)
* instanceof:                            Miscellaneous Java Keywords.
                                                            (line   6)
* intefaces, applying:                   Applying Interfaces.
                                                            (line   6)
* interface as bound, generics:          Bounded Types.     (line  22)
* interface default access, no modified: Defining Interfaces.
                                                            (line  22)
* interface definition, simplified general form: Defining Interfaces.
                                                            (line   7)
* interface method defintion, declared public: Implementing Interfaces.
                                                            (line  18)
* interface methods, abstract methods:   Defining Interfaces.
                                                            (line  22)
* interface methods, private:            Private Interface Methods.
                                                            (line   6)
* interface public access:               Defining Interfaces.
                                                            (line  22)
* interface references, accessing implementations: Interface References.
                                                            (line   6)
* interface variable declarations:       Defining Interfaces.
                                                            (line  35)
* interface, implement:                  Interfaces.        (line   6)
* interface, partial implementation:     Partial Implementations.
                                                            (line   6)
* interface, static method:              Interface Static Methods.
                                                            (line   6)
* interface, traditional form:           Default Interface Methods.
                                                            (line   6)
* Interfaces (chapter):                  Interfaces.        (line   6)
* interfaces in java.lang:               java.lang.         (line  62)
* interfaces, defining:                  Defining Interfaces.
                                                            (line   6)
* interfaces, extending:                 Extending Interfaces.
                                                            (line   6)
* interfaces, final variables in:        Variables in Interfaces.
                                                            (line   6)
* interfaces, implementing:              Implementing Interfaces.
                                                            (line   6)
* interfaces, inheriting:                Extending Interfaces.
                                                            (line   6)
* interfaces, introduction:              Interfaces.        (line   6)
* interfaces, key aspect, no state:      Default Interface Methods.
                                                            (line  32)
* interfaces, key feature, reference look-ups: Interface References.
                                                            (line   6)
* interfaces, nested:                    Nested Interfaces. (line   6)
* interfaces, shared constants:          Variables in Interfaces.
                                                            (line   6)
* internationalization of output to console: PrintWriter Class.
                                                            (line   6)
* internationalization, character streams: Byte Streams Character Streams.
                                                            (line   6)
* internationalization, character streams <1>: Reading Console Input.
                                                            (line   6)
* introduction to Java SE 9:             Java SE 9 Introduction.
                                                            (line   5)
* Introduction to Packages (section):    Packages Intro.    (line   6)
* IOException:                           I/O Exceptions.    (line   6)
* isEmpty():                             Collection Interface.
                                                            (line  69)
* Iterable Interface:                    Iterable Interface.
                                                            (line   6)
* iteration, iterative:                  Recursion.         (line   6)
* iterator:                              Collections Overview.
                                                            (line  56)
* Iterator interface:                    Collections Overview.
                                                            (line  56)
* Iterator iterator:                     Iterable Interface.
                                                            (line   6)
* iterator process:                      Using an Iterator. (line  15)
* iterator():                            Collection Interface.
                                                            (line 101)
* iterator() method:                     Using an Iterator. (line  15)
* Iterator, accessing a Collection:      Accessing a Collection via Iterator.
                                                            (line   6)
* iterator, using:                       Using an Iterator. (line   6)
* iterators, primitive types:            Collections Overview.
                                                            (line  69)
* J2SE 1.2:                              Collections Overview.
                                                            (line   6)
* J2SE 5.0:                              Generics.          (line   6)
* Java Beans:                            Java Beans.        (line   5)
* Java I/O system:                       Streams.           (line   6)
* Java SE 9 introduction:                Java SE 9 Introduction.
                                                            (line   6)
* Java Web Start:                        Java Web Start.    (line   5)
* java.base module:                      Reflection.        (line   6)
* java.io:                               I/O.               (line   6)
* java.io <1>:                           Character Stream Class.
                                                            (line   6)
* java.io <2>:                           java.io --- Input/Output.
                                                            (line   6)
* java.io package:                       Streams.           (line   6)
* java.lang:                             Importing.         (line  29)
* java.lang <1>:                         java.lang.         (line   6)
* java.lang.Class:                       Classes and Reflection.
                                                            (line   6)
* java.lang.Class <1>:                   java.lang.Class.   (line   6)
* java.lang.Class <2>:                   Retrieving Class Objects.
                                                            (line   6)
* java.lang.reflect package:             Reflection.        (line   6)
* java.lang.reflect Package:             java.lang.reflect Package.
                                                            (line   6)
* java.lang.reflect.Array:               Arrays and Reflection.
                                                            (line   6)
* java.lang.reflect.Array <1>:           Getting and Setting Arrays.
                                                            (line   6)
* java.lang.reflect.Constructor:         reflect Constructors.
                                                            (line   6)
* java.lang.reflect.Constructor <1>:     Finding Constructors.
                                                            (line   6)
* java.lang.reflect.Constructor.newInstance(): Creating New Class Instances.
                                                            (line   6)
* java.lang.reflect.Field class:         reflect Fields.    (line   6)
* java.lang.reflect.Field.isEnumConstant(): Enumerate Types and Reflection.
                                                            (line   6)
* java.lang.reflect.Field.isEnumConstant() <1>: Enumerated Types Reflection.
                                                            (line   6)
* java.lang.reflect.Field.set():         Getting and Setting Arrays.
                                                            (line   6)
* java.lang.reflect.Member interface:    Members and Reflection.
                                                            (line   6)
* java.lang.reflect.Method class:        reflect Methods.   (line   6)
* java.nio:                              java.io --- Input/Output.
                                                            (line   6)
* java.nio <1>:                          java.nio --- NIO.  (line   5)
* java.util Collections Framework:       java.util Part 1 --- Collections Framework.
                                                            (line   6)
* java.util Utility Classes:             java.util Part 2 --- Utility Classes.
                                                            (line   5)
* java.util.function:                    Iterable Interface.
                                                            (line  32)
* javadoc:                               javadoc.           (line   6)
* javadoc Command:                       javadoc Command.   (line   6)
* javadoc command examples:              Examples Javadoc Command.
                                                            (line   5)
* Javadoc Doclets:                       Javadoc Doclets.   (line   6)
* Javadoc Module System:                 Javadoc Module System.
                                                            (line   6)
* javadoc output:                        What javadoc Outputs.
                                                            (line   6)
* Javadoc search:                        Javadoc Search.    (line   6)
* javadoc tags:                          javadoc Documentation Tags.
                                                            (line   6)
* javadoc tool:                          javadoc Tool.      (line   6)
* JavaFX:                                Introducing JavaFX.
                                                            (line   6)
* JavaFX Controls:                       Exploring JavaFX Controls.
                                                            (line   5)
* JavaFX Menus:                          Introducing JavaFX Menus.
                                                            (line   5)
* JDK 5:                                 Enumerations.      (line   6)
* JDK 7, try-with-resource:              Closing a Stream.  (line  32)
* JDK 8:                                 Iterable Interface.
                                                            (line  32)
* JDK 8 <1>:                             Collections Overview.
                                                            (line  69)
* JDK 8 <2>:                             Spliterators.      (line   6)
* JDK 8, default method in interface:    Default Interface Methods.
                                                            (line   6)
* JDK 8, static interface method:        Interface Static Methods.
                                                            (line   6)
* JDK 9:                                 java.util Part 1 --- Collections Framework.
                                                            (line  20)
* JDK 9 <1>:                             Reflection.        (line   6)
* JDK 9 modules and javadoc:             javadoc.           (line   6)
* JDK 9, package part of module:         Classpath.         (line   6)
* JDK 9, private interface method:       Private Interface Methods.
                                                            (line   6)
* JDK 9, try-with-resources:             Closing a Stream.  (line  54)
* JShell:                                JShell.            (line   5)
* keyword extends:                       Inheritance Basics.
                                                            (line   6)
* keyword final:                         final Keyword.     (line   6)
* keyword interface:                     Interfaces.        (line   6)
* keyword static:                        static Keyword.    (line   6)
* keyword, enum:                         Enumeration Basics.
                                                            (line   6)
* late binding:                          final to Prevent Overriding.
                                                            (line   6)
* legacy classes and interfaces, Collections: Legacy Classes and Interfaces.
                                                            (line   5)
* length instance variable:              Arrays 2.          (line   6)
* length():                              String Class.      (line  33)
* lines() method:                        BufferedReader.    (line   6)
* List interface:                        List Interface.    (line   5)
* list():                                Directories.       (line   6)
* list() method for directories:         File.              (line  17)
* listFiles() Alternative:               listFiles() Alternative.
                                                            (line   6)
* listIterator() method:                 Using an Iterator. (line  15)
* lower bounded wildcard:                Bounded Wildcards. (line  32)
* main() method, class:                  General Form.      (line  45)
* Make the Makefile:                     Make the Makefile. (line   6)
* Makefiel Weave:                        Makefile Tangle Weave.
                                                            (line   6)
* Makefile Clean:                        Makefile Clean.    (line   6)
* Makefile Clean targets:                Makefile Clean Targets.
                                                            (line   6)
* Makefile defaults:                     Makefile Defaults. (line   6)
* Makefile DistClean:                    Makefile DistClean.
                                                            (line   6)
* Makefile HTML:                         Makefile HTML.     (line   6)
* Makefile MAKEPDF:                      Makefile MAKEPDF.  (line   6)
* Makefile OPENPDF:                      Makefile OPENPDF.  (line   6)
* Makefile PDF:                          Makefile PDF.      (line   6)
* Makefile Tangle:                       Makefile Tangle Weave.
                                                            (line   6)
* Makefile WorldClean:                   Makefile WorldClean.
                                                            (line   6)
* Makefile, The (appendix):              The Makefile.      (line   6)
* maps:                                  Collections Overview.
                                                            (line  79)
* Maps, working with:                    Working with Maps. (line   5)
* member access:                         Member Access.     (line   6)
* member access, inheritance:            Member Access and Inheritance.
                                                            (line   6)
* member hiding:                         super Referencing Superclass.
                                                            (line   6)
* Member interface:                      java.lang.reflect Package.
                                                            (line   6)
* member interfaces:                     Nested Interfaces. (line   6)
* members:                               General Form.      (line  32)
* Members and Reflection:                Members and Reflection.
                                                            (line   6)
* method overriding:                     Method Overriding. (line   6)
* method signatures compatible:          Interfaces.        (line  19)
* method, static, interface:             Interface Static Methods.
                                                            (line   6)
* method, varargs:                       Varargs.           (line   6)
* methods:                               General Form.      (line  32)
* Methods:                               Methods.           (line   6)
* Methods and Classes:                   Methods and Classes.
                                                            (line   6)
* methods, enumeration:                  Enum Methods.      (line   6)
* methods, overloading:                  Overloading Methods.
                                                            (line   6)
* Methods, reflection:                   reflect Methods.   (line   6)
* modifiable collections:                Collection Interfaces.
                                                            (line  47)
* module path:                           Classpath.         (line   6)
* modules, packages:                     Classpath.         (line   6)
* multilevel hierarchy:                  Multilevel Hierarchy.
                                                            (line   6)
* name, method:                          Methods.           (line  15)
* naming mechanism:                      Packages Intro.    (line   6)
* native:                                Miscellaneous Java Keywords.
                                                            (line   6)
* NavigableSet interface:                NavigableSet Interface.
                                                            (line   5)
* nested classes:                        Nested and Inner Classes.
                                                            (line   6)
* nested interfaces:                     Nested Interfaces. (line   6)
* Networking:                            Networking.        (line   5)
* new operator:                          Declaring Objects. (line   6)
* next():                                Using an Iterator. (line  15)
* NIO:                                   java.io --- Input/Output.
                                                            (line   6)
* NIO <1>:                               java.nio --- NIO.  (line   6)
* Object:                                Class Gen<T>.      (line 107)
* Object class:                          Object Class.      (line   6)
* object references, interfaces:         Interface References.
                                                            (line   6)
* Object type:                           What are Generics. (line   6)
* object, class:                         Class Fundamentals.
                                                            (line   6)
* object, instantiate using reflection API: Creating New Class Instances.
                                                            (line   6)
* Object.getClass():                     Object.getClass.   (line   6)
* ObjectInput:                           ObjectInput.       (line   5)
* ObjectInputStream:                     ObjectInputStream. (line   5)
* ObjectOutput:                          ObjectOutput.      (line   5)
* ObjectOutputStream:                    ObjectOutputStream.
                                                            (line   5)
* objects as parameters:                 Objects as Parameters.
                                                            (line   6)
* objects, declaring:                    Declaring Objects. (line   6)
* objects, dynamical allocation:         Returning Objects. (line   6)
* objects, references to:                Returning Objects. (line   6)
* objects, returning from methods:       Returning Objects. (line   6)
* one interface, many methods polymorphism: Why Overridden Methods.
                                                            (line   6)
* _one interface, multiple methods_:     Overloading Methods.
                                                            (line   6)
* out:                                   Predefined Streams.
                                                            (line   6)
* output stream:                         Streams.           (line   6)
* OutputStream:                          OutputStream.      (line   6)
* OutputStream abstract class:           Stream Classes.    (line   6)
* OutputStream as byte stream abstract class: Writing Console Output.
                                                            (line   6)
* OutputStream Methods:                  OutputStream Methods.
                                                            (line   6)
* overload versus override:              Method Overriding. (line   6)
* overload, overloaded:                  Overloading Methods.
                                                            (line   6)
* overloading constructors:              Overloading Constructors.
                                                            (line   6)
* overloading methods:                   Overloading Methods.
                                                            (line   6)
* overloading, automatic type conversion: Overloading Methods.
                                                            (line   6)
* overriding, method:                    Method Overriding. (line   6)
* package command:                       Defining Packages. (line   6)
* package namespace:                     Defining Packages. (line   6)
* package renaming:                      Defining Packages. (line  56)
* package statement:                     Defining Packages. (line   6)
* package statement, example:            Defining Packages. (line  20)
* package statement, general form:       Defining Packages. (line  16)
* package statement, multilevel form:    Defining Packages. (line  43)
* package, java.io:                      Streams.           (line   6)
* Packages (chapter):                    Packages.          (line   6)
* packages hierarchy:                    Defining Packages. (line  41)
* packages stored in file system:        Defining Packages. (line  27)
* packages, access control:              Member Access.     (line   6)
* Packages, Defining (section):          Defining Packages. (line   6)
* packages, finding, example:            Classpath.         (line  26)
* packages, how stored:                  Packages.          (line   6)
* packages, import:                      Packages.          (line   6)
* packages, importing:                   Importing.         (line   6)
* packages, purposes, prevent collisions: Packages.         (line   6)
* parallel iteration:                    Spliterators.      (line   6)
* parallel programming:                  Spliterators.      (line   6)
* parallelStream():                      Collection Interface.
                                                            (line 101)
* parameter list, method:                Methods.           (line  15)
* parameter, generic class:              Class Gen<T>.      (line   6)
* parameterized type:                    Class Gen<T>.      (line   6)
* parameterized types:                   What are Generics. (line   6)
* parameters, as objects:                Objects as Parameters.
                                                            (line   6)
* partitioning mechanism:                Packages Intro.    (line   6)
* performance enhancement, inlining:     final to Prevent Overriding.
                                                            (line   6)
* polymorphism, dynamic run-time:        Why Overridden Methods.
                                                            (line   6)
* polymorphism, one interface multiple methods: Interfaces. (line   6)
* polymorphism, overloading of methods:  Overloading Methods.
                                                            (line   6)
* polymorphism, run-time:                Dynamic Method Dispatch.
                                                            (line   6)
* Predefined Streams:                    Predefined Streams.
                                                            (line   6)
* preexisting code, default method, interface: Default Interface Methods.
                                                            (line  15)
* primitive type iterators:              Collections Overview.
                                                            (line  69)
* Primitive Wrappers:                    Primitive Wrappers.
                                                            (line   6)
* PrimitiveIterator:                     Collections Overview.
                                                            (line  69)
* PrimitiveIterator.OfDouble:            Collections Overview.
                                                            (line  69)
* print() and println(), PrintWriter class: PrinterWriter Constructors.
                                                            (line   6)
* print(), from PrintStream:             Writing Console Output.
                                                            (line   6)
* println(), from PrintStream:           Writing Console Output.
                                                            (line   6)
* PrintStream:                           PrintStream.       (line   5)
* PrintStream as byte stream:            Writing Console Output.
                                                            (line   6)
* PrintWriter:                           PrintWriter.       (line   5)
* PrintWriter Class, character-based stream: PrintWriter Class.
                                                            (line   6)
* PrintWriter constructor:               PrinterWriter Constructors.
                                                            (line   6)
* private access modifier:               Access Control.    (line  28)
* private and inheritance:               Member Access and Inheritance.
                                                            (line   6)
* Properties:                            Collections Overview.
                                                            (line   6)
* protected access modifier:             Access Control.    (line  28)
* public access modifier:                Access Control.    (line  28)
* PushbackInputStream:                   Buffered Byte Streams.
                                                            (line   6)
* PushbackInputStream <1>:               PushbackInputStream.
                                                            (line   5)
* PushbackReader:                        PushbackReader.    (line   5)
* Queue interface:                       Queue Interface.   (line   5)
* RandomAccess Interface:                RandomAccess Interface.
                                                            (line   5)
* RandomAccessFile:                      RandomAccessFile.  (line   5)
* read():                                FileInputStream and FileOutputStream.
                                                            (line  63)
* read(), from BufferedReader:           Reading Characters.
                                                            (line   6)
* read(), InputStream abstract class:    Byte Stream Class. (line  58)
* read(), Reader:                        Character Stream Class.
                                                            (line  55)
* Reader:                                Reader.            (line   6)
* Reader abstract class:                 Character Stream Class.
                                                            (line   6)
* Reader abstract class <1>:             Reading Console Input.
                                                            (line  13)
* Reader abstract class <2>:             Stream Classes.    (line   6)
* Reader abstract class <3>:             Character Streams. (line   6)
* Reader Methods:                        Reader.            (line  14)
* readExternal():                        Externalizable.    (line   6)
* reading characters:                    Reading Characters.
                                                            (line   6)
* Reading Console Input:                 Reading Console Input.
                                                            (line   6)
* reading from file demonstration:       Demonstration Reading From a File.
                                                            (line   6)
* reading strings:                       Reading Strings.   (line   6)
* recursion, recursive:                  Recursion.         (line   6)
* reference variable, superclass:        Superclass Referencing Subclass.
                                                            (line   6)
* Reflection:                            Reflection.        (line   6)
* Reflection demonstration:              Reflection Demonstration.
                                                            (line   6)
* Regular Expressions:                   Regular Expressions.
                                                            (line   5)
* remove():                              Collection Interface.
                                                            (line  54)
* removeAll():                           Collection Interface.
                                                            (line  54)
* removeIf():                            Collection Interface.
                                                            (line  54)
* retainAll():                           Collection Interface.
                                                            (line  54)
* run time, dynamic allocation:          Declaring Objects. (line   6)
* run-time:                              Interfaces.        (line  19)
* run-time polymorphism, abstract class: Using Abstract Classes.
                                                            (line  52)
* run-time system, finding packages:     Classpath.         (line   6)
* self-typed constants:                  Enumeration Basics.
                                                            (line  15)
* SequenceInputStream:                   SequenceInputStream.
                                                            (line   5)
* serializable example:                  Serializable Example.
                                                            (line   5)
* Serializable interface:                Serializable.      (line   6)
* Serialization:                         Serialization.     (line   6)
* Servlets:                              Servlets.          (line   5)
* Set Interface:                         Set Interface.     (line   5)
* size():                                Collection Interface.
                                                            (line  69)
* SortedSet interface:                   SortedSed Interface.
                                                            (line   5)
* Spliterator:                           Collections Overview.
                                                            (line  69)
* Spliterator Characteristics:           Spliterator Characteristics.
                                                            (line   6)
* Spliterator Methods:                   Spliterator Methods.
                                                            (line   6)
* spliterator subinterfaces:             Spliterator Subinterfaces.
                                                            (line   6)
* spliterator():                         Iterable Interface.
                                                            (line  40)
* spliterator() <1>:                     Collection Interface.
                                                            (line 101)
* Spliterator.OfDouble:                  Spliterator Subinterfaces.
                                                            (line   6)
* Spliterator.OfInt:                     Spliterator Subinterfaces.
                                                            (line   6)
* Spliterator.OfLong:                    Spliterator Subinterfaces.
                                                            (line   6)
* Spliterator.OfPrimitive:               Spliterator Subinterfaces.
                                                            (line   6)
* Spliterators:                          Spliterators.      (line   6)
* Stack:                                 Collections Overview.
                                                            (line   6)
* Stack Class:                           Stack Class.       (line   6)
* Stack class, improved:                 Improved Stack Class.
                                                            (line   6)
* stack exhaustion, recursion:           Recursion.         (line   6)
* stack overun, recursion:               Recursion.         (line   6)
* stand-alone tags:                      javadoc Documentation Tags.
                                                            (line  45)
* Standard Doclet:                       Customizing javadoc Output with Doclets.
                                                            (line   6)
* Standard Doclet <1>:                   Standard Doclet.   (line   5)
* standard Java classes, imported implicitly: Importing.    (line  29)
* static and non-static nested classes:  Nested and Inner Classes.
                                                            (line   6)
* static environment:                    Interfaces.        (line  19)
* static generic method:                 Method isIn.       (line  28)
* static initialization block:           static Keyword.    (line  34)
* static Keyword:                        static Keyword.    (line   6)
* static members:                        static Keyword.    (line   6)
* static method, interface:              Interface Static Methods.
                                                            (line   6)
* static restrictions on methods:        static Keyword.    (line  24)
* static variable, not serialized:       Serializable.      (line   6)
* Stream:                                Collection Interface.
                                                            (line 101)
* stream:                                java.io --- Input/Output.
                                                            (line   6)
* Stream API:                            Streams API.       (line   6)
* Stream Benefits:                       Stream Benefits.   (line   5)
* Stream Class, Byte:                    Byte Stream Class. (line   6)
* Stream Class, Character:               Character Stream Class.
                                                            (line   6)
* Stream Classes:                        Stream Classes.    (line   6)
* stream closing using try-with-resources: Closing a Stream.
                                                            (line  32)
* stream closing, traditional approach:  Closing a Stream.  (line   6)
* stream definition:                     Streams.           (line   6)
* Stream reference:                      BufferedReader.    (line   6)
* stream variables, predefined:          Predefined Streams.
                                                            (line   6)
* stream():                              Collection Interface.
                                                            (line 101)
* stream, character-based:               Reading Console Input.
                                                            (line   6)
* stream, input:                         Streams.           (line   6)
* stream, move backwards in:             BufferedReader.    (line   6)
* stream, output:                        Streams.           (line   6)
* Streams:                               Streams.           (line   6)
* Streams API:                           BufferedReader.    (line   6)
* Streams, Character:                    Byte Streams Character Streams.
                                                            (line   6)
* Streams, Predefined:                   Predefined Streams.
                                                            (line   6)
* strictfp:                              Miscellaneous Java Keywords.
                                                            (line   6)
* String Class:                          String Class.      (line   6)
* String concatenation:                  String Class.      (line  20)
* String construction:                   String Class.      (line  20)
* String Handling:                       Strings.           (line   5)
* String methods:                        String Class.      (line  33)
* String operator +:                     String Class.      (line  20)
* Strings:                               Strings.           (line   6)
* strings, reading:                      Reading Strings.   (line   6)
* subclass:                              Inheritance.       (line   6)
* super calling superclass constructors: super Calling Superclass Constructor.
                                                            (line   6)
* super referencing superclass:          super Referencing Superclass.
                                                            (line   6)
* super, using:                          Using super.       (line   6)
* superclass:                            Inheritance.       (line   6)
* superclass referencing subclass:       Superclass Referencing Subclass.
                                                            (line   6)
* Swing:                                 Introducing Swing. (line   6)
* Swing Exploring:                       Exploring Swing.   (line   5)
* Swing Menus:                           Swing Menus.       (line   5)
* switch statement, enum types:          Enumeration Basics.
                                                            (line  38)
* System class:                          Predefined Streams.
                                                            (line   6)
* System.in:                             Reading Console Input.
                                                            (line  13)
* System.out as byte stream:             Writing Console Output.
                                                            (line   6)
* tags, stand-alone, block, in-line:     javadoc Documentation Tags.
                                                            (line  45)
* template, class:                       Class Fundamentals.
                                                            (line   6)
* Text:                                  AWT.               (line   5)
* text-based console programs:           I/O Basics.        (line   6)
* this Keyword:                          this Keyword.      (line   6)
* toArray():                             Collection Interface.
                                                            (line  79)
* toString():                            Object Class.      (line  49)
* toString(), PrintWriter:               PrinterWriter Constructors.
                                                            (line   6)
* transient variable, not serialized:    Serializable.      (line   6)
* try-with-resources:                    I/O.               (line   6)
* try-with-resources <1>:                Automatically Closing Files.
                                                            (line   6)
* try-with-resources <2>:                Closing a Stream.  (line  32)
* try-with-resources multiple resources: Automatically Closing Files.
                                                            (line  54)
* type abstraction, generics:            Generics.          (line   6)
* type argument, passed to type parameter: GenDemo as Integer.
                                                            (line   6)
* type correctness:                      Motivation.        (line  31)
* type erasure:                          Class GenDemo.     (line   6)
* TYPE field for primitive type wrappers: TYPE Field for Primitive Wrappers.
                                                            (line   6)
* type parameter:                        Motivation.        (line  31)
* type parameter, generic class:         Class Gen<T>.      (line   6)
* type safety, generics:                 What are Generics. (line   6)
* type wrappers:                         Primitive Wrappers.
                                                            (line   6)
* type wrappers, generics:               Reference Types.   (line   6)
* type, method:                          Methods.           (line  15)
* Unicode:                               Byte Streams Character Streams.
                                                            (line   6)
* Unicode character streams:             Character Stream Class.
                                                            (line   6)
* Unicode character streams <1>:         Character Stream Class.
                                                            (line   6)
* Unicode characters:                    Character Streams. (line   6)
* unmodifiable collections:              Collection Interfaces.
                                                            (line  47)
* UnsupportedOperationException:         Collection Interfaces.
                                                            (line  47)
* upper bound:                           Bounded Types.     (line   6)
* upper bound wildcard argument:         Bounded Wildcards. (line  20)
* upper bounded wildcard:                Bounded Wildcards. (line  18)
* User-Defined Classes, storing in Collections: Storing User-Defined Classes.
                                                            (line   5)
* vararg ambiguity:                      Varargs.           (line  32)
* vararg overloading:                    Varargs.           (line  32)
* varargs:                               Varargs.           (line   6)
* varargs method:                        Varargs.           (line   6)
* variable, enum type:                   Enumeration Basics.
                                                            (line  25)
* variable-arity method:                 Varargs.           (line   6)
* variable-length arguments:             Varargs.           (line   6)
* Vector:                                Collections Overview.
                                                            (line   6)
* visibility mechanism:                  Packages Intro.    (line   6)
* volative:                              Miscellaneous Java Keywords.
                                                            (line   6)
* wildcard arguments, generics:          Wildcard Arguments.
                                                            (line   6)
* wildcard syntax:                       Wildcard Syntax.   (line   6)
* wildcards, bounded:                    Bounded Wildcards. (line   6)
* wildcards, motivation:                 Wildcard Motivation.
                                                            (line   6)
* Windows:                               AWT.               (line   6)
* Wrappers, Primitives:                  Primitive Wrappers.
                                                            (line   6)
* write to a file:                       FileInputStream and FileOutputStream.
                                                            (line  75)
* write to file demonstration:           Demonstration Writing to a File.
                                                            (line   6)
* write() example:                       Writing Console Output.
                                                            (line  38)
* write() low-level method:              Writing Console Output.
                                                            (line   6)
* write(), FileOutputStream class:       FileInputStream and FileOutputStream.
                                                            (line  75)
* write(), OutputStream abstract class:  Byte Stream Class. (line  58)
* write(), Writer:                       Character Stream Class.
                                                            (line  55)
* writeExternal():                       Externalizable.    (line   6)
* Writer abstract class:                 Character Stream Class.
                                                            (line   6)
* Writer abstract class <1>:             Stream Classes.    (line   6)
* Writer abstract class <2>:             Character Streams. (line   6)
* Writer Methods:                        Writer.            (line  14)
* Writing Console Output:                Writing Console Output.
                                                            (line   6)
* Wrtier:                                Writer.            (line   6)


File: JavaSE9.info,  Node: Function Index,  Next: Program Index,  Prev: Concept Index,  Up: Top

Function Index
**************

 [index ]
* Menu:

* == on Enum:                            Inherit Enum.       (line 37)
* accept on FileFilter:                  listFiles() Alternative.
                                                             (line 33)
* accept on FilenameFilter:              FilenameFilter.     (line 23)
* boolean equals(Object object):         Object Class.       (line 21)
* Class<?> getClass():                   Object Class.       (line 26)
* compareTo on Enum:                     Inherit Enum.       (line 21)
* equals on Enum:                        Inherit Enum.       (line 34)
* getConstructor on Class:               Class Constructor.  (line  6)
* getConstructors on Class:              Class Constructor.  (line 15)
* int hashCode():                        Object Class.       (line 28)
* list on File:                          Directories.        (line 12)
* list on File <1>:                      FilenameFilter.     (line 10)
* listFiles on File:                     listFiles() Alternative.
                                                             (line  9)
* listFiles on File <1>:                 listFiles() Alternative.
                                                             (line 12)
* listFiles on File <2>:                 listFiles() Alternative.
                                                             (line 15)
* Object clone():                        Object Class.       (line 19)
* ordinal on Enum:                       Inherit Enum.       (line 13)
* String toString():                     Object Class.       (line 34)
* valueOf on Enum:                       Enum Methods.       (line 14)
* values on Enum:                        Enum Methods.       (line  8)
* void finalize():                       Object Class.       (line 23)
* void notify():                         Object Class.       (line 30)
* void notifyAll():                      Object Class.       (line 32)
* void wait():                           Object Class.       (line 36)
* void wait(long millisconds, int nanoseconds): Object Class.
                                                             (line 38)
* void wait(long milliseconds):          Object Class.       (line 37)


File: JavaSE9.info,  Node: Program Index,  Prev: Function Index,  Up: Top

Program Index
*************

 [index ]
* Menu:

* AbstractAreas.java:                    Improved Figure Class.
                                                             (line  6)
* BRRead.java:                           Reading Characters. (line 19)
* BRReadLines.java:                      Reading Strings.    (line 16)
* BufferedInputStreamDemo.java:          Buffered Input Example.
                                                             (line  6)
* BufferedReaderDemo.java:               Buffered Reader Demo.
                                                             (line  6)
* CopyFile.java:                         Demonstration Writing to a File.
                                                             (line  6)
* CopyFileMultTryWR.java:                Demonstration of Multiple Resources.
                                                             (line  6)
* DirList.java:                          Examine Directory Contents.
                                                             (line  6)
* FileReaderDemo.java:                   FileReader.         (line 17)
* FindAreas.java:                        Applying Method Overriding.
                                                             (line  6)
* ForEachDemo.java:                      ForEach Alternative to Iterators.
                                                             (line 20)
* GenMethDemo.java:                      Example of Generic Method.
                                                             (line  6)
* IteratorDemo.java:                     Using an Iterator.  (line 30)
* OnlyExt.java:                          Example Using FilenameFilter Interface.
                                                             (line 14)
* PrintWriterDemo.java:                  Demonstration Using PrintWriter.
                                                             (line  6)
* ReflectionDemo1.java:                  Reflection Demonstration.
                                                             (line 22)
* ShowFile.java:                         Demonstration Reading From a File.
                                                             (line  6)
* ShowFileAlt.java:                      close() Within finally.
                                                             (line 11)
* ShowFileTryWR.java:                    Demonstration of Automatically Closing a File.
                                                             (line  6)
* SimpleGenerics.java:                   Simple Generics Example.
                                                             (line  6)
* SpliteratorDemo.java:                  Using Spliterator for Iteration.
                                                             (line 25)
* Stack.java:                            Stack Class.        (line 22)
* StackImproved.java:                    Improved Stack Class.
                                                             (line  9)
* TestStack.java:                        Stack Class.        (line 42)
* TwoTypeParameters.java:                Two Types Example Code.
                                                             (line  6)

